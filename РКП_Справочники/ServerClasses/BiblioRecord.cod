class inherited РКП_СИС.BiblioRecord;

import classes Def;

inclass public


  -- Формирование текста, описывающего периодичность выхода (РКП_СИС.БибЗапись.Период->РКП_Справочники.BiblioRecord.ПериодичностьВыхода)
  func ReleaseFrequency synonym ПериодичностьВыхода (aQuantityPer :Integer; aPerCategory :tPeriodicityCategory) :String;
    if (aPerCategory = pcUnDef) then
      Result = 'Неопределенно';
    elsif (aPerCategory = pcInYear) then
      if    aQuantityPer = -1 then Result = 'В течение года ';
      elsif aQuantityPer =  0 then Result = 'В течение года';
      elsif aQuantityPer =  1 then Result = 'Ежегодн.';
      elsif aQuantityPer =  2 then Result = '2 раза в год';
      elsif aQuantityPer =  3 then Result = '3 раза в год';
      elsif aQuantityPer =  4 then Result = 'Ежекв.';
      elsif aQuantityPer =  5 then Result = '5 раз в год';
      elsif aQuantityPer =  6 then Result = 'Двухмес.';
      elsif aQuantityPer =  7 then Result = '7 раз в год';
      elsif aQuantityPer =  8 then Result = '8 раз в год';
      elsif aQuantityPer =  9 then Result = '9 раз в год';
      elsif aQuantityPer = 10 then Result = '10 раз в год';
      elsif aQuantityPer = 11 then Result = '11 раз в год';
      elsif aQuantityPer = 12 then Result = '12 раз в год';
      fi;
    elsif (aPerCategory = pcInMonth) then
      if    aQuantityPer = -1 then Result = 'В течение месяца ';
      elsif aQuantityPer =  0 then Result = 'В течение месяца';
      elsif aQuantityPer =  1 then Result = '12 раз в год';
      elsif aQuantityPer =  2 then Result = '2 раза в мес.';
      elsif aQuantityPer =  3 then Result = '3 раза в мес.';
      elsif aQuantityPer =  4 then Result = 'Еженед.';
      elsif aQuantityPer =  5 then Result = '5 раз в мес.';
      elsif aQuantityPer =  6 then Result = '6 раз в мес.';
      elsif aQuantityPer =  7 then Result = '7 раз в мес.';
      elsif aQuantityPer =  8 then Result = '2 раза в неделю';
      fi;
    elsif (aPerCategory = pcInWeek) then
      if    aQuantityPer = -1 then Result = 'В течение недели ';
      elsif aQuantityPer =  0 then Result = 'В течение недели';
      elsif aQuantityPer =  1 then Result = 'Еженед.';
      elsif aQuantityPer =  2 then Result = '2 раза в неделю';
      elsif aQuantityPer =  3 then Result = '3 раза в неделю';
      elsif aQuantityPer =  4 then Result = '4 раза в неделю';
      elsif aQuantityPer =  5 then Result = '5 раз в неделю';
      elsif aQuantityPer =  6 then Result = '6 раз в неделю';
      elsif aQuantityPer =  7 then Result = 'Ежедн.';
      fi;
    elsif (aPerCategory = pcInDay) then
      if    aQuantityPer = -1 then Result = 'В течение дня ';
      elsif aQuantityPer =  0 then Result = 'В течение дня';
      elsif aQuantityPer =  1 then Result = 'Ежедн.';
      elsif aQuantityPer =  2 then Result = '2 раза в день';
      fi;
    elsif (aPerCategory = pcTotal) then
      if    aQuantityPer=1  then Result = '1 раз';
      elsif aQuantityPer=2  then Result = '2 раза';
      elsif aQuantityPer=3  then Result = '3 раза';
      elsif aQuantityPer=4  then Result = '4 раза';
      elsif aQuantityPer=5  then Result = '5 раз';
      elsif aQuantityPer=6  then Result = '6 раз';
      elsif aQuantityPer=7  then Result = '7 раз';
      elsif aQuantityPer=8  then Result = '8 раз';
      elsif aQuantityPer=9  then Result = '9 раз';
      elsif aQuantityPer=10 then Result = '10 раз';
      elsif aQuantityPer=11 then Result = '11 раз';
      elsif aQuantityPer=12 then Result = '12 раз';
      elsif aQuantityPer=13 then Result = '13 раз';
      elsif aQuantityPer=14 then Result = '14 раз';
      elsif aQuantityPer=15 then Result = '15 раз';
      elsif aQuantityPer=16 then Result = '16 раз';
      fi;
    fi;
    if Result = nil then
      Result = 'Ошибка';
    fi;
  end;

  -- Возвращает количество выпусков по описанию (метод, обратный ReleaseFrequency)
  func QuantityInPeriod synonym КоличествоВПериоде(aQuantitySig :String) :Integer;
    if    aQuantitySig = 'Ежегодн.'        then Return  1;
    elsif aQuantitySig = '2 раза в год'    then Return  2;
    elsif aQuantitySig = '3 раза в год'    then Return  3;
    elsif aQuantitySig = 'Ежекв.'          then Return  4;
    elsif aQuantitySig = '5 раз в год'     then Return  5;
    elsif aQuantitySig = 'Двухмес.'        then Return  6;
    elsif aQuantitySig = '7 раз в год'     then Return  7;
    elsif aQuantitySig = '8 раз в год'     then Return  8;
    elsif aQuantitySig = '9 раз в год'     then Return  9;
    elsif aQuantitySig = '10 раз в год'    then Return 10;
    elsif aQuantitySig = '11 раз в год'    then Return 11;
    elsif aQuantitySig = 'Ежемес.'         then Return 12;
    elsif aQuantitySig = '2 раза в мес.'   then Return  2;
    elsif aQuantitySig = '3 раза в мес.'   then Return  3;
    elsif aQuantitySig = '5 раз в мес.'    then Return  5;
    elsif aQuantitySig = '6 раз в мес.'    then Return  6;
    elsif aQuantitySig = '7 раз в мес.'    then Return  7;
    elsif aQuantitySig = '2 раза в неделю' then Return  2;
    elsif aQuantitySig = 'Еженед.'         then Return  1;
    elsif aQuantitySig = '2 раза в неделю' then Return  2;
    elsif aQuantitySig = '3 раза в неделю' then Return  3;
    elsif aQuantitySig = '4 раза в неделю' then Return  4;
    elsif aQuantitySig = '5 раз в неделю'  then Return  5;
    elsif aQuantitySig = '6 раз в неделю'  then Return  6;
    elsif aQuantitySig = 'Ежедн.'          then Return  1;
    elsif aQuantitySig = '2 раза в день'   then Return  2;
    elsif aQuantitySig = 'Неопределенно'   then Return  0;
    fi;
  end;

  -- Возвращает категорию периодичности по описанию (метод, обратный ReleaseFrequency)
  func PeriodicityCategory synonym КатегорияПериодичности(aPerCategorySig :String) :tPeriodicityCategory;
    if    aPerCategorySig = 'Ежегодн.'        then Return pcInYear;
    elsif aPerCategorySig = '2 раза в год'    then Return pcInYear;
    elsif aPerCategorySig = '3 раза в год'    then Return pcInYear;
    elsif aPerCategorySig = 'Ежекв.'          then Return pcInYear;
    elsif aPerCategorySig = '5 раз в год'     then Return pcInYear;
    elsif aPerCategorySig = 'Двухмес.'        then Return pcInYear;
    elsif aPerCategorySig = '7 раз в год'     then Return pcInYear;
    elsif aPerCategorySig = '8 раз в год'     then Return pcInYear;
    elsif aPerCategorySig = '9 раз в год'     then Return pcInYear;
    elsif aPerCategorySig = '10 раз в год'    then Return pcInYear;
    elsif aPerCategorySig = '11 раз в год'    then Return pcInYear;
    elsif aPerCategorySig = '12 раз в год'    then Return pcInYear;
    elsif aPerCategorySig = 'Ежемес.'         then Return pcInYear;
    elsif aPerCategorySig = '2 раза в мес.'   then Return pcInMonth;
    elsif aPerCategorySig = '3 раза в мес.'   then Return pcInMonth;
    elsif aPerCategorySig = '4 раза в мес.'   then Return pcInWeek; --=1 р.в НЕДЕЛЮ
    elsif aPerCategorySig = '5 раз в мес.'    then Return pcInMonth;
    elsif aPerCategorySig = '6 раз в мес.'    then Return pcInMonth;
    elsif aPerCategorySig = '7 раз в мес.'    then Return pcInMonth;
    elsif aPerCategorySig = '2 раза в неделю' then Return pcInWeek;
    elsif aPerCategorySig = 'Еженед.'         then Return pcInWeek;
    elsif aPerCategorySig = '2 раза в неделю' then Return pcInWeek;
    elsif aPerCategorySig = '3 раза в неделю' then Return pcInWeek;
    elsif aPerCategorySig = '4 раза в неделю' then Return pcInWeek;
    elsif aPerCategorySig = '5 раз в неделю'  then Return pcInWeek;
    elsif aPerCategorySig = '6 раз в неделю'  then Return pcInWeek;
    elsif aPerCategorySig = 'Ежедн.'          then Return pcInDay;
    elsif aPerCategorySig = '2 раза в день'   then Return pcInDay;
    elsif aPerCategorySig = 'Неопределенно'   then Return pcUnDef;
    fi;
  end;

  -- Возвращант библиографическую форму наименования населенного пункта (для ЛППИ и проч.)
  -- аргумент - запись справочника геогр. объектов РФ
  func НаимГео (R :РКП_Справочники.спрГеография) :String;
    var vLevel :Integer; -- уровень вложенности
    if R.Обл_Центр then
      Result = R.НаимСокр;
    else
      vLevel = РКП_СИС.Recs.RecordsLevel(R);
      if (vLevel in [ктрНеОпределено,
                     ктрФедеральныйОкруг,
                     ктрРеспублика,
                     ктрКрай,
                     ктрАвтономныйОкруг]) then
        if (R.GroupDoc.НаимСокр <> nil) then
          Result  = R.НаимСокр + ' (' + R.GroupDoc.НаимСокр + ')';
        else
          Result  = R.НаимСокр;
        fi;
      elsif (vLevel in [ктрОбласть,
                        ктрОбластнойЦентрСубъектРф,
                        ктрАвтономнаяОбласть,
                        ктрРайон,
                        ктрОбластнойЦентр,
                        ктрРеспубликанскийЦентр,
                        ктрРайонАвтономнойОбласти,
                        ктрНаселенныйПунктОбластногоЦентра,
                        ктрНаселенныйПункт]) then
        if (R.GroupDoc.GroupDoc.НаимСокр <> nil) then
          Result = R.НаимСокр + ' (' + R.GroupDoc.GroupDoc.НаимСокр + ')';
        else
          Result  = R.НаимСокр;
        fi;
      fi;
    fi;
  end;

  func ПодчинениеГео (rGeo :РКП_Справочники.СпрГеография) :String; --аргумент - запись справочника геогр. объектов РФ
    var Level :Integer; -- уровень вложенности
    -- 1.вычисление уровня вложенности
    Level= РКП_СИС.Recs.RecordsLevel(rGeo);
    -- 2.формирование строки
    if (Level < 4) then
      if not rGeo.Субъект_РФ then
        if (rGeo.GroupDoc.Наим <> nil) then
          Return rGeo.GroupDoc.Наим;
        fi;
      else
        Return rGeo.Наим;
      fi;
    else
      if not rGeo.Субъект_РФ then
        if (rGeo.GroupDoc.GroupDoc.Наим <> nil) then
          Return rGeo.GroupDoc.GroupDoc.Наим;
        fi;
      else
        Return rGeo.Наим;
      fi;
    fi;
  end;

end