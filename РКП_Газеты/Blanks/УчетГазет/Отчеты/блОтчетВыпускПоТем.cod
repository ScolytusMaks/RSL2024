class inherited РКП_Газеты.УчетГазет.Отчеты.блОтчетСтатРГБазовый2 "Выпуск газет по тематике";

import СИС2 classes Константы, Функции, СтроковыеФункции;

inobject private

--{{ 2_Свойства
--}}

inobject private

-- 2_Обработчики событий шаблона0. --

-- 2_Обработчики событий клеток шаблона0. --

  func ПолеСодержаниеСтрокиПриНажатии(Cell :TemplateCell;Action :Template.ClickTypes) :Logical;
    var aRequestData :Variant[];
    with РКП_Газеты.УчетГазет.Отчеты.блОтчетУточнение1 do
      aRequestData[дзОписание]                 = 'по тематике "' + СодержаниеСтроки[Cell.Frame] + '"';
      aRequestData[дзФильтрУточнения]          = 'Тематика=' + Str(ЗаписьСтроки[Cell.Frame]);
      aRequestData[дзДатаН]                    = ДатаН;
      aRequestData[дзДатаК]                    = ДатаК;
      aRequestData[дзЗаГод]                    = ЗаГод;
      aRequestData[дзПериодЗапроса]            = ПериодЗапроса;
      aRequestData[дзОкруг]                    = Округ;
      aRequestData[дзФильтрМестаИздания]       = ФильтрМестаИздания;
      aRequestData[дзПравилоРасчетаСтатистики] = ПравилоРасчетаСтатистики;
      ShowPopupForm(aRequestData);
    end;
  end;

-- 2_Обработчики событий прочих объектов шаблона0. --

-- 2_Вспомогательные методы0. --

  proc 2_ПостроениеОтчета0.;
    inherited ПостроениеОтчета;
    if ПериодОтчетаКорректный then
      ПостроениеОтчета_СозданиеПозиций;
      ПостроениеОтчета_РасчетПозиций;
      ПостроениеОтчета_РасчетИтогов;
    fi;
  end;

  proc ПостроениеОтчета_СозданиеПозиций;
    var aFlt :String[];
    var cRecord :РКП_Газеты.ПоступлениеГазеты;
    var z, i, ii :Integer;
    var Theme0, Theme1 :РКП_Справочники.СпрТематика;
    with Query.Create([РКП_Газеты.ПоступлениеГазеты]) do
      if (Округ = nil) then
        AddInArray(aFlt, 'ГодПоступления=' + Str(Year(ДатаН)) );
        AddInArray(aFlt, 'НомеровПолучено>0' );
        AddInArray(aFlt, 'Тематика<>nil' );
      else
        AddInArray(aFlt, 'ГодПоступления=' + Str(Year(ДатаН)) );
        AddInArray(aFlt, 'НомеровПолучено>0' );
        AddInArray(aFlt, 'Тематика<>nil' );
        AddInArray(aFlt, ФильтрМестаИздания );
      fi;
      Filter = СложитьСтрокиФильтраПоИ(aFlt);
      LoadingFieldsMode = mdNone;
      LoadingFields     = 'Тематика';
      Order             = 'Тематика';
      Hint('Выполнение запроса...');
      Select;
      Hint(' ');
      ii = Count;
      while not Eof do
        i = i + 1;
        Hint('Создание строк...', i, ii);
        cRecord = Current as РКП_Газеты.ПоступлениеГазеты;
        Theme1 = cRecord.Тематика;
        if (Theme1 <> Theme0) then
           z = z + 1;
           секцПозиции.InsertFrame(z);
           InsertInArray(ЗаписьСтроки, z, Theme1);
        fi;
        Theme0 = cRecord.Тематика;
        Next;
      od;
      Hint(' ');
    end;
    -- Газеты без тематики
    aFlt = nil;
    with Query.Create([РКП_Газеты.ПоступлениеГазеты]) do
      if (Округ = nil) then
        AddInArray(aFlt, 'ГодПоступления=' + Str(Year(ДатаН)) );
        AddInArray(aFlt, 'НомеровПолучено>0' );
        AddInArray(aFlt, 'Тематика=nil' );
      else
        AddInArray(aFlt, 'ГодПоступления=' + Str(Year(ДатаН)) );
        AddInArray(aFlt, 'НомеровПолучено>0' );
        AddInArray(aFlt, 'Тематика=nil' );
        AddInArray(aFlt, ФильтрМестаИздания );
      fi;
      Filter = СложитьСтрокиФильтраПоИ(aFlt);
      if RecordsExists then
        z = z + 1;
        секцПозиции.InsertFrame(z);
        InsertInArray(ЗаписьСтроки, z, nil);
      fi;
    end;
    --
    секцПозиции.SortBy('ЗаписьСтроки.Код');
    ii = секцПозиции.Count;
    for i = 1 .. ii do
      if ЗаписьСтроки[i] <> nil then
        ФильтрПоступлений[i] = 'Тематика=' + ЗаписьСтроки[i].DocIdStr;
        СодержаниеСтроки[i]  = ЗаписьСтроки[i].Наим;
      else
        ФильтрПоступлений[i] = 'Тематика=nil';
        СодержаниеСтроки[i]  = 'Без тематики';
      fi;
    od;
  end;

  proc ПостроениеОтчета_РасчетИтогов;
    --Удаление строк, не содержащих значений
    УдалитьПустыеСтроки;
    --Вычисление итогов
    ВсегоГазет        = Int(SumOfArray(КолГазет,секцПозиции.Count));
    ВсегоНомеров      = Int(SumOfArray(КолНомеров,секцПозиции.Count));
    ВсегоРазовыйТираж = SumOfArray(РазовыйТираж,секцПозиции.Count);
    ВсегоГодовойТираж = SumOfArray(ГодовойТираж,секцПозиции.Count);
  end;



 --= OLD =--

--  proc ПостроитьОтчет(Sender :Button);
--  var Q,Q1     : query;
--  var k,z,j     : integer;
--  var val0,val1 : record;
--  var QResult   :Variant[];
--  inherited ПостроитьОтчет(Sender);
--    --Проверить настройки запроса
--    if    ДатаН>01.01.1901      and
--          ДатаК>01.01.1901      and
--          ДатаН<=ДатаК          then
--    --Построение списка неповторяющихся значений для #СодержаниеСтроки
--      Q                         = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
--      if Округ = nil            then
--        Q.Filter                = "ГодПоступления="+Str(Year(ДатаН))+
--                                  " and НомеровПолучено>0";
--      else
--        Q.Filter                = "ГодПоступления="+Str(Year(ДатаН))+" and ("+ФильтрМестаИздания+")"+
--                                  " and НомеровПолучено>0";
--      end;
--      Q.LoadingFields           = "Тематика";
--      Q.Order                   = "Тематика";
--      Q.Select;
--      Q.First;
--      for k =  1..Q.Count        do
--        val1       = Q.Current.Тематика;
--          if val1  <>val0 or k=1 then
--           z      = z+1;
--           секцПозиции.InsertFrame(z);
--           InsertInArray(СодержаниеСтроки,z,Q.Current.Тематика.Наим);
--           InsertInArray(ЗаписьСтроки,z,Q.Current.Тематика);
--          end;
--        val0       = Q.Current.Тематика;
--        Q.Next;
--      end;
--      Q.Close;
--    --Сортировка
--    секцПозиции.SortBy("ЗаписьСтроки.КодСортировки");
--    --Расчет значений для найденных строк
--    for k = 1..секцПозиции.Count        do
--      Hint("Расчет строки <"+ЗаписьСтроки[k].Наим+">",k,секцПозиции.Count);
--      if        ЗаДату4 = true          then
--      --========== расчет за год ==========--
--      QResult                   = nil;
--      Q                         = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
--      if Округ = nil            then
--        Q.Filter                = "ГодПоступления="+Str(Year(ДатаН))+
--                                  " and Тематика="+
--                                  Str(ЗаписьСтроки[k])+
--                                  " and НомеровПолучено>0";
--      else
--        Q.Filter                = "ГодПоступления="+Str(Year(ДатаН))+
--                                  " and Тематика="+
--                                  Str(ЗаписьСтроки[k])+
--                                  " and ("+ФильтрМестаИздания+")"+
--                                  " and НомеровПолучено>0";
--      end;
--      Q.LoadingFields           = "Тематика;ГодовойТираж;НомеровПолучено;СреднийРазовыйТираж";
--      Q.Select;
--      QResult                   = Q.CalcAggregates("Count,Sum(НомеровПолучено),Sum(СреднийРазовыйТираж),Sum(ГодовойТираж)") as Variant[];
--      КолГазет[k]               = QResult[1];
--      КолНомеров[k]             = QResult[2];
--      РазовыйТираж[k]           = QResult[3];
--      ГодовойТираж[k]           = QResult[4];
--      Q.Close;
--      else
--      --========== расчет за произвольный период ==========--
--      Q                         = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
--      if Округ = nil            then
--      Q.Filter                  = "ГодПоступления="+Str(Year(ДатаН))+
--                                  " and Тематика="+
--                                  Str(ЗаписьСтроки[k])+
--                                  " and НомеровПолучено>0";
--      else
--      Q.Filter                  = "ГодПоступления="+Str(Year(ДатаН))+
--                                  " and Тематика="+
--                                  Str(ЗаписьСтроки[k])+
--                                  " and ("+ФильтрМестаИздания+")"+
--                                  " and НомеровПолучено>0";
--      end;
--      Q.LoadingFields           = "Газета";
--      Q.Select;
--      Q.First;
--        for j = 1..Q.Count      do
--          --Hint("Расчт строки <"+ЗаписьСтроки[k].Наим+">",j,Q.Count);
--          Hint("Расчет строки <"+SubStr(ЗаписьСтроки[k].Наим,1,20)+"...> ["+str(j)+"/"+str(Q.Count)+"]",k,секцПозиции.Count);
--          Q1                    =  Query.Create([РКП_Газеты.НомерГазеты]);
--          Q1.Filter             = "Газета="+Str(Q.Current.Газета)+
--                                  " and ДатаПринятияНаХранение>="+Str(ДатаН,"dd.mm.yyyy")+
--                                  " and ДатаПринятияНаХранение<"+Str(ДатаК+1,"dd.mm.yyyy")+
--                                  " and isGroup=0";
--          Q1.Select;
--          QResult               = Q1.CalcAggregates("Count,Sum(Тираж)") as Variant[];
--            if  QResult[1]>0    then
--              КолГазет[k]       = КолГазет[k]     + 1;
--              КолНомеров[k]     = КолНомеров[k]   + QResult[1];
--              РазовыйТираж[k]   = РазовыйТираж[k] + (QResult[2]/1000)/QResult[1];
--              ГодовойТираж[k]   = ГодовойТираж[k] + QResult[2]/1000;
--            end;
--          Q.Next;
--        end;
--      end;
--    end;
--    --Удаление строк, не содержащих значений
--    УдалитьПустыеСтроки;
--    --Вычисление итогов
--    ВсегоГазет                  = Int(SumOfArray(КолГазет,секцПозиции.Count));
--    ВсегоНомеров                = Int(SumOfArray(КолНомеров,секцПозиции.Count));
--    ВсегоРазовыйТираж           = SumOfArray(РазовыйТираж,секцПозиции.Count);
--    ВсегоГодовойТираж           = SumOfArray(ГодовойТираж,секцПозиции.Count);
--    else
--      Message("Не заданы или неправильно заданы условия поcтроения отчета!");
--    end;
--  end;






--}


end