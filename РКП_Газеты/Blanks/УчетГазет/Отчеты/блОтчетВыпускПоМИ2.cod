class inherited РКП_Газеты.УчетГазет.Отчеты.блОтчетСтатРГБазовый2 "Выпуск газет субъектами РФ по целевому назначению";

import СИС2 classes Константы, Функции, СтроковыеФункции;
import РКП_Справочники classes Def;

--{{ 2_Свойства

  var ЦелевоеНазначение   :String[];
  var ФильтрПоступленийЦН :String[];
  var ЗаписьЦН            :РКП_Справочники.СпрТематика[];
  var КодСортировкиЦН     :String[];
  var КолГазетЦН          :Integer[];
  var КолНомеровЦН        :Integer[];
  var РазовыйТиражЦН      :Integer[];
  var ГодовойТиражЦН      :Integer[];
  var секцВспомСписок     :TemplateSection;

  var CalcV1 :Logical; -- ОТЛАДКА!!!
--}}

inobject private

-- 2_Обработчики событий шаблона0. --

-- 2_Обработчики событий клеток шаблона0. --

  func ПолеСодержаниеСтрокиПриНажатии(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
    var aRequestData :Variant[];
    with РКП_Газеты.УчетГазет.Отчеты.блОтчетУточнение1 do
      aRequestData[дзОписание]                 = 'по месту издания "' + Trim(СодержаниеСтроки[Cell.Frame]) + '"';
      aRequestData[дзФильтрУточнения]          = ФильтрПоступлений[Cell.Frame];
      aRequestData[дзДатаН]                    = ДатаН;
      aRequestData[дзДатаК]                    = ДатаК;
      aRequestData[дзЗаГод]                    = ЗаГод;
      aRequestData[дзПериодЗапроса]            = ПериодЗапроса;
      aRequestData[дзОкруг]                    = Округ;
      aRequestData[дзФильтрМестаИздания]       = ФильтрМестаИздания;
      aRequestData[дзПравилоРасчетаСтатистики] = ПравилоРасчетаСтатистики;
      ShowPopupForm(aRequestData);
    end;
  end;


  proc ПолеСодержаниеСтрокиПриРисовании(Cell :TemplateCell; Selected :Logical;var Color :Integer;var FieldColor :Integer; Font :Font);
    if (Pos('            ',Cell.Value) = 1) then
      Font.Italic = true;
    else
      Font.Italic = false;
    fi;
  end;


-- 2_Обработчики событий прочих объектов шаблона0. --

-- 2_Вспомогательные методы0. --


  proc 2_ПостроениеОтчета0.;
    if not CalcV1 then
      inherited ПостроениеОтчета;
      if ПериодОтчетаКорректный then
        ПостроениеОтчета_СозданиеПозиций;
        ПостроениеОтчета_РасчетПозиций;
        ПостроениеОтчета_РасчетИтогов;
      fi;
    fi;
  end;

  proc ОчиститьРезультатыРасчета;
    inherited ОчиститьРезультатыРасчета;
    ЦелевоеНазначение     = nil;
    ФильтрПоступленийЦН   = nil;
    ЗаписьЦН              = nil;
    КодСортировкиЦН       = nil;
    КолГазетЦН            = nil;
    КолНомеровЦН          = nil;
    РазовыйТиражЦН        = nil;
    ГодовойТиражЦН        = nil;
    секцВспомСписок.Count = nil;
  end;

  proc ПостроениеОтчета_СозданиеПозиций;
    var z :Integer;
    ПостроениеОтчета_СозданиеПозиций_ФО(z);
    ПостроениеОтчета_СозданиеПозиций_БезМеста(z);
  end;

  proc ПостроениеОтчета_СозданиеПозиций_ФО (var z :Integer); -- Создание позиций федеральных округов
    var aCnd :String[];
    var IdStr, ФильтрПоступленийФО, ФильтрМестФО :String;
    with Query.Create([РКП_Справочники.СпрГеография]) do
      Order = 'Наим';
      if ЭтоОтчетПоРФ then
        Filter = 'Категория=' + Str(ктрФедеральныйОкруг);
      else
        Filter = 'Категория=' + Str(ктрФедеральныйОкруг) + ' and DocId=' + Str(Округ.DocId);
      fi;
      Select;
      while not Eof do
        Hint('Создание списка : ' + Trim(Current.Наим) );
        z = z + 1;
        секцПозиции.InsertFrame(z);
        InsertInArray(Сепаратор, z, true);
        InsertInArray(КатегорияМеста, z, 1);
        InsertInArray(СодержаниеСтроки, z, Current.Наим);
        InsertInArray(ЗаписьСтроки, z, Current);
        IdStr = Str(Current.DocID);
        aCnd[1] = 'МестоИздания is ' + Current.DocIdStr;
        aCnd[2] = 'МестоИздания.DocID=' + IdStr;
        ФильтрПоступленийФО = СложитьСтрокиФильтраПоИЛИ(aCnd);
        InsertInArray(ФильтрПоступлений, z, ФильтрПоступленийФО);
        ПостроениеОтчета_СозданиеПозиций_ЧАЦН(ФильтрПоступленийФО, z);
        aCnd = nil;
        aCnd[1] = 'GroupDoc is ' + Current.DocIdStr;
        aCnd[2] = 'DocID=' + IdStr;
        ФильтрМестФО   = СложитьСтрокиФильтраПоИЛИ(aCnd);
        ПостроениеОтчета_СозданиеПозиций_СубъектыРФ(Current.Наим, ФильтрМестФО, z);
        Next;
      od;
    end;
  end;

  proc ПостроениеОтчета_СозданиеПозиций_СубъектыРФ (локИмяФО, локФильтрМестИзданий: String; var z :Integer); -- Создание позиций (субъекты РФ в составе федерального округа)
    var aCnd :String[];
    var локФильтрПоступлений :String;
    with Query.Create([РКП_Справочники.СпрГеография]) do
      Order = 'Наим';       
      aCnd = nil;
      aCnd[1] = 'Категория in ' + ToStr(ктрСубъектыРФ);
      aCnd[2] = локФильтрМестИзданий;
      Filter = СложитьСтрокиФильтраПоИ(aCnd);
      Select;
      while not Eof do
        Hint('Создание списка : ' + Trim(локИмяФО) + ' : ' + Trim(Current.Наим));
        z = z + 1;
        секцПозиции.InsertFrame(z);
        if ЭтоОтчетПоФО then
          if (Округ.DocID = Current.DocID) then
            InsertInArray(Сепаратор, z, true);
          fi;
        fi;
        InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + Current.Наим);
        InsertInArray(ЗаписьСтроки, z, Current);
        InsertInArray(УровеньПодчиненности, z, РКП_СИС.Recs.RecordsLevel(Current));
        InsertInArray(КатегорияМеста, z, Current.Категория);
        локФильтрПоступлений = ПолучитьФильтрПоступлений(Current);
        InsertInArray(ФильтрПоступлений, z, локФильтрПоступлений);
        ПостроениеОтчета_СозданиеПозиций_ЧАЦН(локФильтрПоступлений, z);
        Next;
      od;
    end;
  end;

  func ПолучитьФильтрПоступлений (locRoot :РКП_Справочники.СпрГеография) :String;
    var RootIdStr, locFltAdd :String;
    var aCndByOr, aCnd :String[];
    RootIdStr = Str(locRoot.DocID);
    aCndByOr[1] = 'МестоИздания is ' + locRoot.DocIdStr;
    aCndByOr[2] = 'МестоИздания.DocID=' + RootIdStr;
    aCnd[1] = СложитьСтрокиФильтраПоИЛИ(aCndByOr);
    if (locRoot.Категория in ктрАвтономныеСубъектыРФ) then
      aCndByOr = nil;
      aCndByOr[1] = 'МестоИздания.Категория in ' + ToStr(ктрАвтономныеСубъектыРФ);
      aCndByOr[2] = 'МестоИздания.GroupDoc.Категория in ' + ToStr(ктрАвтономныеСубъектыРФ);
      aCndByOr[3] = 'МестоИздания.GroupDoc.GroupDoc.Категория in ' + ToStr(ктрАвтономныеСубъектыРФ);
      aCndByOr[4] = 'МестоИздания.GroupDoc.GroupDoc.GroupDoc.Категория in ' + ToStr(ктрАвтономныеСубъектыРФ);
      aCnd[2] = СложитьСтрокиФильтраПоИЛИ(aCndByOr);
    else
      locFltAdd = ПолучитьФильтрПоступленийДоп(locRoot);
      if (locFltAdd <> nil) then
        aCnd[2] = locFltAdd;
      else
        aCndByOr = nil;
        aCndByOr[1] = 'МестоИздания.Категория in ' + ToStr(ктрКромеАвтономныхСубъектовРФ);
        aCndByOr[2] = 'МестоИздания.GroupDoc.Категория in ' + ToStr(ктрКромеАвтономныхСубъектовРФ);
        aCndByOr[3] = 'МестоИздания.GroupDoc.GroupDoc.Категория in ' + ToStr(ктрКромеАвтономныхСубъектовРФ);
        aCndByOr[4] = 'МестоИздания.GroupDoc.GroupDoc.GroupDoc.Категория in ' + ToStr(ктрКромеАвтономныхСубъектовРФ);
        aCnd[2] = СложитьСтрокиФильтраПоИЛИ(aCndByOr);
      fi;
    fi;
    Result = СложитьСтрокиФильтраПоИ(aCnd);
  end;

  func ПолучитьФильтрПоступленийДоп (locRoot :РКП_Справочники.СпрГеография) :String;
    var RootIdStr :String;
    var aCndByOr, aCnd :String[];
    var i :Integer;
    RootIdStr = Str(locRoot.DocID);
    with Query.Create([РКП_Справочники.СпрГеография]) do
      aCndByOr[1] = 'GroupDoc is ' + locRoot.DocIdStr;
      aCndByOr[2] = 'DocID=' + RootIdStr;
      aCnd[1] = СложитьСтрокиФильтраПоИЛИ(aCndByOr);
      aCnd[2] = 'Категория in ' + ToStr(ктрАвтономныеСубъектыРФ);
      Filter = СложитьСтрокиФильтраПоИ(aCnd);
      Select;
      aCnd = nil;
      while not Eof do
        i = i + 1;
        aCnd[i] = 'not Match(МестоИздания.GroupPath,"' + Current.GroupPath + Str(Current.DocID) + '.*")';
        Next;
      od;
      Result = СложитьСтрокиФильтраПоИ(aCnd);
    end;
  end;

  proc ПостроениеОтчета_СозданиеПозиций_БезМеста (var z :Integer); -- Создание позиций без места
    var aCnd :String[];
    var локФильтрПоступлений :String;
    with Query.Create([РКП_Справочники.СпрГеография]) do
      Order = 'Наим';
      Filter = 'Категория=' + Str(ктрНеОпределено);
      Select;
      while not Eof do
        z = z + 1;
        секцПозиции.InsertFrame(z);
        InsertInArray(СодержаниеСтроки, z, Current.Наим);
        InsertInArray(ЗаписьСтроки, z, Current);
        InsertInArray(УровеньПодчиненности, z, РКП_СИС.Recs.RecordsLevel(Current));
        InsertInArray(КатегорияМеста, z, Current.Категория);
        aCnd[1] = 'МестоИздания=nil';
        aCnd[2] = 'МестоИздания=' + Current.DocIdStr;
        локФильтрПоступлений = СложитьСтрокиФильтраПоИЛИ(aCnd);
        InsertInArray(ФильтрПоступлений, z, локФильтрПоступлений);
        ПостроениеОтчета_СозданиеПозиций_ЧАЦН(локФильтрПоступлений, z);
        Next;
      od;
    end;
  end;

  proc ПостроениеОтчета_СозданиеПозиций_ЧАЦН (локФильтрПоступлений: String; var z :Integer); -- Создание позиций по читательским адресам и целевому назначению
    var t, tt :Integer;
    var vLinesContetnt :String;
    ПолучитьСписок_ЧАЦН(локФильтрПоступлений);
    -- Создание позиций
    tt = секцВспомСписок.Count;
    for t = 1 .. tt do
      z = z + 1;
      секцПозиции.InsertFrame(z);
      vLinesContetnt = ОтступСтр2 + ОтступСтр3 + ЦелевоеНазначение[t];
      InsertInArray(СодержаниеСтроки, z, vLinesContetnt);
      InsertInArray(ФильтрПоступлений, z, ФильтрПоступленийЦН[t]);
    od;
  end;

  proc ПолучитьСписок_ЧАЦН (локФильтрПоступлений :String); -- Построение вспомогательного списка неповторяющихся значений ЧАЦН для #СодержаниеСтроки
    var aCnd :String[];
    var val0, val1 :РКП_Справочники.СпрТематика;
    var t :Integer;
    секцВспомСписок.Count = 0;
    ЦелевоеНазначение     = nil;
    ЗаписьЦН              = nil;
    КодСортировкиЦН       = nil;
    ФильтрПоступленийЦН   = nil;
    КолГазетЦН            = nil;
    КолНомеровЦН          = nil;
    РазовыйТиражЦН        = nil;
    ГодовойТиражЦН        = nil;
    with Query.Create([РКП_Газеты.ПоступлениеГазеты]) do
      aCnd[1] = локФильтрПоступлений;
      aCnd[2] = 'ЧАЦН<>nil';
      aCnd[3] = ФильтрМестаИздания; -- м.б.нулевым
      Filter = СложитьСтрокиФильтраПоИ(aCnd);
      LoadingFieldsMode = 0;
      LoadingFields = 'ЧАЦН';
      Order = 'ЧАЦН';
      Select;
      aCnd = nil;
      aCnd[1] = локФильтрПоступлений;
      aCnd[2] = ФильтрМестаИздания; -- м.б.нулевым
      while not Eof do
        val1 = Current.ЧАЦН;
        if (val1 <> val0) then
          t = t + 1;
          секцВспомСписок.InsertFrame(t);
          InsertInArray(ЦелевоеНазначение, t, Current.ЧАЦН.Наим);
          InsertInArray(ЗаписьЦН, t, Current.ЧАЦН);
          InsertInArray(КодСортировкиЦН, t, Current.ЧАЦН.Код);
          aCnd[3] = 'ЧАЦН=' + Str(Current.ЧАЦН);
          InsertInArray(ФильтрПоступленийЦН, t, СложитьСтрокиФильтраПоИ(aCnd));
        fi;
        val0 = Current.ЧАЦН;
        Next;
      od;
      секцВспомСписок.SortBy('КодСортировкиЦН');
    end;
  end;

  proc ПостроениеОтчета_РасчетИтогов;
    var j, jj :Integer;
    var ВсегоГазет_, ВсегоНомеров_ :Integer;
    var ВсегоРазовыйТираж_, ВсегоГодовойТираж_ :Numeric;
    ВсегоГазет_ = nil;
    ВсегоНомеров_ = nil;
    ВсегоРазовыйТираж_ = nil;
    ВсегоГодовойТираж_ = nil;
    jj = секцПозиции.Count;
    for j = jj .. 1 step -1 do   
      -- вычисление промежуточного и общего итогов --
      if ((not Сепаратор[j]) or (КатегорияМеста[j] = 0)) and (ЗаписьСтроки[j] <> nil) then
        -- накопление промежуточных значений
        ВсегоГазет_        = ВсегоГазет_        + КолГазет[j];
        ВсегоНомеров_      = ВсегоНомеров_      + КолНомеров[j];
        ВсегоРазовыйТираж_ = ВсегоРазовыйТираж_ + РазовыйТираж[j];
        ВсегоГодовойТираж_ = ВсегоГодовойТираж_ + ГодовойТираж[j];
        -- накопление итоговых значений
        ВсегоГазет         = ВсегоГазет         + КолГазет[j];
        ВсегоНомеров       = ВсегоНомеров       + КолНомеров[j];
        ВсегоРазовыйТираж  = ВсегоРазовыйТираж  + РазовыйТираж[j];
        ВсегоГодовойТираж  = ВсегоГодовойТираж  + ГодовойТираж[j];
      fi;
      -- присвоение промежуточных итогов --
      if Сепаратор[j] then
        КолГазет[j]        = ВсегоГазет_;
        КолНомеров[j]      = ВсегоНомеров_;
        РазовыйТираж[j]    = ВсегоРазовыйТираж_;
        ГодовойТираж[j]    = ВсегоГодовойТираж_;
      fi;
      -- очистка промежуточных итогов, если следующая строка - не последняя и не сепаратор,
      -- а текущая - сепаратор или без места
      if (j > 1) then -- следующая строка - не последняя
        if (not Сепаратор[j - 1]) then -- верхняя строка - не сепаратор
          if (Сепаратор[j] or (КатегорияМеста[j] = 0)) and (ЗаписьСтроки[j] <> nil) then
            ВсегоГазет_ = nil;
            ВсегоНомеров_ = nil;
            ВсегоРазовыйТираж_ = nil;
            ВсегоГодовойТираж_ = nil;
          fi;
        fi;
      fi;
      -- снятие признака сепаратора для предотвращения удаления строки --
      if Сепаратор[j] then
        Сепаратор[j] = false;
      fi;
    od;
    -- Удаление строк, не содержащих значений --
    УдалитьПустыеСтроки;
  end;


 --= OLD =--

  proc ПостроитьОтчетV1(Sender :Button);
  var Q1,Q2,Q3,Q                : query;
  var k,k1,z,k2,j,kk,k3,t       : integer;
  var ФильтрПоступлений1        : string;
  var ФильтрМест1               : string;
  var ФильтрПоступлений2        : string;
  var ФильтрПоступлений3        : string;
  var DocID1,DocID2             : string;
  var ОтступСтр2                : string;
  var ОтступСтр3                : string;
  var QResult                   : Variant[];
  var УровеньПодчиненности_     : integer;
  var КатегорияОбъекта_         : integer;
  var ВсегоГазет_               : integer;
  var ВсегоНомеров_             : integer;
  var ВсегоРазовыйТираж_        : numeric;
  var ВсегоГодовойТираж_        : numeric;
  var val0,val1                 : record;
  CalcV1 = true;
  inherited ПостроитьОтчет(Sender);
  ОтступСтр2          = RepStr(" ",8);
  ОтступСтр3          = RepStr(" ",4);
    --Проверить настройки запроса
    if    ДатаН>01.01.1901      and
          ДатаК>01.01.1901      and
          ДатаН<=ДатаК          then
    -- Построение списка федеральных округов
      Q1                        = Query.Create([РКП_Справочники.СпрГеография]);
      Q1.Order                  = "Наим";
      Q1.Filter                 = if(Округ=nil,"Категория=1","Категория=1 and DocId="+Str(Округ.DocId));
      Q1.Select;
      Q1.First;
      for k1 =  1..Q1.Count      do     -- цикл по регионам РФ
         Hint('Создание списка...<'+Q1.Current.Наим+'>');
         z      = z+1;
         секцПозиции.InsertFrame(z);
         InsertInArray(Сепаратор,z,true);
         InsertInArray(КатегорияМеста,z,1);
         InsertInArray(СодержаниеСтроки,z,Q1.Current.Наим);
         InsertInArray(ЗаписьСтроки,z,Q1.Current);
         DocID1 = Str(Q1.Current.DocID);
         ФильтрПоступлений1 = "Match(МестоИздания.GroupPath,'*."+DocID1+".*') or Match(МестоИздания.GroupPath,'"+DocID1+".*') or МестоИздания.DocID = "+DocID1;
         ФильтрМест1        = "Match(GroupPath,'*."+DocID1+".*') or Match(GroupPath,'"+DocID1+".*') or DocID = "+DocID1;
         InsertInArray(ФильтрПоступлений,z,ФильтрПоступлений1);
             --Построение подсписка по ЧАЦН (1)
             --Построение списка неповторяющихся значений для #СодержаниеСтроки
             секцВспомСписок.Count = 0;
             ЦелевоеНазначение     = nil;
             ЗаписьЦН              = nil;
             КодСортировкиЦН       = nil;
             ФильтрПоступленийЦН   = nil;
             КолГазетЦН            = nil;
             КолНомеровЦН          = nil;
             РазовыйТиражЦН        = nil;
             ГодовойТиражЦН        = nil;
             t                     = 0;
             Q                  = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
             if Округ = nil then
               Q.Filter         = "ГодПоступления="+Str(Year(ДатаН))+" and НомеровПолучено>0 and "+ФильтрПоступлений1;
             else
               Q.Filter         = "ГодПоступления="+Str(Year(ДатаН))+" and ("+ФильтрМестаИздания+")"+" and НомеровПолучено>0 and "+ФильтрПоступлений1;
             end;
             Q.LoadingFields    = "ЧАЦН";
             Q.Order            = "ЧАЦН";
             Q.Select;
             Q.First;
             for k =  1..Q.Count        do
               val1       = Q.Current.ЧАЦН;
                 if val1  <>val0 or k=1 then
                  t      = t+1;
                  секцВспомСписок.InsertFrame(t);
                  InsertInArray(ЦелевоеНазначение,t,Q.Current.ЧАЦН.Наим);
                  InsertInArray(ЗаписьЦН,t,Q.Current.ЧАЦН);
                  InsertInArray(КодСортировкиЦН,t,Q.Current.ЧАЦН.Код);
                  InsertInArray(ФильтрПоступленийЦН,t,"("+ФильтрПоступлений1+") and ЧАЦН="+Str(Q.Current.ЧАЦН));
                 end;
               val0       = Q.Current.ЧАЦН;
               Q.Next;
             end;
             Q.Close;
             --Сортировка
             секцВспомСписок.SortBy("КодСортировкиЦН");
             --Внесение в список
             for t = 1..секцВспомСписок.Count do
               z                  = z+1;
               секцПозиции.InsertFrame(z);
               InsertInArray(СодержаниеСтроки,z,ОтступСтр2+ОтступСтр3+ЦелевоеНазначение[t]);
               InsertInArray(ФильтрПоступлений,z,ФильтрПоступленийЦН[t]);
             end;
             --Завершение построения подсписка по ЧАЦН (1)
    -- Построение списка ВНУТРИ федерального округа
           Q2                   = Query.Create([РКП_Справочники.СпрГеография]);
           Q2.Order             = "Наим";
           Q2.Filter            = "("+ФильтрМест1+") and (Категория>1 and Категория<8)";
           Q2.Select;
           Q2.First;
           for k2 =  1..Q2.Count      do     -- цикл по субъектам РФ внутри региона
             Hint('Создание списка...<'+Q1.Current.Наим+' - '+Q2.Current.Наим+'>');
             z                  = z+1;
             секцПозиции.InsertFrame(z);
             if ФильтрМестаИздания<>nil                 then
               if Округ.DocID=Q2.Current.DocID          then
                 InsertInArray(Сепаратор,z,true);
               end;
             end;
             InsertInArray(СодержаниеСтроки,z,ОтступСтр2+Q2.Current.Наим);
             InsertInArray(ЗаписьСтроки,z,Q2.Current);
             УровеньПодчиненности_      = РКП_СИС.Recs.RecordsLevel(Q2.Current);
             InsertInArray(УровеньПодчиненности,z,УровеньПодчиненности_);
             КатегорияОбъекта_          = Q2.Current.Категория;
             InsertInArray(КатегорияМеста,z,КатегорияОбъекта_);
             DocID2             = Str(Q2.Current.DocID);
             if    КатегорияОбъекта_=5                  or
                   КатегорияОбъекта_=6                  or
                   КатегорияОбъекта_=7                  then
                 ФильтрПоступлений2 = "(Match(МестоИздания.GroupPath,'*."+DocID2+".*') or МестоИздания.DocID = "+DocID2+")"+
                                      " and ((МестоИздания.Категория in [5,6,7])"+
                                      " or (МестоИздания.GroupDoc.Категория in [5,6,7])"+
                                      " or (МестоИздания.GroupDoc.GroupDoc.Категория in [5,6,7])"+
                                      " or (МестоИздания.GroupDoc.GroupDoc.GroupDoc.Категория in [5,6,7]))";
             else
                 ФильтрПоступлений3 = "";
                 Q3             = Query.Create([РКП_Справочники.СпрГеография]);
                 Q3.Filter      = "(Match(GroupPath,'*."+DocID2+".*') or DocID = "+DocID2+") and (Категория in [5,6,7])";
                 Q3.Select;
                   if    Q3.Count=1 then
                     ФильтрПоступлений3 = "not (Match(МестоИздания.GroupPath,'"+Q3.Current.GroupPath+Str(Q3.Current.DocID)+".*'))";
                   elsif Q3.Count>1 then
                     for k3 = 1..Q3.Count do
                       if k3 = 1 then
                         ФильтрПоступлений3 = "(not (Match(МестоИздания.GroupPath,'"+Q3.Current.GroupPath+Str(Q3.Current.DocID)+".*')))";
                       else
                         ФильтрПоступлений3 = ФильтрПоступлений3+" and  (not (Match(МестоИздания.GroupPath,'"+Q3.Current.GroupPath+Str(Q3.Current.DocID)+".*')))";
                       fi;
                       Q3.Next;
                     end;

                   end;
                 Q3.Close;
                 ФильтрПоступлений2 = "(Match(МестоИздания.GroupPath,'*."+DocID2+".*') or МестоИздания.DocID = "+DocID2+")"+
                                      " and ((МестоИздания.Категория in [0,1,2,3,4,8,9,10,11,12,13,14])"+
                                      " or (МестоИздания.GroupDoc.Категория in [0,1,2,3,4,8,9,10,11,12,13,14])"+
                                      " or (МестоИздания.GroupDoc.GroupDoc.Категория in [0,1,2,3,4,8,9,10,11,12,13,14])"+
                                      " or (МестоИздания.GroupDoc.GroupDoc.GroupDoc.Категория in [0,1,2,3,4,8,9,10,11,12,13,14]))";
                 if ФильтрПоступлений3 <> "" then
                 ФильтрПоступлений2 = "((Match(МестоИздания.GroupPath,'*."+DocID2+".*') or МестоИздания.DocID = "+DocID2+")"+" and "+ФильтрПоступлений3+")";
                 end;

             end;
             InsertInArray(ФильтрПоступлений,z,ФильтрПоступлений2);
             --Построение подсписка по ЧАЦН (2)
             --Построение списка неповторяющихся значений для #СодержаниеСтроки
             секцВспомСписок.Count = 0;
             ЦелевоеНазначение     = nil;
             ЗаписьЦН              = nil;
             КодСортировкиЦН       = nil;
             ФильтрПоступленийЦН   = nil;
             КолГазетЦН            = nil;
             КолНомеровЦН          = nil;
             РазовыйТиражЦН        = nil;
             ГодовойТиражЦН        = nil;
             t                     = 0;
             Q                  = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
             if Округ = nil then
               Q.Filter         = "ГодПоступления="+Str(Year(ДатаН))+" and НомеровПолучено>0 and "+ФильтрПоступлений2;
             else
               Q.Filter         = "ГодПоступления="+Str(Year(ДатаН))+" and ("+ФильтрМестаИздания+")"+" and НомеровПолучено>0 and "+ФильтрПоступлений2;
             end;
             Q.LoadingFields    = "ЧАЦН";
             Q.Order            = "ЧАЦН";
             Q.Select;
             Q.First;
             for k =  1..Q.Count        do
               val1       = Q.Current.ЧАЦН;
                 if val1  <>val0 or k=1 then
                  t      = t+1;
                  секцВспомСписок.InsertFrame(t);
                  InsertInArray(ЦелевоеНазначение,t,Q.Current.ЧАЦН.Наим);
                  InsertInArray(ЗаписьЦН,t,Q.Current.ЧАЦН);
                  InsertInArray(КодСортировкиЦН,t,Q.Current.ЧАЦН.Код);
                  InsertInArray(ФильтрПоступленийЦН,t,"("+Q.Filter+") and ЧАЦН="+Str(Q.Current.ЧАЦН));
                 end;
               val0       = Q.Current.ЧАЦН;
               Q.Next;
             end;
             Q.Close;
             --Сортировка
             секцВспомСписок.SortBy("КодСортировкиЦН");
             --Внесение в список
             for t = 1..секцВспомСписок.Count do
               z                  = z+1;
               секцПозиции.InsertFrame(z);
               InsertInArray(СодержаниеСтроки,z,ОтступСтр2+ОтступСтр3+ЦелевоеНазначение[t]);
               InsertInArray(ФильтрПоступлений,z,ФильтрПоступленийЦН[t]);
             end;
             --Завершение построения подсписка по ЧАЦН (2)
             Q2.Next;
           end;
         Q2.Close;
    -- Завершение построения списка ВНУТРИ федерального округа
         Q1.Next;
      end;                              -- цикл по регионам РФ
      Q1.Close;
    --Добавление строки без места
      Q2                   = Query.Create([РКП_Справочники.СпрГеография]);
      Q2.Order             = "Наим";
      Q2.Filter            = "(Категория=0)";
      Q2.Select;
      Q2.First;
      for k2 =  1..Q2.Count      do     --
        z                  = z+1;
        секцПозиции.InsertFrame(z);
        InsertInArray(СодержаниеСтроки,z,Q2.Current.Наим);
        InsertInArray(ЗаписьСтроки,z,Q2.Current);
        УровеньПодчиненности_      = РКП_СИС.Recs.RecordsLevel(Q2.Current);
        InsertInArray(УровеньПодчиненности,z,УровеньПодчиненности_);
        КатегорияОбъекта_          = Q2.Current.Категория;
        InsertInArray(КатегорияМеста,z,КатегорияОбъекта_);
        DocID2             = Str(Q2.Current.DocID);
        ФильтрПоступлений2 = "(МестоИздания=nil or МестоИздания.DocID = "+DocID2+")";
        InsertInArray(ФильтрПоступлений,z,ФильтрПоступлений2);
             --Построение подсписка по ЧАЦН (3)
             --Построение списка неповторяющихся значений для #СодержаниеСтроки
             секцВспомСписок.Count = 0;
             ЦелевоеНазначение     = nil;
             ЗаписьЦН              = nil;
             КодСортировкиЦН       = nil;
             ФильтрПоступленийЦН   = nil;
             КолГазетЦН            = nil;
             КолНомеровЦН          = nil;
             РазовыйТиражЦН        = nil;
             ГодовойТиражЦН        = nil;
             t                     = 0;
             Q                  = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
             if Округ = nil then
               Q.Filter         = "ГодПоступления="+Str(Year(ДатаН))+" and НомеровПолучено>0 and "+ФильтрПоступлений2;
             else
               Q.Filter         = "ГодПоступления="+Str(Year(ДатаН))+" and ("+ФильтрМестаИздания+")"+" and НомеровПолучено>0 and "+ФильтрПоступлений2;
             end;
             Q.LoadingFields    = "ЧАЦН";
             Q.Order            = "ЧАЦН";
             Q.Select;
             Q.First;
             for k =  1..Q.Count        do
               val1       = Q.Current.ЧАЦН;
                 if val1  <>val0 or k=1 then
                  t      = t+1;
                  секцВспомСписок.InsertFrame(t);
                  InsertInArray(ЦелевоеНазначение,t,Q.Current.ЧАЦН.Наим);
                  InsertInArray(ЗаписьЦН,t,Q.Current.ЧАЦН);
                  InsertInArray(КодСортировкиЦН,t,Q.Current.ЧАЦН.Код);
                  InsertInArray(ФильтрПоступленийЦН,t,"("+Q.Filter+") and ЧАЦН="+Str(Q.Current.ЧАЦН));
                 end;
               val0       = Q.Current.ЧАЦН;
               Q.Next;
             end;
             Q.Close;
             --Сортировка
             секцВспомСписок.SortBy("КодСортировкиЦН");
             --Внесение в список
             for t = 1..секцВспомСписок.Count do
               z                  = z+1;
               секцПозиции.InsertFrame(z);
               InsertInArray(СодержаниеСтроки,z,ОтступСтр2+ОтступСтр3+ЦелевоеНазначение[t]);
               InsertInArray(ФильтрПоступлений,z,ФильтрПоступленийЦН[t]);
             end;
             --Завершение построения подсписка по ЧАЦН (3)
        Q2.Next;
      end;
      Q2.Close;
    --Расчет позиций
    for k = 1..секцПозиции.Count        do
      Hint("Расчет строки <"+СодержаниеСтроки[k]+">",k,секцПозиции.Count);
      if Сепаратор[k]=false     then
      if  ФильтрПоступлений[k] <> nil   then
      if        ЗаДату4 = true          then
      --========== расчет за год ==========--
      QResult                   = nil;
      Q                         = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
      if Округ = nil            then
        Q.Filter                = "ГодПоступления="+Str(Year(ДатаН))+
                                  " and ("+ФильтрПоступлений[k]+")"+
                                  " and НомеровПолучено>0";
      else
        Q.Filter                = "ГодПоступления="+Str(Year(ДатаН))+
                                  " and ("+ФильтрПоступлений[k]+")"+
                                  " and ("+ФильтрМестаИздания+")"+
                                  " and НомеровПолучено>0";
      end;
      Q.LoadingFields           = "ГодовойТираж;НомеровПолучено;СреднийРазовыйТираж";
      Q.Select;
      QResult                   = Q.CalcAggregates("Count,Sum(НомеровПолучено),Sum(СреднийРазовыйТираж),Sum(ГодовойТираж)") as Variant[];
      КолГазет[k]               = QResult[1];
      КолНомеров[k]             = QResult[2];
      РазовыйТираж[k]           = QResult[3];
      ГодовойТираж[k]           = QResult[4];
      Q.Close;
      else
      --========== расчет за произвольный период ==========--
      Q                         = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
      if Округ = nil            then
      Q.Filter                  = "ГодПоступления="+Str(Year(ДатаН))+
                                  " and ("+ФильтрПоступлений[k]+")"+
                                  " and НомеровПолучено>0";
      else
      Q.Filter                  = "ГодПоступления="+Str(Year(ДатаН))+
                                  " and ("+ФильтрПоступлений[k]+")"+
                                  " and ("+ФильтрМестаИздания+")"+
                                  " and НомеровПолучено>0";
      end;
      Q.LoadingFields           = "Газета";
      Q.Select;
      Q.First;
        for j = 1..Q.Count      do
          Q1                    =  Query.Create([РКП_Газеты.НомерГазеты]);
          Q1.Filter             = "Газета="+Str(Q.Current.Газета)+
                                  " and ДатаПринятияНаХранение>="+Str(ДатаН,"dd.mm.yyyy")+
                                  " and ДатаПринятияНаХранение<"+Str(ДатаК+1,"dd.mm.yyyy")+
                                  " and isGroup=0";
          Q1.Select;
          QResult               = Q1.CalcAggregates("Count,Sum(Тираж)") as Variant[];
           if  QResult[1]>0    then
              КолГазет[k]       = КолГазет[k]     + 1;
              КолНомеров[k]     = КолНомеров[k]   + QResult[1];
              РазовыйТираж[k]   = РазовыйТираж[k] + (QResult[2]/1000)/QResult[1];
              ГодовойТираж[k]   = ГодовойТираж[k] + QResult[2]/1000;
            end;
          Q.Next;
        end;
      end;
      end;
      end;
    end;

    --Вычисление итогов
    ВсегоГазет_             = nil;
    ВсегоНомеров_           = nil;
    ВсегоРазовыйТираж_      = nil;
    ВсегоГодовойТираж_      = nil;
    kk = секцПозиции.Count;
    for k = 1..kk                                       do
      j=kk+1-k;
      --вычисление промежуточного и общего итогов
      if    (Сепаратор[j]=false or КатегорияМеста[j]=0) and ЗаписьСтроки[j]<>nil  then
      --накопление промежуточных значений
        ВсегоГазет_             = ВсегоГазет_           + КолГазет[j]     ;
        ВсегоНомеров_           = ВсегоНомеров_         + КолНомеров[j]   ;
        ВсегоРазовыйТираж_      = ВсегоРазовыйТираж_    + РазовыйТираж[j] ;
        ВсегоГодовойТираж_      = ВсегоГодовойТираж_    + ГодовойТираж[j] ;
      --накопление итоговых значений
        ВсегоГазет              = ВсегоГазет            + КолГазет[j]     ;
        ВсегоНомеров            = ВсегоНомеров          + КолНомеров[j]   ;
        ВсегоРазовыйТираж       = ВсегоРазовыйТираж     + РазовыйТираж[j] ;
        ВсегоГодовойТираж       = ВсегоГодовойТираж     + ГодовойТираж[j] ;
      end;
      --присвоение промежуточных итогов
      if Сепаратор[j]=true                              then
        КолГазет[j]             = ВсегоГазет_           ;
        КолНомеров[j]           = ВсегоНомеров_         ;
        РазовыйТираж[j]         = ВсегоРазовыйТираж_    ;
        ГодовойТираж[j]         = ВсегоГодовойТираж_    ;
      end;
      --очистка промежуточных итогов, если следующая строка - не последняя и не сепаратор, 
      --а текущая - сепаратор или без места
      if  j>1                                           then --следующая строка - не последняя
        if Сепаратор[j-1]=false                         then --следующая строка - не сепаратор
          if (Сепаратор[j]=true or КатегорияМеста[j]=0) and ЗаписьСтроки[j]<>nil   then
            ВсегоГазет_         = nil;
            ВсегоНомеров_       = nil;
            ВсегоРазовыйТираж_  = nil;
            ВсегоГодовойТираж_  = nil;
          end;
        end;
      end;
      --снятие признака сепаратора для предотвращения удаления строки
      if  Сепаратор[j]=true                             then
        Сепаратор[j]            = false;
      end;
    end;
    --Удаление строк, не содержащих значений
    УдалитьПустыеСтроки;
    else
      Message("Не заданы или неправильно заданы условия поcтроения отчета!");
    end;
    CalcV1 = false;
  end;



end