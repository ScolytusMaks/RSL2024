class inherited РКП_Газеты.УчетГазет.Отчеты.блОтчетСтатРГБазовый1 "Сводный отчет по вводу данных", editor ПротоколВводаРГ;

import РКП_СИС Classes StringsFunctions, Recs, StdCode, Functions, FilterMaker, Def;
Import РКП_Газеты  Classes Стат;

inobject private

--{{ 2_Свойства
  var секцНомера      :TemplateSection;
  var секцГазеты      :TemplateSection;
  var секцПоступления :TemplateSection;
  var секцОператоры   :TemplateSection;
  var Оператор_       :String[];

--}}


-- 2_Конструкторы, визуализаторы0. --

inclass public

inobject private

-- 2_Обработчики событий шаблона0. --
  proc шаблон_ПриСчитывании;
    var Q :Query;
    ДатаН   = ДатаНачалаПериода;
    ДатаК   = ДатаКонцаПериода;
    ЗаДату1 = false;
    ЗаДату2 = false;
    ЗаДату3 = false;
    ЗаДату4 = false;
    ЗаДату5 = false;
    секцСПО.Row[1].Visible = false;
    секцСПО.Row[2].Visible = false;
    секцВарианты.CellByField['ЗаДату1'].Font.Bold = false;
    секцВарианты.CellByField['ЗаДату2'].Font.Bold = false;
    секцВарианты.CellByField['ЗаДату3'].Font.Bold = false;
    секцВарианты.CellByField['ЗаДату4'].Font.Bold = false;
    секцВарианты.CellByField['ЗаДату5'].Font.Bold = false;
    if     СтандартныйПериод    = 0     then
      ЗаДату1                   = true;
      секцВарианты.CellByField['ЗаДату1'].Font.Bold = true;
    elsif  СтандартныйПериод    = 1     then
      ЗаДату2                   = true;
      секцВарианты.CellByField['ЗаДату2'].Font.Bold = true;
    elsif  СтандартныйПериод    = 2     then
      ЗаДату3                   = true;
      секцВарианты.CellByField['ЗаДату3'].Font.Bold = true;
    elsif  СтандартныйПериод    = 3     then
      ЗаДату4                   = true;
      секцВарианты.CellByField['ЗаДату4'].Font.Bold = true;
    elsif  СтандартныйПериод    = 4     then
      ЗаДату5                   = true;
      секцВарианты.CellByField['ЗаДату5'].Font.Bold = true;
      секцСПО.Row[1].Visible    = true;
      секцСПО.Row[2].Visible    = true;
    end;
    if Record.State = Record.Created    then
      ГодПротокола      = Year(today);
      Q                         = Query.Create([РКП_Газеты.ПротоколВводаРГ]);
      Q.Filter                  = "ГодПротокола="+Str(Year(today))+" and DocID<>"+Str(Record.DocID);
      Q.LoadingFields           = "НомерПротокола";
      Q.Order                   = "НомерПротокола";
      Q.Select;
        if Q.Count > 0          then
          Q.Last;
          НомерПротокола        = Q.Current.НомерПротокола+1;
        else
          НомерПротокола        = 1;
        end;
      Q.Close;
    end;
  end;



-- 2_Обработчики событий клеток шаблона0. --

  func СменаВариантаПериода(Cell :TemplateCell; Action :Template.ClickTypes):Logical;
    if ИзмененияЗапрещены       = false         then
      Result = inherited СменаВариантаПериода(Cell, Action);
      ДатаНачалаПериода         = ДатаН;
      ДатаКонцаПериода          = ДатаК;
      СтандартныйПериод         = ЗаДату;
      Result = True; -- Разрешаем стандартную обработку
    else
      Message('Запись защищена от изменений!');
    end;
  end;


  proc ПолеВвода_ПриВыходе(Cell :TemplateCell; Index :Integer);
    if ИзмененияЗапрещены             = false then
      inherited ПолеВвода_ПриВыходе(Cell, Index);
      ДатаНачалаПериода         = ДатаН;
      ДатаКонцаПериода          = ДатаК;
      СтандартныйПериод         = ЗаДату;
    else
      Message('Запись защищена от изменений!');
    end;
  end;

-- 2_Обработчики событий прочих объектов шаблона0. --

  proc КнОК_ПриНажатии(Sender :Button);
    if BlankOption[AutoPostOrCancel]    = True  then
      if ИзмененияЗапрещены             = false then
        EditorPost;
      end;
    end;
    Close(cmOK);
  end;

-- 2_Дополнительные команды0. --


-- 2_Вспомогательные методы0. --

  var КомпетенцииВОтчете :tCompetence[] := [кмпОППИзав, кмпОППИсотр, кмпГЛГСзав, кмпГЛГСсотр];

  proc ПостроитьОтчет2(Sender :Button);
    --var Q :Query;
    --var k, z, zz, ValB, ValC, j, jj :Integer;
    var ValB, ValC, j, jj :Integer;
    var aUser :Kernel.Settings.User[];
    var cUser :Kernel.Settings.User;
    var cRole :Kernel.Settings.Role;
    var локКомпетенции :РКП_СИС.Def.tCompetence[];
    секцОператоры.Count = nil;
    if (not ИзмененияЗапрещены) then -- проверка защищенности
      if (ДатаН <> nil) and (ДатаК <> nil) and (ДатаН <= ДатаК) then -- проверка корректности условий
        --очистка предыдущих результатов
        Record.Газеты.Clear;      ВсегоВведеноГазет       = nil; ВсегоРедактированоГазет       = nil;
        Record.Номера.Clear;      ВсегоВведеноНомеров     = nil; ВсегоРедактированоНомеров     = nil;
        Record.Поступления.Clear; ВсегоВведеноПоступлений = nil; ВсегоРедактированоПоступлений = nil;
        Оператор_ = nil;
        -- Построить список пользователей с компетенциями, включаемыми в отчет
        with Query.Create([Kernel.Settings.User]) do
          Filter = 'isGroup=0';
          Select;
          while not Eof do
            cUser = Current as Kernel.Settings.User;
            jj = cUser.Roles.Count;
            for j = 1 .. jj do
              cRole = cUser.Roles.ItemsByNumber[j] as Kernel.Settings.Role;
              with МашинаРеквизитов.УправлениеДоступом.интПраваПользователя.OpenRecord(cRole) do
                локКомпетенции = ПолучитьКомпетенции;
              end;
              if (GetArrayIntersection(локКомпетенции, КомпетенцииВОтчете) <> nil) then
                AddInArray(aUser, cUser);
                Break;
              fi;
            od;
            Next;
          od;
        end;
        -- Сбор статистики по газетам
        jj = LengthOfArray(aUser);
        for j = 1 .. jj do
          ValB = ПринятоГазетЗаПериод(aUser[j].Name, ДатаН, ДатаК);
          ValC = РедактированоГазетЗаПериод(aUser[j].Name, ДатаН, ДатаК);
          if (ValB > 0) or (ValC > 0) then
            with Record.Газеты.AddEx do
              Введено       = ValB;
              Редактировано = ValC;
              ОператорИмя   = aUser[j].Name;
              Оператор      = if( (aUser[j].FullName <> nil), aUser[j].FullName, aUser[j].FullName + ' (?)' );
            end;
          fi;
        od;
        ВсегоВведеноГазет       = Int(Record.Газеты.SumOfField('Введено'));
        ВсегоРедактированоГазет = Int(Record.Газеты.SumOfField('Редактировано'));
        -- Сбор статистики по номерам
        for j = 1 .. jj do
          ValB = ПринятоНомеровЗаПериод(aUser[j].Name, ДатаН, ДатаК);
          ValC = РедактированоНомеровЗаПериод(aUser[j].Name, ДатаН, ДатаК);
          if (ValB > 0) or (ValC > 0) then
            with Record.Номера.AddEx do
              Введено       = ValB;
              Редактировано = ValC;
              ОператорИмя   = aUser[j].Name;
              Оператор      = if( (aUser[j].FullName <> nil), aUser[j].FullName, aUser[j].FullName + ' (?)' );
            end;
          fi;
        od;
        ВсегоВведеноНомеров       = Int(Record.Номера.SumOfField('Введено'));
        ВсегоРедактированоНомеров = Int(Record.Номера.SumOfField('Редактировано'));
        -- Сбор статистики по поступлениям
        for j = 1 .. jj do
          ValB = ПринятоЕдХраненияЗаПериод(aUser[j].Name, ДатаН, ДатаК);
          ValC = РедактированоЕдХраненияЗаПериод(aUser[j].Name, ДатаН, ДатаК);
          if (ValB > 0) or (ValC > 0) then
            with Record.Поступления.AddEx do
              Введено       = ValB;
              Редактировано = ValC;
              ОператорИмя   = aUser[j].Name;
              Оператор      = if( (aUser[j].FullName <> nil), aUser[j].FullName, aUser[j].FullName + ' (?)' );
            end;
          fi;
        od;
        ВсегоВведеноПоступлений       = Int(Record.Поступления.SumOfField('Введено'));
        ВсегоРедактированоПоступлений = Int(Record.Поступления.SumOfField('Редактировано'));
        EditorPost;
        секцГазеты.SortBy('Оператор');
        секцНомера.SortBy('Оператор');
        секцПоступления.SortBy('Оператор');
        EditorPost;
      else
        Message('Пожалуйста, проверьте правильность периода отбора!');
      fi; -- проверка корректности условий
    else
      Message('Отчет защищен от изменений!');
    fi; -- проверка защищенности
  end;



end