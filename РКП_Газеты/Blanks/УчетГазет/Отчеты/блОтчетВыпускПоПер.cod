class inherited РКП_Газеты.УчетГазет.Отчеты.блОтчетСтатРГБазовый2 "Выпуск газет по периодичности территории распространения";

inobject private

--{{ 2_Свойства
--}}

inobject private

-- 2_Обработчики событий шаблона0. --

-- 2_Обработчики событий клеток шаблона0. --

  func ПолеСодержаниеСтрокиПриНажатии(Cell :TemplateCell;Action :Template.ClickTypes) :Logical;
    var aRequestData :Variant[];
    with РКП_Газеты.УчетГазет.Отчеты.блОтчетУточнение1 do
      aRequestData[дзОписание]           = 'по территории распространения/периодичности "' + СодержаниеСтроки[Cell.Frame] + '"';
      aRequestData[дзФильтрУточнения]    = ФильтрПоступлений[Cell.Frame];
      aRequestData[дзДатаН]              = ДатаН;
      aRequestData[дзДатаК]              = ДатаК;
      aRequestData[дзЗаГод]              = ЗаГод;
      aRequestData[дзПериодЗапроса]      = ПериодЗапроса;
      aRequestData[дзОкруг]              = Округ;
      aRequestData[дзФильтрМестаИздания] = ФильтрМестаИздания;
      aRequestData[дзПравилоРасчетаСтатистики] = ПравилоРасчетаСтатистики;
      ShowPopupForm(aRequestData);
    end;
  end;

-- 2_Обработчики событий прочих объектов шаблона0. --

-- 2_Вспомогательные методы0. --

  proc 2_ПостроениеОтчета0.;
    inherited ПостроениеОтчета;
    if ПериодОтчетаКорректный then
      ПостроениеОтчета_СозданиеПозиций;
      ПостроениеОтчета_РасчетПозиций;
      ПостроениеОтчета_РасчетИтогов;
    fi;
  end;

  proc ПостроениеОтчета_СозданиеПозиций;
    var z, k, kk :Integer;
    -- Построение списка А --
    z = ДобавитьСтрокиПериодичности(0, 0 ,8, nil);
    -- Построение списка Б --
    with Query.Create([РКП_Справочники.СпрТерриторияРаспространения]) do
      Order = 'Номер';
      Select;
      kk = Count;
      for k = 1 .. kk do
        z = z + 1;
        секцПозиции.InsertFrame(z);
        InsertInArray(Сепаратор, z, true);
        InsertInArray(СодержаниеСтроки, z, Current.Наим);
        InsertInArray(ЗаписьСтроки, z, Current);
        InsertInArray(ФильтрПоступлений, z, 'ТерриторияРаспространения=' + Current.DocIdStr);
        z = ДобавитьСтрокиПериодичности(z, 8, 12, Current);
        Next;
      od;
    end;
    -- удаление замыкающего сепаратора --
    DeleteFromArray(ЗаписьСтроки      , z);
    DeleteFromArray(СодержаниеСтроки  , z);
    DeleteFromArray(КолГазет          , z);
    DeleteFromArray(КолНомеров        , z);
    DeleteFromArray(РазовыйТираж      , z);
    DeleteFromArray(ГодовойТираж      , z);
    DeleteFromArray(Сепаратор         , z);
    DeleteFromArray(ФильтрПоступлений , z);
    секцПозиции.Count = (z - 1);
    -- Дополнение фильтра --
    kk = секцПозиции.Count;
    for k = 1 .. kk do
      if (ЗаписьСтроки[k] <> nil) and (Pos("Период", ФильтрПоступлений[k]) > 0) then
        ФильтрПоступлений[k] = "(" + ФильтрПоступлений[k] + ") and ТерриторияРаспространения=" + Str(ЗаписьСтроки[k]);
      fi;
    od;
  end;

  proc ПостроениеОтчета_РасчетПозиций;
    var k, kk :Integer;
    var aHint :Variant[];
    kk = секцПозиции.Count;
    for k = 1 .. kk do
      Hint('Расчет строки : ' + СодержаниеСтроки[k] ,k, kk);
      aHint[1]  = 'Расчет строки : ' + СодержаниеСтроки[k];
      aHint[2]  = k;
      aHint[3]  = kk;
      РасчетПозиции(k, aHint);
    od;
    Hint(' ');
  end;

  func ДанныеСтрокиКорректны (vLine :Integer) :Logical;
    Return  (ФильтрПоступлений[vLine] <> nil);
  end;

  proc ПостроениеОтчета_РасчетИтогов;
    var k, kk, z :Integer;
    kk = секцПозиции.Count;
    for k = 1 .. kk do
      if (k in [1, 4, 11, 17, 30]) then
        ВсегоГазет        = ВсегоГазет        + КолГазет[k];
        ВсегоНомеров      = ВсегоНомеров      + КолНомеров[k];
        ВсегоРазовыйТираж = ВсегоРазовыйТираж + РазовыйТираж[k];
        ВсегоГодовойТираж = ВсегоГодовойТираж + ГодовойТираж[k];
      fi;
    od;
    -- Удаление строк, не содержащих значений --
    УдалитьПустыеСтроки;
    -- Предпоследний штрих: удаление значений из сторок-заголовков (кр. неопределенной периодичности) --
    kk = секцПозиции.Count;
    for k = 1..секцПозиции.Count do
      if Pos('1', Up(СодержаниеСтроки[k])) = 0 and
         Pos('2', Up(СодержаниеСтроки[k])) = 0 and
         Pos('3', Up(СодержаниеСтроки[k])) = 0 and
         Pos('4', Up(СодержаниеСтроки[k])) = 0 and
         Pos('5', Up(СодержаниеСтроки[k])) = 0 and
         Pos('6', Up(СодержаниеСтроки[k])) = 0 and
         Pos('7', Up(СодержаниеСтроки[k])) = 0 and
         Pos('8', Up(СодержаниеСтроки[k])) = 0 and
         Pos('9', Up(СодержаниеСтроки[k])) = 0 and
         Pos('0', Up(СодержаниеСтроки[k])) = 0 and
         Pos('НЕОПРЕДЕЛЕННАЯ', Up(СодержаниеСтроки[k])) = 0 then
         КолГазет[k] = 0;
        КолНомеров[k] = 0;
        РазовыйТираж[k] = 0;
        ГодовойТираж[k] = 0;
      fi;
    od;
    -- Последний штрих: удаление строк-сепараторов пустых разделов --
    kk = секцПозиции.Count;
    for k = 2 .. kk do
      z = kk + 1 - k;
      if (Pos('В течение', Up(СодержаниеСтроки[z])) > 0) and
         (Pos('В течение', Up(СодержаниеСтроки[z + 1])) > 0)   then
        DeleteFromArray(ЗаписьСтроки         ,z);
        DeleteFromArray(СодержаниеСтроки     ,z);
        DeleteFromArray(КолГазет             ,z);
        DeleteFromArray(КолНомеров           ,z);
        DeleteFromArray(РазовыйТираж         ,z);
        DeleteFromArray(ГодовойТираж         ,z);
        DeleteFromArray(Сепаратор            ,z);
        DeleteFromArray(ФильтрПоступлений    ,z);
        DeleteFromArray(УровеньПодчиненности ,z);
        DeleteFromArray(КатегорияМеста       ,z);
      fi;
    od;
  end;

  func ДобавитьСтрокиПериодичности ( НачалоОтсчета, Отступ1, Отступ2 :Integer; ЗаписьТР :РКП_Справочники.СпрТерриторияРаспространения) :Integer;
  var z :Integer;
  var ОтступСтр1, ОтступСтр2: String;
    z = НачалоОтсчета;
    ОтступСтр1 = RepStr(" ", Отступ1);
    ОтступСтр2 = RepStr(" ", Отступ2);
    --- 2_Д Н Е В Н Ы Е0. ---
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(Сепаратор, z, true);
    InsertInArray(СодержаниеСтроки, z,ОтступСтр1 + 'В течение дня');
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="Ежедн." or Периодичность="2 раза в день"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "2 раза");
    InsertInArray(ФильтрПоступлений, z ,'Периодичность="2 раза в день"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 +"1 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="Ежедн."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    --- 2_Н Е Д Е Л Ь Н Ы Е0. ---
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(Сепаратор, z, true);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр1 + 'В течение недели');
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="6 раз в неделю" ' +
                                     'or Периодичность="5 раз в неделю"'  +
                                     'or Периодичность="4 раза в неделю"' +
                                     'or Периодичность="3 раза в неделю"' +
                                     'or Периодичность="2 раза в неделю"' +
                                     'or Периодичность="Еженед."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "6 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="6 раз в неделю"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "5 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="5 раз в неделю"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "4 раза");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="4 раза в неделю"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "3 раза");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="3 раза в неделю"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "2 раза");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="2 раза в неделю"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "1 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="Еженед."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    --- 2_М Е С Я Ч Н Ы Е0. ---
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(Сепаратор, z, true);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр1 + 'В течение месяца');
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="7 раз в мес." ' +
                                     'or Периодичность="6 раз в мес."'  +
                                     'or Периодичность="5 раз в мес."'  +
                                     'or Периодичность="3 раза в мес."' +
                                     'or Периодичность="2 раза в мес."');--+
                                   --'or Периодичность="Ежемес."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "7 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="7 раз в мес."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "6 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="6 раз в мес."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "5 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="5 раз в мес."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "3 раза");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="3 раза в мес."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "2 раза");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="2 раза в мес."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    --z = z + 1;
    --  секцПозиции.InsertFrame(z);
    --    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "1 раз");
    --    InsertInArray(ФильтрПоступлений, z, 'Периодичность="Ежемес."');
    --    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    --- 2_Г О Д О В Ы Е0. ---
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(Сепаратор, z, true);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр1 + 'В течение года');
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="11 раз в год" ' +
                                     'or Периодичность="10 раз в год" ' +
                                     'or Периодичность="9 раз в год" '  +
                                     'or Периодичность="8 раз в год" '  +
                                     'or Периодичность="7 раз в год" '  +
                                     'or Периодичность="Двухмес." '     +
                                     'or Периодичность="Ежемес." '      +
                                     'or Периодичность="5 раз в год" '  +
                                     'or Периодичность="Ежекв." '       +
                                     'or Периодичность="3 раза в год" ' +
                                     'or Периодичность="2 раза в год" ' +
                                     'or Периодичность="12 раз в год" ' +
                                     'or Периодичность="Ежегодн."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "12 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="Ежемес." or Периодичность="12 раз в год"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "11 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="11 раз в год"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "10 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="10 раз в год"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "9 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="9 раз в год"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "8 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="8 раз в год"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "7 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="7 раз в год"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "6 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="Двухмес."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "5 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="5 раз в год"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "4 раза");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="Ежекв."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "3 раза");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="3 раза в год"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "2 раза");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="2 раза в год"');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр2 + "1 раз");
    InsertInArray(ФильтрПоступлений, z, 'Периодичность="Ежегодн."');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    --- 2_Н Е О П Р Е Д Е Л Е Н Н О0. ---
    z = z + 1;
    секцПозиции.InsertFrame(z);
    --InsertInArray(Сепаратор, z, true);
    InsertInArray(СодержаниеСтроки, z, ОтступСтр1 + 'Неопределенная периодичность');
    InsertInArray(ФильтрПоступлений, z, 'КоличествоВПериоде<1 or КатегорияПериодичности<1');
    InsertInArray(ЗаписьСтроки, z, ЗаписьТР);
    -- 2_пустая строка0. --
    z = z + 1;
    секцПозиции.InsertFrame(z);
    InsertInArray(Сепаратор, z, true);
    InsertInArray(СодержаниеСтроки, z, ' ');
    Return z;
  end;



 --= OLD =--

--  proc ПостроитьОтчет (Sender :Button);
--  var QResult   :Variant[];
--  var z,k,j     : integer;
--  var kk        : integer;
--  var Q,Q1      : query;
--  inherited ПостроитьОтчет(Sender);
--    --Проверить настройки запроса
--    if    ДатаН>01.01.1901      and
--          ДатаК>01.01.1901      and
--          ДатаН<=ДатаК          then
--      --Построение списка А
--      z = ДобавитьСтрокиПериодичности(0,0,8,nil);
--      --Построение списка Б
--      Q                         = Query.Create([РКП_Справочники.СпрТерриторияРаспространения]);
--      Q.Order                   = "КодСортировки";
--      Q.Select;
--      Q.First;
--      for k =  1..Q.Count        do
--         z      = z+1;
--         секцПозиции.InsertFrame(z);
--         InsertInArray(Сепаратор,z,true);
--         InsertInArray(СодержаниеСтроки,z,Q.Current.Наим);
--         InsertInArray(ЗаписьСтроки,z,Q.Current);
--         InsertInArray(ФильтрПоступлений,z,'ТерриторияРаспространения='+Str(Q.Current));
--         z = ДобавитьСтрокиПериодичности(z,8,12,Q.Current);
--         Q.Next;
--      end;
--      Q.Close;
--      --удаление замыкающего сепаратора
--         DeleteFromArray(ЗаписьСтроки,          z);
--         DeleteFromArray(СодержаниеСтроки,      z);
--         DeleteFromArray(КолГазет,              z);
--         DeleteFromArray(КолНомеров,            z);
--         DeleteFromArray(РазовыйТираж,          z);
--         DeleteFromArray(ГодовойТираж,          z);

--         DeleteFromArray(Сепаратор,             z);
--         DeleteFromArray(ФильтрПоступлений,     z);
--         секцПозиции.Count           = z-1;
--    --Дополнение фильтра
--    for k = 1..секцПозиции.Count        do
--      if ЗаписьСтроки[k] <> nil and Pos("Период",ФильтрПоступлений[k]) > 0  then
--        ФильтрПоступлений[k] = "("+ ФильтрПоступлений[k]+") and ТерриторияРаспространения="+Str(ЗаписьСтроки[k]);
--      end;
--    end;
--    --Расчет значений для найденных строк
--    for k = 1..секцПозиции.Count        do
--      Hint("Расчет строки <"+СодержаниеСтроки[k]+">",k,секцПозиции.Count);
--      if  ФильтрПоступлений[k] <> nil   then
--      if        ЗаДату4 = true          then
--      --========== расчет за год ==========--
--      QResult                   = nil;
--      Q                         = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
--      if Округ = nil            then
--        Q.Filter                = "ГодПоступления="+Str(Year(ДатаН))+
--                                  " and ("+ФильтрПоступлений[k]+")"+
--                                  " and НомеровПолучено>0";
--      else
--        Q.Filter                = "ГодПоступления="+Str(Year(ДатаН))+
--                                  " and ("+ФильтрПоступлений[k]+")"+
--                                  " and ("+ФильтрМестаИздания+")"+
--                                  " and НомеровПолучено>0";
--      end;
--      Q.LoadingFields           = "ГодовойТираж;НомеровПолучено;СреднийРазовыйТираж";
--      Q.Select;
--      QResult                   = Q.CalcAggregates("Count,Sum(НомеровПолучено),Sum(СреднийРазовыйТираж),Sum(ГодовойТираж)") as Variant[];
--      КолГазет[k]               = QResult[1];
--      КолНомеров[k]             = QResult[2];
--      РазовыйТираж[k]           = QResult[3];
--      ГодовойТираж[k]           = QResult[4];
--      Q.Close;
--      else
--      --========== расчет за произвольный период ==========--
--      Q                         = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
--      if Округ = nil            then
--      Q.Filter                  = "ГодПоступления="+Str(Year(ДатаН))+
--                                  " and ("+ФильтрПоступлений[k]+")"+
--                                  " and НомеровПолучено>0";
--      else
--      Q.Filter                  = "ГодПоступления="+Str(Year(ДатаН))+
--                                  " and ("+ФильтрПоступлений[k]+")"+
--                                  " and ("+ФильтрМестаИздания+")"+
--                                  " and НомеровПолучено>0";
--      end;
--      Q.LoadingFields           = "Газета";
--      Q.Select;
--      Q.First;
--        for j = 1..Q.Count      do
--          Q1                    =  Query.Create([РКП_Газеты.НомерГазеты]);
--          Q1.Filter             = "Газета="+Str(Q.Current.Газета)+
--                                  " and ДатаПринятияНаХранение>="+Str(ДатаН,"dd.mm.yyyy")+
--                                  " and ДатаПринятияНаХранение<"+Str(ДатаК+1,"dd.mm.yyyy")+
--                                  " and isGroup=0";
--          Q1.Select;
--          QResult               = Q1.CalcAggregates("Count,Sum(Тираж)") as Variant[];
--           if  QResult[1]>0    then
--              КолГазет[k]       = КолГазет[k]     + 1;
--              КолНомеров[k]     = КолНомеров[k]   + QResult[1];
--              РазовыйТираж[k]   = РазовыйТираж[k] + (QResult[2]/1000)/QResult[1];
--              ГодовойТираж[k]   = ГодовойТираж[k] + QResult[2]/1000;
--            end;
--          Q.Next;
--        end;
--      end;
--      end;
--    end;
--    --Вычисление итогов
--    for k = 1..секцПозиции.Count        do
--      if k =   1        or
--         k =   4        or
--         k =  11        or
--         k =  17        or
--         k =  30
--                                        then
--        ВсегоГазет              = ВсегоГазет        + КолГазет[k]     ;
--        ВсегоНомеров            = ВсегоНомеров      + КолНомеров[k]   ;
--        ВсегоРазовыйТираж       = ВсегоРазовыйТираж + РазовыйТираж[k] ;
--        ВсегоГодовойТираж       = ВсегоГодовойТираж + ГодовойТираж[k] ;
--      end;
--    end;
--    --Удаление строк, не содержащих значений
--    УдалитьПустыеСтроки;
--    --Предпоследний штрих: удаление значений из сторок-заголовков (кр. неопределенной периодичности)
--    for k = 1..секцПозиции.Count                do
--      if Pos("1",Up(СодержаниеСтроки[k]))=0                     and
--         Pos("2",Up(СодержаниеСтроки[k]))=0                     and
--         Pos("3",Up(СодержаниеСтроки[k]))=0                     and
--         Pos("4",Up(СодержаниеСтроки[k]))=0                     and
--         Pos("5",Up(СодержаниеСтроки[k]))=0                     and
--         Pos("6",Up(СодержаниеСтроки[k]))=0                     and
--         Pos("7",Up(СодержаниеСтроки[k]))=0                     and
--         Pos("8",Up(СодержаниеСтроки[k]))=0                     and
--         Pos("9",Up(СодержаниеСтроки[k]))=0                     and
--         Pos("0",Up(СодержаниеСтроки[k]))=0                     and
--         Pos("НЕОПРЕДЕЛЕННАЯ",Up(СодержаниеСтроки[k]))=0        then
--        КолГазет[k]     = 0;
--        КолНомеров[k]   = 0;
--        РазовыйТираж[k] = 0;
--        ГодовойТираж[k] = 0;
--      end;
--    end;
--    --Последний штрих: удаление строк-сепараторов пустых разделов
--    kk          = секцПозиции.Count;
--    for k = 2..kk                               do
--      z         = kk+1-k;
--      if Pos("В течение",Up(СодержаниеСтроки[z]))>0     and
--         Pos("В течение",Up(СодержаниеСтроки[z+1]))>0   then
--        DeleteFromArray(ЗаписьСтроки,          z);
--        DeleteFromArray(СодержаниеСтроки,      z);
--        DeleteFromArray(КолГазет,              z);
--        DeleteFromArray(КолНомеров,            z);
--        DeleteFromArray(РазовыйТираж,          z);
--        DeleteFromArray(ГодовойТираж,          z);
--        DeleteFromArray(Сепаратор,             z);
--        DeleteFromArray(ФильтрПоступлений,     z);
--        DeleteFromArray(УровеньПодчиненности,  z);
--        DeleteFromArray(КатегорияМеста,        z);
--      end;
--    end;
--    else
--      Message("Не заданы или неправильно заданы условия поcтроения отчета!");
--    end;

--  end;






end