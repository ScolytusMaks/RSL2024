class "";
Import СИС2           Classes Константы;
Import РКП_СИС        Classes StdCode;
Import РКП_Газеты     Classes ОбработкаИстории;

inclass

  proc УдалениеНулевыхПоступлений;
    var Q1, Q2 :Query;
    var k, kk :Integer;
    Q1 = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
    Q1.IncludeDeleted = true;
    Hint('Открытие запроса...');
    Q1.Select;
    kk = Q1.Count;
      for k = 1 .. kk do
        Hint('Выполнение (' + Str( k / kk * 100, 2) + '%)...', k, kk);
        Q2 = Query.Create([РКП_Газеты.НомерГазеты]);
        Q2.Filter = "Газета=" + Str(Q1.Current.Газета) +
                    " and ДатаПринятияНаХранение<>nil" +
                    " and ДатаПринятияНаХранение>=" +
                    Str(Dat(1,1,Q1.Current.ГодПоступления),"dd.mm.yyyy") +
                    " and ДатаПринятияНаХранение<" +
                    Str(Dat(31,12,Q1.Current.ГодПоступления) + 1,"dd.mm.yyyy") +
                    " and isGroup=0";
        Q2.Select;
          if not (Q2.BOF and Q2.EOF) then
            if (not Q1.Current.Deleted) then
              Q1.Current.Delete;
            fi;
          fi;
        Q2.Close;
      Q1.Next;
      od;
    Q1.Close;
  end;

  proc ФиксироватьСтатистику;
    var Q1 :Query;
    var k, kk, УслГод :Integer;
    Message('Процедура фиксирует рассчитанные данные по статистике поступлений за выбранный год.'+Chr(13)+
            'После выполнения все корректировки для выбранного года будут игнорироваться!' );
    if (CmOk = РКП_СИС.Сервис.блВыборГода.ВыполнитьВыбор(УслГод)) then
      Q1 = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
      Q1.Filter = 'ГодПоступления = ' + Str(УслГод);
      Hint("Открытие запроса...");
      Q1.Select;
      kk  = Q1.Count;
      Q1.First;
      for k = 1 .. kk do
        Hint("Выполнение (" + Str( k / kk * 100, 2) + "%)...", k, kk);
        Q1.Current.ИзмененияЗапрещены = true;
        Q1.Next;
      od;
      Q1.Close;
    fi;
  end;

  proc РасФиксироватьСтатистику;
    var Q1 :Query;
    var k, kk, УслГод :Integer;
    Message('Процедура отменяет фиксацию рассчитанных данных по статистике поступлений за выбранный год.');
    if (CmOk = РКП_СИС.Сервис.блВыборГода.ВыполнитьВыбор(УслГод)) then
      Q1 = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
      Q1.Filter = 'ГодПоступления = ' + Str(УслГод);
      Hint("Открытие запроса...");
      Q1.Select;
      kk = Q1.Count;
      Q1.First;
      for k = 1 .. kk do
        Hint("Выполнение (" + Str( k / kk * 100, 2) + "%)...", k, kk);
        Q1.Current.ИзмененияЗапрещены = false;
        Q1.Next;
      od;
      Q1.Close;
    fi;
  end;

  --Процедура перенесена из картотеки картНомера 01.04.2012
  proc ОбработкаСтатистикиПоступлений(ФильтрНомеров :String;
                                        ДляГодаВыпуска :Integer;
                                        ДляГодаПоступления :Integer = Year(today);
                                        ОбновлятьСтатВыпуска :Logical = true;
                                        ОбновлятьСтатПоступлений :Logical = true
                                        );
        -- Очень важная процедура.
        -- Вычисляется годовая статистика поступлений и выпуска номеров,
        -- осуществляется запись в накопленную статистику
      var Аналитика :Subtable;
      var flt, sRecord, фГодПоступления, фГодВыпуска :string;
      var Q :Query;
      var НомерПоляИстории :integer;
      --статистика
      var НомеровВыпущеноВ, НомеровПолученоП, НомеровПолученоВ :integer;
      var ГодовойТиражП, ГодовойТиражВ, СреднийРазовыйТиражП, СреднийРазовыйТиражВ :numeric;
      --последний полученный номер
      var ТочностьДатыПоследнегоПолученного :integer;
      var ВалПоследнегоПолученного :string;
      var НомерПоследнегоПолученного :string;
      var ДатаПоследнегоПолученного :date;
      var ЗаписьГазеты, ЗаписьПоступлений, ЗаписьВыпуска :record;
      var ЗаписьМестоИздания, ЗаписьТематика, ЗаписьТерриторияРаспространения, ЗаписьЯзыкИздания, ЗаписьЧАЦН, ЗаписьЖанр :record;
      var ТипИздания :integer;
      var КатегорияПериодичности, КоличествоВПериоде :integer;
      var Периодичность :string;
      var ИзмененияЗапрещены :logical;
      var ТекстСообщенияОбИстории :string;
      if SessionInfo.UserRecord.FullAccess then
        flt = ФильтрНомеров;
        if (flt <> nil)  then --Обработка происходит только в фильтрованной картотеке
          sRecord = SubStr(flt, Pos("{", flt), Pos("}", flt) - Pos("{", flt) + 1);  --вычисление строкового представления ссылки на запись газеты
          -- Вычисление записей справочников и количественных показателей поступления и выпуска
          -- Вычисление статистики поступлений
          фГодПоступления = Str(ДляГодаПоступления);
          Q = Query.Create([РКП_Газеты.НомерГазеты]);--Обработка запроса по номерам для вычисления тиража поступлений
          Q.Filter = "Газета=" + sRecord + " and Year(ДатаПринятияНаХранение)=" + фГодПоступления +
                     " and not НеПолучен" +
                     " and isGroup=0";
          Q.LoadingFieldsMode = СИС2.Константы.mdNone;
          Q.LoadingFields = "Тираж";
          --Q.Select;
          НомеровПолученоП = Q.Count;
          if (НомеровПолученоП > 0) then
            ГодовойТиражП        = Q.CalcAggregates("Sum(Тираж)") / 1000;
            СреднийРазовыйТиражП = Round(ГодовойТиражП/НомеровПолученоП, 1);
            ГодовойТиражП        = Round(ГодовойТиражП, 1);
          fi;
          --Q.Close;
          -- Вычисление статистики выпуска
          фГодВыпуска = Str(ДляГодаВыпуска);
          if Int(фГодВыпуска) >=2006 or   -- все действия по обработке выпуска -
             Int(фГодВыпуска) < 1990 then -- только для года 2006 и позже или ранее 1990 (для БД 1917 года)
            Q = Query.Create([РКП_Газеты.НомерГазеты]);--Обработка запроса по номерам для вычисления тиража поступлений
            Q.Filter = "Газета=" + sRecord +
                       " and ГодВыпуска=" + фГодВыпуска+
                       " and not НеПолучен" +
                       " and isGroup=0";
            Q.LoadingFieldsMode = СИС2.Константы.mdNone;
            Q.LoadingFields = "Тираж;ТочностьДатыВыхода;ВаловыйНомер;Номер;ДатаВыхода";
            Q.Select;
            НомеровПолученоВ = Q.Count;
            if (НомеровПолученоВ > 0) then
              ГодовойТиражВ        = Q.CalcAggregates("Sum(Тираж)") / 1000;
              СреднийРазовыйТиражВ = Round(ГодовойТиражВ/НомеровПолученоВ, 1);
              ГодовойТиражВ        = Round(ГодовойТиражВ, 1);
              Q.Last;
              ТочностьДатыПоследнегоПолученного = Q.Current.ТочностьДатыВыхода;
              ВалПоследнегоПолученного   = Q.Current.ВаловыйНомер;
              НомерПоследнегоПолученного = Q.Current.Номер;
              ДатаПоследнегоПолученного  = Q.Current.ДатаВыхода;
            fi; --НомеровПолученоВ>0
            Q.Close;
            --Обработка запроса по номерам для вычисления тиража поступлений
            Q = Query.Create([РКП_Газеты.НомерГазеты]);
            Q.Filter = "Газета=" + sRecord +
                       " and ГодВыпуска=" + фГодВыпуска +
                       " and isGroup=0";
            Q.Select;
            НомеровВыпущеноВ = Q.Count;
            Q.Close;
          fi; --год выпуска >= 2006
          -- Вычисление записей справочников и типа издания --
          ЗаписьГазеты = РКП_Газеты.Газета.Open(sRecord);--Превращение строки в запись
          if (ЗаписьГазеты <> nil) then
            --== Скалярные значения ==--
            --Тип издания
            ТипИздания = ЗаписьГазеты.ТипИздания;
            --Территория распространения
            ЗаписьТерриторияРаспространения = ЗаписьГазеты.ТерриторияРаспространения;
            --Периодичность
            КатегорияПериодичности = ЗаписьГазеты.КатегорияПериодичности;
            КоличествоВПериоде = ЗаписьГазеты.КоличествоВПериоде;
            Периодичность = ЗаписьГазеты.Периодичность;
            --Жанр
            ЗаписьЖанр = ЗаписьГазеты.Жанр;
            --== Массивы ==--
            --Место издания
            Аналитика = ЗаписьГазеты.МестаИздания.CreateSubtableView("", "Index");
            if (Аналитика.Count > 0) then
              ЗаписьМестоИздания = Аналитика.ItemsByNumber[1].МестоИздания;
            else
              ЗаписьМестоИздания = nil;
            fi;
            --Тематика
            Аналитика = ЗаписьГазеты.Тематики.CreateSubtableView("", "Index");
            if (Аналитика.Count > 0) then
              ЗаписьТематика = Аналитика.ItemsByNumber[1].Тематика;
            else
              ЗаписьТематика = nil;
            fi;
            --ЧАЦН
            Аналитика = ЗаписьГазеты.ЧАЦН.CreateSubtableView("", "Index");
            if (Аналитика.Count > 0) then
              ЗаписьЧАЦН =  Аналитика.ItemsByNumber[1].ЧАЦН;
            else
              ЗаписьЧАЦН = nil;
            fi;
            --Язык
            Аналитика = ЗаписьГазеты.Языки.CreateSubtableView("", "Index");
            if (Аналитика.Count > 0) then
              ЗаписьЯзыкИздания = Аналитика.ItemsByNumber[1].Язык;
            else
              ЗаписьЯзыкИздания = nil;
            fi;
          fi; --ЗаписьГазеты<>nil
          -- А. Накопление статистики выпуска --
          if ОбновлятьСтатВыпуска then
            Q = Query.Create([РКП_Газеты.ВыпускГазеты]); -- Обработка запроса для вычисления записи со статистикой выпуска газеты
            Q.Filter = "Газета="+srecord+" and ГодВыпуска="+Str(фГодВыпуска);
            Q.LoadingFieldsMode = СИС2.Константы.mdNone;
            Q.Select;
            --Определение существования записи. Если ее нет, то ни считывание, ни обработка не происходят
            if (Q.Count>0 and Int(фГодВыпуска)>=2006) or (Q.Count>0 and Int(фГодВыпуска)< 1990) then
              ЗаписьВыпуска = Q.Current;
              if not ЗаписьВыпуска.КомплектПолучен then  --Обработка происходит, если коплект получен не весь
                BeginTransaction([РКП_Газеты.ВыпускГазеты]);
                ЗаписьВыпуска.СреднийРазовыйТираж               = СреднийРазовыйТиражВ;
                ЗаписьВыпуска.ГодовойТираж                      = ГодовойТиражВ;
                ЗаписьВыпуска.НомеровВыпущено                   = НомеровВыпущеноВ;
                ЗаписьВыпуска.НомеровПолучено                   = НомеровПолученоВ;
                ЗаписьВыпуска.Тематика                          = ЗаписьТематика;
                ЗаписьВыпуска.МестоИздания                      = ЗаписьМестоИздания;
                ЗаписьВыпуска.ТерриторияРаспространения         = ЗаписьТерриторияРаспространения;
                ЗаписьВыпуска.ТипИздания                        = ТипИздания;
                ЗаписьВыпуска.Язык                              = ЗаписьЯзыкИздания;
                ЗаписьВыпуска.ЧАЦН                              = ЗаписьЧАЦН;
                ЗаписьВыпуска.Жанр                              = ЗаписьЖанр;
                ЗаписьВыпуска.НомерПоследнегоПолученного        = НомерПоследнегоПолученного;
                ЗаписьВыпуска.ДатаПоследнегоПолученного         = ДатаПоследнегоПолученного;
                ЗаписьВыпуска.ВалПоследнегоПолученного          = ВалПоследнегоПолученного;
                ЗаписьВыпуска.ТочностьДатыПоследнегоПолученного = ТочностьДатыПоследнегоПолученного;
                ЗаписьВыпуска.КатегорияПериодичности            = КатегорияПериодичности;
                ЗаписьВыпуска.КоличествоВПериоде                = КоличествоВПериоде;
                ЗаписьВыпуска.Периодичность                     = Периодичность;
                СИС2.ФункцииДокумента.RecordPost(ЗаписьВыпуска);
                EndTransaction;
              fi; --комплект не получен
            fi; --существование записи со статистикой выпуска      МашинаРеквизитов.УправлениеДоступом.интПраваПользователя.OpenRecord(SessionInfo.RoleRecord)
            Q.Close;
          fi;
          --Б. Обработка статистики поступлений
          if ОбновлятьСтатПоступлений then
            Q = Query.Create([РКП_Газеты.ПоступлениеГазеты]);--Обработка запроса для вычисления записи со статистикой поступления
            Q.Filter = "Газета=" + sRecord + " and ГодПоступления=" + фГодПоступления;
            Q.LoadingFields                   = "DocID";
            Q.Select;
            BeginTransaction([РКП_Газеты.ПоступлениеГазеты]);
            if (Q.Count = 0) then -- Определение существования записи. Если ее нет, то запись должна создаваться.
              ЗаписьПоступлений = РКП_Газеты.ПоступлениеГазеты.Create;
            else
              ЗаписьПоступлений = Q.Current;
              ЗаписьПоступлений.Edit;
              ИзмененияЗапрещены = ЗаписьПоступлений.ИзмененияЗапрещены;
            fi;
            Q.Close;
            if (ИзмененияЗапрещены = false) then -- обновление статистики допустимо только в том случае, если запись не защищена от изменений
              ЗаписьПоступлений.Газета                        = ЗаписьГазеты;
              ЗаписьПоступлений.ГодПоступления                = Int(фГодПоступления);
              ЗаписьПоступлений.СреднийРазовыйТираж           = СреднийРазовыйТиражП;
              ЗаписьПоступлений.ГодовойТираж                  = ГодовойТиражП;
              ЗаписьПоступлений.НомеровПолучено               = НомеровПолученоП;
              ЗаписьПоступлений.Тематика                      = ЗаписьТематика;
              ЗаписьПоступлений.МестоИздания                  = ЗаписьМестоИздания;
              ЗаписьПоступлений.ТерриторияРаспространения     = ЗаписьТерриторияРаспространения;
              ЗаписьПоступлений.ТипИздания                    = ТипИздания;
              ЗаписьПоступлений.Язык                          = ЗаписьЯзыкИздания;
              ЗаписьПоступлений.ЧАЦН                          = ЗаписьЧАЦН;
              ЗаписьПоступлений.Жанр                          = ЗаписьЖанр;
              ЗаписьПоступлений.КатегорияПериодичности        = КатегорияПериодичности;
              ЗаписьПоступлений.КоличествоВПериоде            = КоличествоВПериоде;
              ЗаписьПоступлений.Периодичность                 = Периодичность;
              СИС2.ФункцииДокумента.RecordPost(ЗаписьПоступлений);
              EndTransaction;
            fi; -- изменения не запрещены
          fi; -- ОбновлятьСтатПоступлений
          --В. Генерация предупреждения на несоответствие истории
          if (ЗаписьГазеты <> nil) then
            for НомерПоляИстории = 0 .. 13 do
              if ПроверкаСоответствия(ЗаписьГазеты, НомерПоляИстории) = false then
                if    (НомерПоляИстории =  0) then ТекстСообщенияОбИстории = Chr(13) + "<Название>";
                elsif (НомерПоляИстории =  1) then ТекстСообщенияОбИстории = Chr(13) + "<Название (ин.яз.)>";
                elsif (НомерПоляИстории =  2) then ТекстСообщенияОбИстории = Chr(13) + "<Название (нац.яз.)>";
                elsif (НомерПоляИстории =  3) then ТекстСообщенияОбИстории = Chr(13) + "<Подзаголовок>";
                elsif (НомерПоляИстории =  4) then ТекстСообщенияОбИстории = Chr(13) + "<Учредитель (учредители)>";
                elsif (НомерПоляИстории =  5) then ТекстСообщенияОбИстории = Chr(13) + "<Место издания>";
                elsif (НомерПоляИстории =  6) then ТекстСообщенияОбИстории = Chr(13) + "<Адрес редакции>";
                elsif (НомерПоляИстории =  7) then ТекстСообщенияОбИстории = Chr(13) + "<Редактор>";
                elsif (НомерПоляИстории =  8) then ТекстСообщенияОбИстории = Chr(13) + "<Тип издания>";
                elsif (НомерПоляИстории =  9) then ТекстСообщенияОбИстории = Chr(13) + "<Территория распространения>";
                elsif (НомерПоляИстории = 10) then ТекстСообщенияОбИстории = Chr(13) + "<Тематика>";
                elsif (НомерПоляИстории = 11) then ТекстСообщенияОбИстории = Chr(13) + "<Целевое назначение>";
                elsif (НомерПоляИстории = 12) then ТекстСообщенияОбИстории = Chr(13) + "<Язык издания>";
                elsif (НомерПоляИстории = 13) then ТекстСообщенияОбИстории = Chr(13) + "<Периодичность выхода>";
                fi;
              fi;
            od; -- цикл по вариантам "исторических" полей
            if (ТекстСообщенияОбИстории <> "") then
              --По просьбе Верещагиной!
              --Message("Пожалуйста, проверьте историю полей карточки газеты:"+ТекстСообщенияОбИстории);
            fi;
          fi;
        fi; --фильтр установлен
      fi; -- условие на права доступа
  end;--proc ОбработкаСтатистикиПоступлений


end