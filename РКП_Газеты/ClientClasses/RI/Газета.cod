class inherited РКП_СИС.RI.intBase 'Интерфейс записи';

import РКП_СИС Classes Functions, Recs, StdCode, StringsFunctions;

inclass public

  var ИмяПоляНеПрименяется :String = 'Прекращено';
  var ИмяПоляНаим          :String = 'НазваниеОсн';

  func СвязанныйКлассЗаписей: Class СИС2.Базовая.БазоваяЗапись;
    Result = РКП_Газеты.Газета;
  end;

  func Create: РКП_Газеты.RI.Газета;
    Result = inherited Create;
    Result.Record = РКП_Газеты.Газета.Create;
  end;

  func ОткрытьПоЗаписи synonym OpenRecord(locRecord: РКП_Газеты.Газета): РКП_Газеты.RI.Газета;
    Result = inherited Create;
    Result.Record = locRecord;
  end;

  func БланкРедакторПоУмолчанию: Class BlankForm;
    Result = nil;
  end;

  func КартотекаПоУмолчанию: Class CardForm;
    Result = nil;
  end;

inobject public

  Record: РКП_Газеты.Газета;

  proc ИнициализироватьПоУмолчанию synonym InitByDefault;
    Init;
    with Record.Языки.AddEx do
      Язык = FindRecord(РКП_Справочники.спрЯзыкИздания, 'ГосЯзРФ');
    end;
  end;

  proc Инициализировать synonym Init;
    Assert(Record.State = Kernel.Record.Created);
  end;

  proc Записать synonym Post( аДиалоговыйРежим :Logical = False );
    SetWorkLog(wsRecCreated, wsRecUpdated);
    ОбновитьПоляИнфо;
    inherited Post(аДиалоговыйРежим);
    ОбновитьСтатАналитику;
  end;

  proc ОбновитьПоляИнфо; -- Обновление полей, ранее бывших вычислимыми
    ОбновитьПолеИнфо_МестаИздания;
    ОбновитьПолеИнфо_ЯзыкИздания;
    ОбновитьПолеИнфо_ЧитательскийАдрес;
    ОбновитьПолеИнфо_Тематика;
    ОбновитьПолеИнфо_ПоследнийПолученныйНомер;
    ОбновитьПолеИнфо_НазваниеЛГС;
  end;

  inobject private

  proc ОбновитьПолеИнфо_МестаИздания;
    var vCount :Integer;
    var locResult :String;
    vCount = Self.Record.МестаИздания.Count;
    if (vCount = 1) then
      locResult = Self.Record.МестаИздания.Items[1].МестоИздания.Наим;
    elsif (vCount = 2) then
      locResult = Self.Record.МестаИздания.Items[1].МестоИздания.Наим + '; ' +
                Self.Record.МестаИздания.Items[2].МестоИздания.Наим;
    elsif (vCount >= 3) then
      locResult = Self.Record.МестаИздания.Items[1].МестоИздания.Наим + '; ' +
                  Self.Record.МестаИздания.Items[2].МестоИздания.Наим + '; ' +
                  Self.Record.МестаИздания.Items[3].МестоИздания.Наим;
    fi;
    Self.Record.МестаИзданияСтр = SubStr(Trim(locResult), 1, 250);
  end;

  proc ОбновитьПолеИнфо_ЯзыкИздания;
    var vCount :Integer;
    var locResult :String;
    vCount = Self.Record.Языки.Count;
    if (vCount = 1) then
      locResult = Self.Record.Языки.Items[1].Язык.Наим;
    elsif (vCount = 2) then
      locResult = Self.Record.Языки.Items[1].Язык.Наим + '; ' +
                  Self.Record.Языки.Items[2].Язык.Наим;
    elsif (vCount >= 3) then
      locResult = Self.Record.Языки.Items[1].Язык.Наим + '; ' +
                  Self.Record.Языки.Items[2].Язык.Наим + '; ' +
                  Self.Record.Языки.Items[3].Язык.Наим;
    fi;
    Self.Record.ЯзыкиСтр = SubStr(Trim(locResult), 1, 250);
  end;

  proc ОбновитьПолеИнфо_ЧитательскийАдрес;
    var vCount :Integer;
    var locResult :String;
    vCount = Self.Record.ЧАЦН.Count;
    if (vCount = 1) then
      locResult = Self.Record.ЧАЦН.Items[1].ЧАЦН.Наим;
    elsif (vCount = 2) then
      locResult = Self.Record.ЧАЦН.Items[1].ЧАЦН.Наим + '; ' +
                  Self.Record.ЧАЦН.Items[2].ЧАЦН.Наим;
    elsif (vCount >= 3) then
      locResult = Self.Record.ЧАЦН.Items[1].ЧАЦН.Наим + '; ' +
                  Self.Record.ЧАЦН.Items[2].ЧАЦН.Наим + '; ' +
                  Self.Record.ЧАЦН.Items[3].ЧАЦН.Наим;
    fi;
    Self.Record.ЧАЦНСтр = SubStr(Trim(locResult), 1, 250);
  end;

  proc ОбновитьПолеИнфо_Тематика;
    var vCount :Integer;
    var locResult :String;
    vCount = Self.Record.Тематики.Count;
    if (vCount = 1) then
      locResult = Self.Record.Тематики.Items[1].Тематика.Наим;
    elsif (vCount = 2) then
      locResult = Self.Record.Тематики.Items[1].Тематика.Наим + '; ' +
                  Self.Record.Тематики.Items[2].Тематика.Наим;
    elsif (vCount >= 3) then
      locResult = Self.Record.Тематики.Items[1].Тематика.Наим + '; ' +
                  Self.Record.Тематики.Items[2].Тематика.Наим + '; ' +
                  Self.Record.Тематики.Items[3].Тематика.Наим;
    fi;
    Self.Record.ТематикиСтр = SubStr(Trim(locResult), 1, 250);
  end;

  proc ОбновитьПолеИнфо_ПоследнийПолученныйНомер;
    var rNom :РКП_Газеты.НомерГазеты;
    var locResult :String;
    rNom = РКП_Газеты.Стат.ПоследнийПолученныйНомер(Self.Record);
    if (rNom <> nil) then
      locResult = BiblioRecord.ОписаниеНомера(rNom);
    fi;
    Self.Record.ПоследнийПолученныйНомер = SubStr(Trim(locResult), 1, 250);
  end;

  proc ОбновитьПолеИнфо_НазваниеЛГС;
  end;

  proc ВыполнитьУдаление synonym DoDelete( const aCheckRefs :Logical );
    ClearWorkLog(wsIndifferently, false);
    inherited DoDelete(aCheckRefs);
  end;

  proc SaveStoredValL(rWrkLog :РКП_СИС.ЛогРабот; byWorkState :tWorkState);
    rWrkLog.StoredValL = Self.Record.ПризнакОтсылки; -- сохранение показателя логического типа
  end;


  inobject public

  proc ОбновитьСтатАналитику;
    ОбновитьСтатАналитикуДляГазеты(Self.Record);
  end;

  -- Метод вызывается тогда, когда требуется проверить возможность удаления газеты
  func УдалениеВозможно :Logical;
    var Q :Query;
    var aTxt :String[];
    -- 1. Проверка наличия номеров
    with Query.Create([РКП_Газеты.НомерГазеты]) do
      Filter = 'isGroup=0 and Газета=' + Self.Record.DocIDStr;
      Result = (Count = 0);
    end;
    if (not Result) then
      aTxt = nil;
      AddInArray( aTxt, 'Удаление невозможно: в базе данных имеются данные о номерах газеты.');
      AddInArray( aTxt, 'Для удаления газеты следует предварительно удалить (если это возможно) записи о номерах и записи о статистике выпуска.');
      Message( ArrayToText(aTxt) );
      Return;
    fi;
    -- 1.1. Проверка наличия номеров, созданных ЛГС
    if Result then
      with Query.Create([РКП_Газеты.НомерГазеты]) do
        Filter = 'СозданОЛГС and Газета=' + Self.Record.DocIDStr;
        Result = (Count = 0);
      end;
      if (not Result) then
        aTxt = nil;
        AddInArray( aTxt, 'Удаление невозможно: в базе данных имеются данные о номерах газеты.');
        AddInArray( aTxt, 'Описание номеров внесено сотрудниками сектора (группы) ЛГС.');
        AddInArray( aTxt, 'Для разрешения конфликта обратитесь к системному администратору.');
        Message( ArrayToText(aTxt) );
        Return;
      fi;
    fi;
    -- 1.2. Удаление групп номеров
    if Result then
      try
        Q = Query.Create([РКП_Газеты.НомерГазеты]);
        Q.Filter = 'isGroup=-1 and Газета=' + Self.Record.DocIDStr;
        Q.Select;
        DeleteAllRecords(Q);
      except
        Result = false;
      end;
      if (not Result) then
        aTxt = nil;
        AddInArray( aTxt, 'Не удалось выполнить удаление групповой записи номеров.');
        AddInArray( aTxt, 'Для разрешения конфликта обратитесь к системному администратору.');
        Message( ArrayToText(aTxt) );
        Return;
      fi;
    fi;
    -- 2. Проверка наличия статистики выпуска
    if Result then
      with Query.Create([РКП_Газеты.ВыпускГазеты]) do
        Filter = 'Газета=' + Self.Record.DocIDStr;
        Result = (Count = 0);
      end;
      if (not Result) then
        aTxt = nil;
        AddInArray( aTxt, 'Удаление невозможно: в базе данных имеются данные о статистике выпуска газеты.');
        AddInArray( aTxt, 'Для удаления газеты следует предварительно удалить эти записи.');
        Message( ArrayToText(aTxt) );
        Return;
      fi;
    fi;
    -- 3. Удаление статистики поступлений
    if Result then
      try
        Q = Query.Create([РКП_Газеты.ПоступлениеГазеты]);
        Q.Filter = 'Газета=' + Self.Record.DocIDStr;
        Q.Select;
        DeleteAllRecords(Q);
      except
        Result = false;
      end;
      if (not Result) then
        aTxt = nil;
        AddInArray( aTxt, 'Не удалось выполнить удаление записей статистики поступлений.');
        AddInArray( aTxt, 'Для разрешения конфликта обратитесь к системному администратору.');
        Message( ArrayToText(aTxt) );
        Return;
      fi;
    fi;
    -- 4. Удаление истории изменений
    if Result then
      try
        Q = Query.Create([РКП_Газеты.ИсторияГазеты]);
        Q.Filter = 'Газета=' + Self.Record.DocIDStr;
        Q.Select;
        DeleteAllRecords(Q);
      except
        Result = false;
      end;
      if (not Result) then
        aTxt = nil;
        AddInArray( aTxt, 'Не удалось выполнить удаление записей истории изменений.');
        AddInArray( aTxt, 'Для разрешения конфликта обратитесь к системному администратору.');
        Message( ArrayToText(aTxt) );
        Return;
      fi;
    fi;
  end;

inclass public

  type типСтатАналитика = (анТипИздания = 1,
                           анТерриторияРаспространения,
                           анКатегорияПериодичности,
                           анКоличествоВПериоде,
                           анПериодичность,
                           анЖанр,
                           анМестоИздания,
                           анТематика,
                           анЧАЦН,
                           анЯзык
                           );

  type типОпцияПолученияСтатАн = (опОбновитьКэшСтатАн = 1, опЧитатьКэшСтатАн);

  -- Обновление аналитичесих стат показателей без пересчета количественных
  proc ОбновитьСтатАналитикуДляГазеты (vNsp :РКП_Газеты.Газета);
    var aAnlt :Variant[];
    var rStatOut :РКП_Газеты.ВыпускГазеты;
    var rStatIn :РКП_Газеты.ПоступлениеГазеты;
    aAnlt = ПолучитьСтатАналитикуДляГазеты(vNsp, опОбновитьКэшСтатАн);
    -- выпуск
    with Query.Create([РКП_Газеты.ВыпускГазеты]) do
      Filter = 'not КомплектПолучен and Газета=' + vNsp.DocIDStr;
      Select;
      while not Eof do
        rStatOut = Current as РКП_Газеты.ВыпускГазеты;
        rStatOut.Тематика                  = aAnlt[анТематика] as РКП_Справочники.спрТематика;
        rStatOut.МестоИздания              = aAnlt[анМестоИздания] as РКП_Справочники.спрГеография;
        rStatOut.ТерриторияРаспространения = aAnlt[анТерриторияРаспространения] as РКП_Справочники.спрТерриторияРаспространения;
        rStatOut.ТипИздания                = aAnlt[анТипИздания] as Integer;
        rStatOut.Язык                      = aAnlt[анЯзык] as РКП_Справочники.спрЯзыкИздания;
        rStatOut.ЧАЦН                      = aAnlt[анЧАЦН] as РКП_Справочники.спрТематика;
        rStatOut.Жанр                      = aAnlt[анЖанр] as РКП_Справочники.спрЖанр;
        rStatOut.КатегорияПериодичности    = aAnlt[анКатегорияПериодичности] as Integer;
        rStatOut.КоличествоВПериоде        = aAnlt[анКоличествоВПериоде] as Integer;
        rStatOut.Периодичность             = aAnlt[анПериодичность] as String;
        RecordPostIfNeed(rStatOut);
        Next;
      od;
    end;
    -- поступление
    with Query.Create([РКП_Газеты.ПоступлениеГазеты]) do
      Filter = 'not ИзмененияЗапрещены and Газета=' + vNsp.DocIDStr + ' and ГодПоступления=' + Str(Year(Today));
      Select;
      while not Eof do
        rStatIn = Current as РКП_Газеты.ПоступлениеГазеты;
        rStatIn.Тематика                  = aAnlt[анТематика] as РКП_Справочники.спрТематика;
        rStatIn.МестоИздания              = aAnlt[анМестоИздания] as РКП_Справочники.спрГеография;
        rStatIn.ТерриторияРаспространения = aAnlt[анТерриторияРаспространения] as РКП_Справочники.спрТерриторияРаспространения;
        rStatIn.ТипИздания                = aAnlt[анТипИздания] as Integer;
        rStatIn.Язык                      = aAnlt[анЯзык] as РКП_Справочники.спрЯзыкИздания;
        rStatIn.ЧАЦН                      = aAnlt[анЧАЦН] as РКП_Справочники.спрТематика;
        rStatIn.Жанр                      = aAnlt[анЖанр] as РКП_Справочники.спрЖанр;
        rStatIn.КатегорияПериодичности    = aAnlt[анКатегорияПериодичности] as Integer;
        rStatIn.КоличествоВПериоде        = aAnlt[анКоличествоВПериоде] as Integer;
        rStatIn.Периодичность             = aAnlt[анПериодичность] as String;
        RecordPostIfNeed(rStatIn);
        Next;
      od;
    end;
    ОчиститьКэшСтатАн;
  end;

  func ПолучитьСтатАналитикуДляГазеты (rNsp :РКП_Газеты.Газета; vOpt :типОпцияПолученияСтатАн) :Variant[];
    --var eAnlt :Variant[];
    --var Аналитика :Subtable;
    if (vOpt = опОбновитьКэшСтатАн) then
      ОчиститьКэшСтатАн;
    elsif (vOpt in [опЧитатьКэшСтатАн]) then
       if (LastNspStAn = rNsp) and (CashNspStAn <> nil) then
         Result = CashNspStAn;
       fi;
    fi;
    if (Result = nil) then
      --== Скалярные значения ==--
      -- Тип издания
      Result[анТипИздания] = rNsp.ТипИздания;
      -- Территория распространения
      Result[анТерриторияРаспространения] = rNsp.ТерриторияРаспространения;
      -- Периодичность
      Result[анКатегорияПериодичности] = rNsp.КатегорияПериодичности;
      Result[анКоличествоВПериоде] = rNsp.КоличествоВПериоде;
      Result[анПериодичность] = rNsp.Периодичность;
      -- Жанр
      Result[анЖанр] = rNsp.Жанр;
      --== Массивы ==--
      -- Место издания
      if (rNsp.МестаИздания.Count > 0) then
        Result[анМестоИздания] = rNsp.МестаИздания.Items[1].МестоИздания;
      fi;
      -- Тематика
      if (rNsp.Тематики.Count > 0) then
        Result[анТематика] = rNsp.Тематики.Items[1].Тематика;
      fi;
      -- ЧАЦН
      if (rNsp.ЧАЦН.Count > 0) then
        Result[анЧАЦН] = rNsp.ЧАЦН.Items[1].ЧАЦН;
      fi;
      -- Язык
      if (rNsp.Языки.Count > 0) then
        Result[анЯзык] = rNsp.Языки.Items[1].Язык;
      fi;
    fi;
    if (vOpt = опОбновитьКэшСтатАн) then
      LastNspStAn = rNsp;
      CashNspStAn = Result;
    elsif (vOpt = опЧитатьКэшСтатАн) then
      ОчиститьКэшСтатАн;
    fi;
  end;

  proc ОчиститьКэшСтатАн;
    LastNspStAn = nil;
    CashNspStAn = nil;
  end;

inclass private

  var LastNspStAn :РКП_Газеты.Газета;
  var CashNspStAn :Variant[];


end