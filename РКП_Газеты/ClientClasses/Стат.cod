class "Расчет статистических показателей";
import СИС2 classes Константы;
import РКП_СИС classes Recs, StringsFunctions, StdCode, Functions, FilterMaker;

inclass public

  func НомеровВыпущено (Издание :РКП_Газеты.Газета; ГодВыпуска :integer) :integer;
    var aFlt :String[];
    AddInArray( aFlt, 'Газета=' + Издание.DocIDStr );
    AddInArray( aFlt, 'ГодВыпуска=' + Str(ГодВыпуска) );
    AddInArray( aFlt, 'isGroup=0' );
    AddInArray( aFlt, 'not(СозданОЛГС and НеПолучен)' );
    with Query.Create([РКП_Газеты.НомерГазеты]) do
      Filter = MakeFilter(aFlt);
      Return Count;
    end;
  end;

  func НомеровПолучено (Издание :РКП_Газеты.Газета; ГодВыпуска :integer) :integer;
    var aFlt :String[];
    AddInArray( aFlt, 'Газета=' + Издание.DocIDStr );
    AddInArray( aFlt, 'ГодВыпуска=' + Str(ГодВыпуска) );
    AddInArray( aFlt, 'not НеПолучен' );
    AddInArray( aFlt, 'isGroup=0' );
    AddInArray( aFlt, 'not(СозданОЛГС and НеПолучен)' );
    with Query.Create([РКП_Газеты.НомерГазеты]) do
      Filter = MakeFilter(aFlt);
      Return Count;
    end;
  end;

  func НомерПоследнихИзмененийИстории(Издание :РКП_Газеты.Газета; Категория :Integer) :Integer;
    var aFlt :String[];
    var rHst :РКП_Газеты.ИсторияГазеты;
    AddInArray( aFlt, 'Газета=' + Издание.DocIDStr );
    AddInArray( aFlt, 'НомерПоля=' + Str(Категория) );
    rHst = FindRecord(РКП_Газеты.ИсторияГазеты, MakeFilter(aFlt), 'НомерИзменений-');
    if (rHst <> nil) then
      Return rHst.НомерИзменений;
    fi;
  end;

  func ПоследнееИзменениеИстории(Издание :РКП_Газеты.Газета; Категория :Integer) :РКП_Газеты.ИсторияГазеты;
    var aFlt :String[];
    AddInArray( aFlt, 'Газета=' + Издание.DocIDStr );
    AddInArray( aFlt, 'НомерПоля=' + Str(Категория) );
    Return FindRecord(РКП_Газеты.ИсторияГазеты, MakeFilter(aFlt), 'НомерИзменений-');
  end;

  func ПоследнийПолученныйНомер(Издание :РКП_Газеты.Газета) :РКП_Газеты.НомерГазеты;
    var aFlt :String[];
    AddInArray( aFlt, 'Газета=' + Издание.DocIDStr );
    AddInArray( aFlt, 'not НеПолучен' );
    AddInArray( aFlt, 'isGroup=0' );
    AddInArray( aFlt, 'not(СозданОЛГС and НеПолучен)' );
    Return FindRecord(РКП_Газеты.НомерГазеты, MakeFilter(aFlt), 'ГодВыпуска-;СерияНумерации-;Номер-');
  end;

  func ПоследнийПолученныйНомерЗаГодВыпуска(Издание :РКП_Газеты.Газета; ГодВыпуска :Integer) :РКП_Газеты.НомерГазеты;
    var aFlt :String[];
    AddInArray( aFlt, 'Газета=' + Издание.DocIDStr );
    AddInArray( aFlt, 'ГодВыпуска=' + Str(ГодВыпуска) );
    AddInArray( aFlt, 'not НеПолучен' );
    AddInArray( aFlt, 'isGroup=0' );
    AddInArray( aFlt, 'not(СозданОЛГС and НеПолучен)' );
    Return FindRecord(РКП_Газеты.НомерГазеты, MakeFilter(aFlt), 'СерияНумерации-;Номер-');
  end;

  func ПервыйПолученныйНомер(Издание :РКП_Газеты.Газета) :РКП_Газеты.НомерГазеты;
    var aFlt :String[];
    AddInArray( aFlt, 'Газета=' + Издание.DocIDStr );
    AddInArray( aFlt, 'not НеПолучен' );
    AddInArray( aFlt, 'isGroup=0' );
    AddInArray( aFlt, 'not(СозданОЛГС and НеПолучен)' );
    Return FindRecord(РКП_Газеты.НомерГазеты, MakeFilter(aFlt), 'ГодВыпуска;СерияНумерации;Номер');
  end;

  func ПервыйВыпущенныйНомер(Издание :РКП_Газеты.Газета) :РКП_Газеты.НомерГазеты;
    var aFlt :String[];
    AddInArray( aFlt, 'Газета=' + Издание.DocIDStr );
    AddInArray( aFlt, 'isGroup=0' );
    AddInArray( aFlt, 'not(СозданОЛГС and НеПолучен)' );
    Return FindRecord(РКП_Газеты.НомерГазеты, MakeFilter(aFlt), 'ГодВыпуска;СерияНумерации;Номер');
  end;

  func ПоследнийВыпущенныйНомер(Издание :РКП_Газеты.Газета) :РКП_Газеты.НомерГазеты;
    var aFlt :String[];
    AddInArray( aFlt, 'Газета=' + Издание.DocIDStr );
    AddInArray( aFlt, 'isGroup=0' );
    AddInArray( aFlt, 'not(СозданОЛГС and НеПолучен)' );
    Return FindRecord(РКП_Газеты.НомерГазеты, MakeFilter(aFlt), 'ГодВыпуска-;СерияНумерации-;Номер-');
  end;

  func НомерПрекращения(Издание :РКП_Газеты.Газета) :РКП_Газеты.НомерГазеты;
    var aFlt :String[];
    AddInArray( aFlt, 'Газета=' + Издание.DocIDStr );
    AddInArray( aFlt, 'isGroup=0' );
    AddInArray( aFlt, 'ПрекращениеИздания' );
    AddInArray( aFlt, 'not(СозданОЛГС and НеПолучен)' );
    Return FindRecord(РКП_Газеты.НомерГазеты, MakeFilter(aFlt), 'ГодВыпуска-;СерияНумерации-;Номер-');
  end;

  func ПринятоНомеровЗаСмену(Оператор :String; ДатаСмены :Date) :Integer;
    var aFlt :String[];
    AddInArray( aFlt, 'RClass="РКП_Газеты.НомерГазеты"' );
    AddInArray( aFlt, 'CreateUser="' + Оператор + '"' );
    AddInArray( aFlt, 'CreateDate>=' +  Str(ДатаСмены) );
    AddInArray( aFlt, 'CreateDate<' +  Str(ДатаСмены + 1) );
    AddInArray( aFlt, 'ActionType=' + Str(RI.intBase.wsAccepted) );
    with Query.Create([РКП_СИС.ЛогРабот]) do
      Filter = MakeFilter(aFlt);
      Return Count;
    end;
    --AddInArray( aFlt, 'ФункцияГруппы=0' );
    --AddInArray( aFlt, 'not НеПолучен' );
    --AddInArray( aFlt, 'ПринялНаХранение="' + Оператор + '"' );
    --AddInArray( aFlt, 'ДатаПринятияНаХранение>=' + Str(ДатаСмены) );
    --AddInArray( aFlt, 'ДатаПринятияНаХранение<' + Str(ДатаСмены + 1) );
    --with Query.Create([РКП_Газеты.НомерГазеты]) do
    --  Filter = MakeFilter(aFlt);
    --  Return Count;
    --end;
  end;

  func ПринятоНомеровЗаПериод(Оператор :String; ДатаНачала :Date; ДатаОкончания :Date) :Integer; -- (включительно)
    var aFlt :String[];
    AddInArray( aFlt, 'ФункцияГруппы=0' );
    AddInArray( aFlt, 'not НеПолучен' );
    AddInArray( aFlt, 'ПринялНаХранение="' + Оператор + '"' );
    AddInArray( aFlt, 'ДатаПринятияНаХранение>=' + Str(ДатаНачала) );
    AddInArray( aFlt, 'ДатаПринятияНаХранение<' + Str(ДатаОкончания + 1) );
    with Query.Create([РКП_Газеты.НомерГазеты]) do
      Filter = MakeFilter(aFlt);
      Return Count;
    end;
  end;

  func РедактированоНомеровЗаПериод(Оператор :String; ДатаНачала :Date; ДатаОкончания :Date) :Integer; -- (включительно)
    var aFlt :String[];
    AddInArray( aFlt, 'ФункцияГруппы=0' );
    AddInArray( aFlt, 'not НеПолучен' );
    AddInArray( aFlt, 'UpdateUser="' + Оператор + '"' );
    AddInArray( aFlt, 'UpdateDate>=' + Str(ДатаНачала) );
    AddInArray( aFlt, 'UpdateDate<' + Str(ДатаОкончания + 1) );
    with Query.Create([РКП_Газеты.НомерГазеты]) do
      Filter = MakeFilter(aFlt);
      Return Count;
    end;
  end;

  func ПринятоНомеровВсегоЗаПериод(ДатаНачала, ДатаОкончания :Date) :Integer; -- (включительно)
    var aFlt :String[];
    AddInArray( aFlt, 'ФункцияГруппы=0' );
    AddInArray( aFlt, 'Газета<>nil' );
    AddInArray( aFlt, 'not НеПолучен' );
    AddInArray( aFlt, 'ПринялНаХранение<>"Администратор"' );
    AddInArray( aFlt, 'ДатаПринятияНаХранение>=' + Str(ДатаНачала) );
    AddInArray( aFlt, 'ДатаПринятияНаХранение<' + Str(ДатаОкончания + 1) );
    with Query.Create([РКП_Газеты.НомерГазеты]) do
      Filter = MakeFilter(aFlt);
      Return Count;
    end;
  end;

  func ПринятоГазетЗаСмену(Оператор :String; ДатаСмены :Date) :Integer;
    var aFlt :String[];
    AddInArray( aFlt, 'CreateUser="' + Оператор + '"' );
    AddInArray( aFlt, 'CreateDate>=' + Str(ДатаСмены) );
    AddInArray( aFlt, 'CreateDate<' + Str(ДатаСмены + 1) );
    AddInArray( aFlt, 'not ПризнакОтсылки' );
    with Query.Create([РКП_Газеты.Газета]) do
      Filter = MakeFilter(aFlt);
      Return Count;
    end;
  end;

  func ПринятоГазетЗаПериод(Оператор :String; ДатаНачала :Date; ДатаОкончания :Date) :Integer; -- (включительно)
    var aFlt :String[];
    AddInArray( aFlt, 'CreateUser="' + Оператор + '"' );
    AddInArray( aFlt, 'CreateDate>=' + Str(ДатаНачала) );
    AddInArray( aFlt, 'CreateDate<' + Str(ДатаОкончания + 1) );
    AddInArray( aFlt, 'not ПризнакОтсылки' );
    with Query.Create([РКП_Газеты.Газета]) do
      Filter = MakeFilter(aFlt);
      Return Count;
    end;
  end;

  func РедактированоГазетЗаПериод(Оператор :String; ДатаНачала :Date; ДатаОкончания :Date) :Integer; -- (включительно)
    var aFlt :String[];
    AddInArray( aFlt, 'UpdateUser="' + Оператор + '"' );
    AddInArray( aFlt, 'UpdateDate>=' + Str(ДатаНачала) );
    AddInArray( aFlt, 'UpdateDate<' + Str(ДатаОкончания + 1) );
    with Query.Create([РКП_Газеты.Газета]) do
      Filter = MakeFilter(aFlt);
      Return Count;
    end;
  end;

  func ПринятоЕдХраненияЗаСмену(Оператор :String; ДатаСмены :Date) :Integer; -- (включительно)
    var aFlt :String[];
    AddInArray( aFlt, 'RClass="РКП_Газеты.ЕдиницаХранения"' );
    AddInArray( aFlt, 'CreateUser="' + Оператор + '"' );
    AddInArray( aFlt, 'CreateDate>=' +  Str(ДатаСмены) );
    AddInArray( aFlt, 'CreateDate<' +  Str(ДатаСмены + 1) );
    AddInArray( aFlt, 'ActionType=' + Str(RI.intBase.wsRecCreated) );
    with Query.Create([РКП_СИС.ЛогРабот]) do
      Filter = MakeFilter(aFlt);
      Return CalcAggregates('Sum(StoredValI)') as Integer;
    end;
--    var aFlt :String[];
--    AddInArray( aFlt, 'CreateUser="' + Оператор + '"' );
--    AddInArray( aFlt, 'CreateDate>=' + Str(ДатаНачала) );
--    AddInArray( aFlt, 'CreateDate<' + Str(ДатаОкончания + 1) );
--    with Query.Create([РКП_Газеты.ЕдиницаХранения]) do
--      Filter = MakeFilter(aFlt);
--      Return Count;
--    end;
  end;


  func ПринятоЕдХраненияЗаПериод(Оператор :String; ДатаНачала :Date; ДатаОкончания :Date) :Integer; -- (включительно)
    var aFlt :String[];
    AddInArray( aFlt, 'CreateUser="' + Оператор + '"' );
    AddInArray( aFlt, 'CreateDate>=' + Str(ДатаНачала) );
    AddInArray( aFlt, 'CreateDate<' + Str(ДатаОкончания + 1) );
    with Query.Create([РКП_Газеты.ЕдиницаХранения]) do
      Filter = MakeFilter(aFlt);
      Return Count;
    end;
  end;


  func РедактированоЕдХраненияЗаПериод(Оператор :String; ДатаНачала :Date; ДатаОкончания :Date) :Integer; -- (включительно)
    var aFlt :String[];
    AddInArray( aFlt, 'UpdateUser="' + Оператор + '"' );
    AddInArray( aFlt, 'UpdateDate>=' + Str(ДатаНачала) );
    AddInArray( aFlt, 'UpdateDate<' + Str(ДатаОкончания + 1) );
    AddInArray( aFlt, 'CreateDate<' + Str(ДатаНачала) );
    with Query.Create([РКП_Газеты.ЕдиницаХранения]) do
      Filter = MakeFilter(aFlt);
      Return Count;
    end;
  end;

end