class inherited ћашина–еквизитов.Ѕазовые.бл–едактор—»нтерфейсом "—тать€", editor –оспись;

  import —»—2            classes  онстанты;
  import – ѕ_—правочники classes Constants;
  import – ѕ_—»—         classes Functions, StringsFunctions, DateDescription, FilterMaker, Recs, StdCode;

inobject private

--{{ 2_—войства

  var »нтерфейс :– ѕ_—татьи.RI.–оспись;

  var Ќомерѕозиции :Integer[] = $;  --в цел€х оформлени€
  --‘лаги, введенные с целью сократить посто€нно видимую область формы
  var ѕерсоналии¬сеѕол€              :Logical; var ѕерсоналии–аскрыть                 : integer;
  var јвторыЌе”казанные¬сеѕол€       :Logical;
  var ”частникиЅесед¬сеѕол€          :Logical;
  var –едакторы¬сеѕол€               :Logical;
  var ѕереводчики¬сеѕол€             :Logical;
  var јвторы¬ступ—татей¬сеѕол€       :Logical;
  var јвторыЋитќбработки¬сеѕол€      :Logical;
  var »ллюстраторы¬сеѕол€            :Logical;
  var јвторы»нсценировок¬сеѕол€      :Logical;
  var јвторыѕрочие¬сеѕол€            :Logical;
  var Ёкспорт– ѕƒанные               :String[]; -- переменна€, используема€ при вычислении
                                                -- массива, описывающего входной формат – ѕ.
                                                -- в запись результат вливаетс€ только
                                                -- после построчного сравнени€
  var —татусѕодготовка               :Logical;  -- флаг, объедин€ющий несколько признаков
                                                -- статуса готовности документа
  var ƒатаЌачалаЌомера—тр            :String;   -- строковое представление даты начала номера
                                                -- в формате, приближенном к библиографическому
  --  нопки, управл€ющие значени€ми пол€ "“очностьƒаты¬ыхода" дл€ каждого номера.
  -- ¬ведены, поскольку удобнее, чем флаги
  var “очностьƒатыЌачалаЌомераƒень  :Logical;
  var “очностьƒатыЌачалаЌомераћес€ц :Logical;
  var “очностьƒаты¬ыходаƒень        :Logical[];
  var “очностьƒаты¬ыходаћес€ц       :Logical[];
  var ƒата¬ыхода—тр                 :String[]; -- строковое представление даты выхода
                                               -- в формате, приближенном к библиографическому
  var Ѕланк«акрываетс€ :Logical;
  var  ¬—0 :Logical;
  var  ¬—1 :Logical;
  var  ¬—2 :Logical;

  ------------ќЅЏ≈ “џ ЎјЅЋќЌј--------------------------------------------------
  фрейм»ндјвторы          :TemplateFrame;
  фреймјвторы2            :TemplateFrame;

  кнќтменить              :Button;

  секц√азета1             :Section;
  секц√азета2             :Section;
  секц√азета3             :Section;
  секц√азета4             :Section;
  секц√азета5             :Section;
  секц√азета6             :Section;
  секцЌачалоЌомера        :Section;
  секцЌомера√азеты        :Section;
  —екцќбщее01             :Section;
  —екцќбщее02             :Section;
  —екцќбщее03             :Section;
  секц¬ыпускЋетописи1     :Section;
  секц¬ыпускЋетописи2     :Section;
  секц¬ыпускЋетописи3     :Section;
  секц¬ыпуск арточки1     :Section;
  секц¬ыпуск арточки2     :Section;
  секц¬ыпуск арточки3     :Section;

  —екцќсновныеѕол€01      :Section;
  —екцќсновныеѕол€02      :Section;
  —екцќсновныеѕол€03      :Section;

  секц¬ыпуски1            :Section;
  секц¬ыпуски2            :Section;
  —екцјвтор1              :Section;
  —екцјвтор2              :Section;
  —екцјвтор3              :Section;
  —екцјвтор4              :Section;
  секцѕостќрг1            :Section;
  секцѕостќрг2            :Section;
  секцѕостќрг3            :Section;
  секцѕостќрг4            :Section;
  секцѕостќрг5            :Section;
  секцѕостќрг6            :Section;
  секцѕостќрг7            :Section;
  секцѕостќрг8            :Section;
  секцѕостќрг9            :Section;
  секц¬ремќрг1            :Section;
  секц¬ремќрг2            :Section;
  секц¬ремќрг3            :Section;
  секц¬ремќрг4            :Section;
  секц¬ремќрг5            :Section;
  секц¬ремќрг6            :Section;
  секц¬ремќрг7            :Section;
  секц¬ремќрг8            :Section;
  секц¬ремќрг9            :Section;

  секц–б”дк1              :Section;
  секц–б”дк2              :Section;

  секц–бЅбк1              :Section;
  секц–бЅбк2              :Section;

  секц¬“–1                :Section;
  секц¬“–2                :Section;
  секц–б√ео1              :Section;
  секц–б√ео2              :Section;

  секц—ери€1              :Section;
  секц—ери€2              :Section;
  секц—ери€3              :Section;

  секц–б—ери€1            :Section;
  секц–б—ери€2            :Section;

  секцѕрим1               :Section;
  секцѕрим2               :Section;
  секцѕрим3               :Section;
  секцѕрим4               :Section;
  секцѕрим5               :Section;
  секцѕрим6               :Section;

  —екцќтветственность0    :Section; --Ќадзаголовок
  —екцќтветственность1    :Section;
  —екцќтветственность2    :Section;
  секцѕерсоналии1         :Section;
  секцѕерсоналии2         :Section;
  секцјвторыЌе”казанные1  :Section;
  секцјвторыЌе”казанные2  :Section;
  секц”частникиЅесед1     :Section;
  секц”частникиЅесед2     :Section;
  секц–едакторы1          :Section;
  секц–едакторы2          :Section;
  секцѕереводчики1        :Section;
  секцѕереводчики2        :Section;
  секцјвторы¬ступ—татей1  :Section;
  секцјвторы¬ступ—татей2  :Section;
  секцјвторыЋитќбработки1 :Section;
  секцјвторыЋитќбработки2 :Section;
  секц»ллюстраторы1       :Section;
  секц»ллюстраторы2       :Section;
  секцјвторы»нсценировок1 :Section;
  секцјвторы»нсценировок2 :Section;
  секцјвторыѕрочие1       :Section;
  секцјвторыѕрочие2       :Section;
  секцBChMarc             :Section;

  ‘лѕодготовка            :CheckBox;
  ‘л¬ключено√л            :CheckBox;
  ‘л¬ключеноѕ             :CheckBox;
  –едƒата«аписи¬‘айл√Ћ    :Edit;
  –едƒата«аписи¬‘айлѕ     :Edit;
  –едDocId                :Edit;
  –едЌомер¬Ћетописи       :Edit;
  –едЌомерѕ               :Edit;

--}}


-- 2_ онструкторы, визуализаторы0. --


-- 2_ќбработчики событий шаблона0. --

  proc шаблон_ѕриќткрытии(Create :Logical);
    inherited шаблон_ѕриќткрытии(Create);
    if (Record.Ќомера√азеты.Count = nil) or (Record.Ќомера—траниц—татьи = nil) then
      Template.CurrentFrame = Template.FrameByName['фрейм»здание'];
    else
      Template.CurrentFrame = Template.FrameByName['фреймќсновныеѕол€'];
    fi;
  end;

  proc шаблон_ѕри—читывании;
    var k :integer;
    var Ќомера¬ыхода_ :string[];
    inherited шаблон_ѕри—читывании;
    -- «апрещение объектов
    ‘лѕодготовка.Enabled         = false;
    ‘л¬ключено√л.Enabled         = false;
    ‘л¬ключеноѕ .Enabled         = false;
    –едƒата«аписи¬‘айл√Ћ.Enabled = false;
    –едƒата«аписи¬‘айлѕ .Enabled = false;
    –едDocId.Enabled             = false;
    –едЌомер¬Ћетописи.Enabled    = false;
    –едЌомерѕ .Enabled           = false;
    if —татус√Ћ or —татусѕ  then
      —татусѕодготовка = false;
    else
      —татусѕодготовка = true;
    fi;
    --
    for k = 2 .. 4 do секцѕерсоналии2.Row[k].visible=false;         od;
    for k = 2 .. 4 do секцјвторыЌе”казанные2.Row[k].visible=false;  od;
    for k = 2 .. 4 do секц”частникиЅесед2.Row[k].visible=false;     od;
    for k = 2 .. 4 do секц–едакторы2.Row[k].visible=false;          od;
    for k = 2 .. 4 do секцѕереводчики2.Row[k].visible=false;        od;
    for k = 2 .. 4 do секцјвторы¬ступ—татей2.Row[k].visible=false;  od;
    for k = 2 .. 4 do секцјвторыЋитќбработки2.Row[k].visible=false; od;
    for k = 2 .. 4 do секц»ллюстраторы2.Row[k].visible=false;       od;
    for k = 2 .. 4 do секцјвторы»нсценировок2.Row[k].visible=false; od;
    for k = 2 .. 4 do секцјвторыѕрочие2.Row[k].visible=false;       od;
    --
    ¬ид“очностиƒат¬ыхода;
    ¬ид«аголовкаќкна;
    ------
    секц√азета1.Cell[1,3].Contents             = SymbolCollapsed;
    —екцјвтор3.Cell[1,1].Contents              = SymbolCollapsed;
    секцѕостќрг4.Cell[2,1].Contents            = SymbolCollapsed;
    секц¬ремќрг4.Cell[2,1].Contents            = SymbolCollapsed;
    секц¬“–1.Cell[1,3].Contents                = SymbolCollapsed;
    секц–бЅЅ 1.Cell[1,3].Contents              = SymbolCollapsed;
    секц–б√ео1.Cell[1,3].Contents              = SymbolCollapsed;
    --секц–б—ери€1.Cell[1,3].Contents            = "+";
    секц—ери€1.Cell[1,3].Contents              = SymbolCollapsed;
    секцѕрим1.Cell[1,3].Contents               = SymbolCollapsed;
    --
    секцѕерсоналии1.Cell[1,3].Contents         = SymbolCollapsed;
    секцјвторыЌе”казанные1.Cell[1,3].Contents  = SymbolCollapsed;
    секц”частникиЅесед1.Cell[1,3].Contents     = SymbolCollapsed;
    секц–едакторы1.Cell[1,3].Contents          = SymbolExpanded;
    секцѕереводчики1.Cell[1,3].Contents        = SymbolCollapsed;
    секцјвторы¬ступ—татей1.Cell[1,3].Contents  = SymbolCollapsed;
    секцјвторыЋитќбработки1.Cell[1,3].Contents = SymbolExpanded;
    секц»ллюстраторы1.Cell[1,3].Contents       = SymbolCollapsed;
    секцјвторы»нсценировок1.Cell[1,3].Contents = SymbolCollapsed;
    секцјвторыѕрочие1.Cell[1,3].Contents       = SymbolCollapsed;
    --
    ¬ид—крываемых—екций;
    --
    --ѕозиционирование фреймов в зависимости от состо€ни€ записи и доп. обработка дат
    if (Record.State = Record.Created) then
      for k = 1 .. секцЌомера√азеты.Count do
        Ќомера¬ыхода_[k] = Ќомера√азеты[k].Ќомер;
      od;
      Ќомера¬ыхода = ќписаниеЌомеров.¬—троку(√азета,Ќомера¬ыхода_);
      ƒаты¬ыхода = ќписаниеƒат.¬—троку(ƒатаЌачалаЌомера,
                                       Ќомера√азеты[секцЌомера√азеты.Count].ƒата¬ыхода,
                                       “очностьƒатыЌачалаЌомера,
                                       Ќомера√азеты[секцЌомера√азеты.Count].“очностьƒаты¬ыхода
                                       );
      Template.CurrentFrame = Template.FrameByName["фрейм»здание"];
      Template.CurrentCell  = Template.CurrentFrame.CellByField["Ќомера—траниц—татьи"];
    else
      if (Template.CurrentFrame.ParentFrame.Name in ["фреймќсновныеѕол€","фрейм атегори€ќтветственности","фреймѕодробно"]) then
        if    ( атегори€ќтветственности = 0) then Template.CurrentFrame = Template.FrameByName["фрейм»ндјвторы"];
        elsif ( атегори€ќтветственности = 1) then Template.CurrentFrame = Template.FrameByName["фреймѕостќрг"];
        elsif ( атегори€ќтветственности = 2) then Template.CurrentFrame = Template.FrameByName["фрейм¬ремќрг"];
        fi;
      fi;
    fi;
    -----
    ¬ид нопок ¬—;
    -----
    if SessionInfo.UserRecord.FullAccess then
      ‘ормированиеЅиб«аписи;
      ‘ормирование¬ходного‘ормата– ѕ;
    fi;
    кнќтменить.Enabled = true;
  end;

  func Ўаблон_ѕриѕроверке :Logical;
    var k, z :Integer;
    Result = true;
    for k = 1..секцЌомера√азеты.Count                   do
      if  Result        = true                          then
        if »мпорт– ѕ = false                            then
        if Ќомера√азеты[k].Ќомер=nil                    or
           Ќомера√азеты[k].ƒата¬ыхода=nil               then
           Result       = false;
        end;
        else
        if Ќомера√азеты[k].ƒата¬ыхода=nil               then
           Result       = false;
        end;
        end;
      else
        Break;
      end;
    end;
    if Result           = false                         then
      Message('ѕожалуйста, опишите номер(а) газеты!');
      Template.CurrentFrame             = Template.FrameByName["фрейм»здание"];
      Template.CurrentCell              = секцЌомера√азеты.CellByField["√од¬ыпуска"];
    else
    end;
    if Result = true                                    then
      if »ндекс”ƒ .Count=nil                            then
        Result = false;
        Message('ѕожалуйста, введите классификационный индекс ”ƒ !');
        Template.CurrentFrame           = Template.FrameByName["фреймќсновныеѕол€"];
        Template.CurrentCell            = Template.CellByField["–убрика”ƒ . од"];
      end;
    end;
    if Result = true                                    then
      if »ндексЅЅ .Count<>nil and ƒата арточек=nil      then
        Result = false;
        Message('ѕожалуйста, введите дату формировани€ ѕ !');
        Template.CurrentFrame           = Template.FrameByName["фреймќсновныеѕол€"];
        Template.CurrentCell            = Template.CellByField["–убрикаЅЅ . од"];
      end;
    end;
    if Result = true                                    then
      if »ндексЅЅ .Count=nil and ƒата арточек<>nil      then
        Result = false;
        Message('ѕожалуйста, введите классификационный индекс ЅЅ !');
        Template.CurrentFrame           = Template.FrameByName["фреймќсновныеѕол€"];
        Template.CurrentCell            = Template.CellByField["–убрикаЅЅ . од"];
      end;
    end;

    if Result = true                                    then
      if »ндексЅЅ .Count>0                              then
        for z = 1..»ндексЅЅ .Count                      do
          if  »ндексЅЅ .Items[z].–убрикаЅЅ . од=nil  then
            Result = false;
            Message('ѕожалуйста, введите классификационный индекс ЅЅ ! (ѕозици€ '+str(z)+')');
            Break;
          end;
        end;
        Template.CurrentFrame           = Template.FrameByName["фреймќсновныеѕол€"];
        Template.CurrentCell            = Template.CellByField["–убрикаЅЅ . од"];
      end;
    end;

    if Result = true                                    then
      if »ндекс”ƒ .Count>0                              then
        for z = 1..»ндекс”ƒ .Count                      do
          if  »ндекс”ƒ .Items[z].–убрика”ƒ . од=nil  then
            Result = false;
            Message('ѕожалуйста, введите классификационный индекс ”ƒ ! (ѕозици€ '+str(z)+')');
            Break;
          end;
        end;
        Template.CurrentFrame           = Template.FrameByName["фреймќсновныеѕол€"];
        Template.CurrentCell            = Template.CellByField["–убрика”ƒ . од"];
      end;
    end;
    Ѕланк«акрываетс€=Result;
    if SessionInfo.UserRecord.FullAccess then
      ‘ормированиеЅиб«аписи;
      ‘ормирование¬ходного‘ормата– ѕ;
    fi;
    if Result then
      Result = inherited шаблон_ѕриѕроверке;
    fi;
  end;


-- 2_ќбработчики событий клеток шаблона0. --


  func ѕоле_ѕри¬ходе(Cell :TemplateCell; Index :Integer; Action :Template.EnterTypes) :Logical;
    -- ¬ременна€ тематическа€ рубрика --
    if (Cell.Contents = '»ндекс¬“–. рЌаим') then
      Cell.LookupFilter = '¬ременна€';
    elsif (Cell.Contents = 'ѕод–убрика—ист. рЌаим') then
      Cell.LookupFilter = 'ѕодрубрика';
    fi;
    Return true;
  end;


  func ѕоле_ѕриЌажатии(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
   var Q1               : Query;
   var sr,ћесто»здани€_ : string;
   var R,r2             : record;
   var k2,k             : integer;
   var index            : integer;
   var Ќомера¬ыхода_[]  : string;
   var м»мена—екцийѕерсоналий :String[]; -- просто длинный список
    --==подготовка==--
    Result = True;
    Template.CurrentSection                 =   Cell.Owner;             --установление текущей секции через вычисление владельца клетки
    if Template.CurrentSection.Count=0 then                             --вычисление количества позиций в подтаблице (т.к. разрешено ручное управление и на экране может быть одна строка при 0 записей)
                                      index = 1;                        --index - это номер новой позиции в подтаблице
    else                                                                --1  - если позиций вообще нет и
                                      index = Cell.Frame+1;             --+1 - если есть хоть одна позици€
    end;
    Template.CurrentCell                    =    Cell;                  --позиционирование селектора на поле-"кнопке"
    м»мена—екцийѕерсоналий = ['секцѕерсоналии1','секцјвторыЌе”казанные1','секц”частникиЅесед1','секц–едакторы1','секцѕереводчики1',
                              'секцјвторы¬ступ—татей1','секцјвторыЋитќбработки1','секц»ллюстраторы1','секцјвторы»нсценировок1','секцјвторыѕрочие1'];

    --==выполнение по условию==--
    if     Cell.Owner.Name              = "2секц√азета10"         and     --услови€ на им€ секции
           Cell.Contents                = 2"ќбновить" 0           then    --(доп. условие на содержимое клетки)
      --..........ќбновление полей, описывающих газету..........--
      if —татусѕодготовка               = true                  then
        if √азета<>nil                                          then
          Ќазваниеќсн                   = √азета.ЌазваниеЋ√—;
          ѕодзаголовок                  = √азета.ѕодзаголовок;
          –егЌомер                      = √азета.–егЌомер;
          ISSN                          = √азета.ISSN;
           од»здани€                    = √азета. од»здани€;
          --¬ычисление места издани€
          ћесто»здани€                  = "";
          sr                            = SubStr(Str(√азета),
                                        Pos(":",Str(√азета))+1,Pos("}",Str(√азета))-
                                        Pos(":",Str(√азета))-1);
          Q1                            = Query.Create([– ѕ_√азеты.√азета]);
          Q1.Filter                     = "DocId = "+sr;
          Q1.LoadingFields              = "ћеста»здани€";
          Q1.Select;
          r2                            = Q1.Current;
          ћесто»здани€                  = "";
          for k2 = 1..Int(r2.ћеста»здани€.Count)        do
            if    k2 = 1                                        then
              ћесто»здани€_             = Str(r2.ћеста»здани€.Items[k2].ћесто»здани€.Ќаим);
            else
              ћесто»здани€_             = ћесто»здани€_+" ; "+Str(r2.ћеста»здани€.Items[k2].ћесто»здани€.Ќаим);
            end;
          end;
          ћесто»здани€                  = ћесто»здани€_;
        else
          Message('«апись испорчена или создана ренее 01.09.2008 г.: отсутствует ссылка на зарегистрированное издание.');
        end;
      else
      Message('«апись уже включена в "Ћетопись". »зменени€ невозможны.');
      end;
      Return True;
    elsif  Cell.Owner.Name              = "2секцЌомера√азеты0"    then
      --..........ƒобавление/удаление номеров газет..........--
      if     Cell.Contents              = "2+0"                   then
      --..........ƒобавление..........--
        Template.CurrentSection.InsertFrame(index);
--        if Template.CurrentSection.Count > 1                    then
--          Ќомера√азеты[index].√од¬ыпуска = Ќомера√азеты[index-1].√од¬ыпуска;
--        end;
        Template.CurrentCell            = Cell;
        if  Template.CurrentSection.Count<2                     then  ExecuteCommand("Kernel.Move.Right");
        else                                                          ExecuteCommand("Kernel.Move.Down");
        fi;
        ¬ид“очностиƒат¬ыхода;
        Return False;
      elsif  Cell.Contents              = "2-0"                   then
      --..........”даление..........--
        --ѕри удалении номера анализируетс€ реестр номеров, формируемый отделом –√ по ссылке.
        -- ритерии анализа - ссылка, положительный флаг "—озданќЋ√—" и нулевое поле "ѕрин€лЌа’ранение".
        --ѕри положительном анализе найденна€ запись удал€етс€ вместе с позицией.
        --ѕри отрицательном - удал€етс€ только позици€.
        -- роме того, необходимо по новому обрабатывать описание диапазона дат и номеров
        if Record.Ќомера√азеты.Count > 0                        then
          if Record.Ќомера√азеты.Count = 1                      then
            ƒатаЌачалаЌомера = nil;
            ƒаты¬ыхода       = nil;
            Ќомера¬ыхода     = nil;
            “очностьƒатыЌачалаЌомера = 0;
          end;
          index = Cell.Frame;
          R                               = Ќомера√азеты[index].Ќомер√азеты;
          if R.—озданќЋ√— = true                                and
             R.ѕрин€лЌа’ранение = nil                           and
             R.ƒатаѕрин€ти€Ќа’ранение = nil                     then
             if R.Deleted = false then
               R.Delete;
             end;
             Message('¬нимание! ѕозици€, удаленна€ ¬ами, содержит информацию о номере, '+
                     'не прошедшем регистрацию в секторе регистрации газет. ≈сли ¬ы '+
                     'удалили позицию ошибочно, следует ввести удаленную строку повтороно. '+
                     'ƒо этого кнопка "отменить изменени€" будет заблокирована!');
             кнќтменить.Enabled = false;
          end;
          Template.CurrentCell            = Cell;
          if Template.CurrentSection.Count>0                    then
            Template.CurrentSection.DeleteFrame(index);
            --ѕовторна€ переработка дат выпуска и номеров
            if  Record.Ќомера√азеты.Count>0 then
              --¬ычисление даты начала номера
              --ќбработка диапазона дат
              if Ќомера√азеты[1].ƒата¬ыхода<>nil                then
                ƒатаЌачалаЌомера = ќписаниеƒат.ЌачалоЌомера(R.√азета,Ќомера√азеты[1].ƒата¬ыхода);
                ƒаты¬ыхода = ќписаниеƒат.¬—троку(ƒатаЌачалаЌомера,
                                                 Ќомера√азеты[секцЌомера√азеты.Count].ƒата¬ыхода,
                                                 “очностьƒатыЌачалаЌомера,
                                                 Ќомера√азеты[секцЌомера√азеты.Count].“очностьƒаты¬ыхода
                                                 );
              end;
              --ќбработка диапазона номеров
              for k = 1..секцЌомера√азеты.Count do
                Ќомера¬ыхода_[k]  = Ќомера√азеты[k].Ќомер;
              end;
              Ќомера¬ыхода  = ќписаниеЌомеров.¬—троку(√азета,Ќомера¬ыхода_);
            end;
          end;
          ¬ид“очностиƒат¬ыхода;
          Return False;
        else
          ƒатаЌачалаЌомера = nil;
          ƒаты¬ыхода       = nil;
          Ќомера¬ыхода     = nil;
          “очностьƒатыЌачалаЌомера = 0;
          ¬ид“очностиƒат¬ыхода;
          Return False;
        end;
      elsif  Cell.Caption = "ƒень" or Cell.Caption = "ћес€ц"    then
      --..........”правление точностью даты выпуска номера..........--
        if Template.CurrentSection.Count >0                     then
          index = Cell.Frame;
          if  Ќомера√азеты[index].“очностьƒаты¬ыхода  = 0       then
            Ќомера√азеты[index].“очностьƒаты¬ыхода = 1;
          else
            Ќомера√азеты[index].“очностьƒаты¬ыхода = 0;
          end;
        end;
        ¬ид“очностиƒат¬ыхода;
        if Ќомера√азеты[index].Ќомер√азеты<>nil                 then
          ќбработкаЌомера√азеты–√(index,Ќомера√азеты[index].Ќомер√азеты);
        end;
        if index > 0 and Ќомера√азеты[index].ƒата¬ыхода<>nil    then
          ƒаты¬ыхода = ќписаниеƒат.¬—троку(ƒатаЌачалаЌомера,
                                           Ќомера√азеты[секцЌомера√азеты.Count].ƒата¬ыхода,
                                           “очностьƒатыЌачалаЌомера,
                                           Ќомера√азеты[секцЌомера√азеты.Count].“очностьƒаты¬ыхода
                                           );
        end;
        Return False;
      end;--конец условий на номера полей
    elsif  Cell.Owner.Name              = "2секцЌачалоЌомера0"    then
      --..........”правление точностью даты начала номера..........--
      if  “очностьƒатыЌачалаЌомера = 0                          then
          “очностьƒатыЌачалаЌомера = 1;
      else
          “очностьƒатыЌачалаЌомера = 0;
      end;
      ¬ид“очностиƒат¬ыхода;
      if Ќомера√азеты[index].Ќомер√азеты<>nil                   then
        ќбработкаЌомера√азеты–√(index,Ќомера√азеты[index].Ќомер√азеты);
      end;
      ƒаты¬ыхода = ќписаниеƒат.¬—троку(ƒатаЌачалаЌомера,
                                       Ќомера√азеты[секцЌомера√азеты.Count].ƒата¬ыхода,
                                       “очностьƒатыЌачалаЌомера,
                                       Ќомера√азеты[секцЌомера√азеты.Count].“очностьƒаты¬ыхода
                                       );
      Return False;

      --..........–аскрытие/закрытие разделов бланка..........--
    elsif  Cell.Owner.Name = "секц√азета1" and (Cell.Contents = SymbolCollapsed or  Cell.Contents = SymbolExpanded) then
      if   Cell.Owner.Cell[1,3].Contents = SymbolCollapsed then
        Cell.Owner.Cell[1,3].Contents = SymbolExpanded;
      else
        Cell.Owner.Cell[1,3].Contents = SymbolCollapsed;
      end;
      ¬ид—крываемых—екций;
    --  управление выпуском ѕ ................................--
    elsif (Cell.Owner.Name= "секц¬ыпуск арточки1") and (Cell.Contents = SymbolCollapsed or Cell.Contents = SymbolExpanded) then
      if (Cell.Owner.Cell[1,3].Contents = SymbolCollapsed) then
        if (—татусѕ  = false) and (—татус√Ћ = false) then
          Cell.Owner.Cell[1,3].Contents = SymbolExpanded;
        fi;
      else                                                           
        if (—татусѕ  = false) and (—татус√Ћ = false) then
          Cell.Owner.Cell[1,3].Contents = SymbolCollapsed;
        fi;
      fi;
      ¬ид—крываемых—екций;
    --end управление выпуском ѕ ..............................--
    elsif (Cell.Owner.Name = '—екцјвтор3') then
      if (Cell.Owner.Cell[1,1].Contents = SymbolCollapsed)      then Cell.Owner.Cell[1,1].Contents = SymbolExpanded;
      else                                                           Cell.Owner.Cell[1,1].Contents = SymbolCollapsed;
      fi;
      ¬ид—крываемых—екций;
    elsif (Cell.Owner.Name = '—екцѕостќрг4') then
      if (Cell.Owner.Cell[2,1].Contents = SymbolCollapsed)      then Cell.Owner.Cell[2,1].Contents = SymbolExpanded;
      else                                                           Cell.Owner.Cell[2,1].Contents = SymbolCollapsed;
      fi;
      ¬ид—крываемых—екций;
    elsif (Cell.Owner.Name = '—екц¬ремќрг4') then
      if (Cell.Owner.Cell[2,1].Contents = SymbolCollapsed)      then Cell.Owner.Cell[2,1].Contents = SymbolExpanded;
      else                                                           Cell.Owner.Cell[2,1].Contents = SymbolCollapsed;
      fi;
      ¬ид—крываемых—екций;
    elsif (Cell.Owner.Name = 'секц¬“–1') then
      if (Cell.Owner.Cell[1,3].Contents = SymbolCollapsed)      then Cell.Owner.Cell[1,3].Contents = SymbolExpanded;
      else                                                           Cell.Owner.Cell[1,3].Contents = SymbolCollapsed;
      fi;
      ¬ид—крываемых—екций;
    elsif (Cell.Owner.Name = 'секц–бЅЅ 1') then
      if (Cell.Owner.Cell[1,3].Contents = SymbolCollapsed)      then Cell.Owner.Cell[1,3].Contents = SymbolExpanded;
      else                                                           Cell.Owner.Cell[1,3].Contents = SymbolCollapsed;
      fi;
      ¬ид—крываемых—екций;
    elsif (Cell.Owner.Name = 'секц–б√ео1') then
      if (Cell.Owner.Cell[1,3].Contents = SymbolCollapsed)      then Cell.Owner.Cell[1,3].Contents = SymbolExpanded;
      else                                                           Cell.Owner.Cell[1,3].Contents = SymbolCollapsed;
      fi;
      ¬ид—крываемых—екций;
    elsif (Cell.Owner.Name = 'секц—ери€1') then
      if   Cell.Owner.Cell[1,3].Contents = SymbolCollapsed then  Cell.Owner.Cell[1,3].Contents = SymbolExpanded;
      else                                                       Cell.Owner.Cell[1,3].Contents = SymbolCollapsed;
      fi;
      ¬ид—крываемых—екций;
    elsif (Cell.Owner.Name = 'секцѕрим1') then
      if (Cell.Owner.Cell[1,3].Contents = SymbolCollapsed) then  Cell.Owner.Cell[1,3].Contents = SymbolExpanded;
      else                                                       Cell.Owner.Cell[1,3].Contents = SymbolCollapsed;
      fi;
      ¬ид—крываемых—екций;
      --..........–аскрытие/закрытие персоналий..........--
    elsif (Cell.Owner.Name in м»мена—екцийѕерсоналий) and (Cell.Contents in [SymbolCollapsed,SymbolExpanded]) then
      if (Cell.Owner.Cell[1,3].Contents = SymbolCollapsed) then
        Cell.Owner.Cell[1,3].Contents = SymbolExpanded;
      else
        Cell.Owner.Cell[1,3].Contents = SymbolCollapsed;
      fi;
      ¬ид—крываемых—екций;
    --..........‘ормирование сведений об ответственности..........--
    elsif  Cell.Owner.Name          = "—екцќтветственность1"    then
      ‘ормированиеѕервых—веденийќтветственности;
    elsif  Cell.Owner.Name          = "—екцќтветственность2"    then
      ‘ормированиеѕослед—веденийќтветственности;
    --.......... + формирование примечаний.......................--
    elsif  Cell.Owner.Name          = "секцјвторыѕрочие1"       and
           Cell.Contents            = "√"                       then --"стрелка вниз и влево" в шрифте Wingdings
       ‘ормированиеѕримечани€ќбјвторах;
       ¬ѕримечани€х = true;
       ‘ормированиеѕослед—веденийќтветственности;
    end;                                                                --конец условий на им€ секции
    Return Result;
  end;

  func ѕоле_ѕриЌажатии_‘амили€(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
    var –ешение                         : integer;
    var NewRec                          : record;
    var Q                               : Query;
    var ‘амили€_,»нициалы_              : string;
    var »м€_,ќтчество_                  : string;
    var CardForSelect                   : CardForm;
    --попытка поиска записи, котора€ должна быть текущей при открытии справочника
    ‘амили€_    = Cell.Owner.Cell[Cell.Column-1,Cell.Row].Value;
    »нициалы_   = Cell.Owner.Cell[Cell.Column+2,Cell.Row].Value;
    if  ‘амили€_<>""            then          --фамили€ непуста€
      Q                 = Query.Create([– ѕ_—правочники.—прЋица]);
      if »нициалы_=""           then
        Q.Filter        = 'Match(Ќаим,"'+‘амили€_+'*")';
      else
        Q.Filter        = 'Match(Ќаим,"'+‘амили€_+'") and Match(»нициалы,"'+»нициалы_+'")';
      end;
      Q.Select;
      if Q.Count>0              then
        Q.First;
        NewRec        = Q.Current;
      else
        Q.Filter      = 'Match(Ќаим,"'+SubStr(‘амили€_,1,4)+'*")';
        if Q.Count>0            then
          Q.First;
          NewRec      = Q.Current;
        else
          Q.Filter    = 'Match(Ќаим,"'+SubStr(‘амили€_,1,3)+'*")';
          if Q.Count>0          then
            Q.First;
            NewRec    = Q.Current;
          else
            Q.Filter  = 'Match(Ќаим,"'+SubStr(‘амили€_,1,2)+'*")';
            if Q.Count>0        then
              Q.First;
              NewRec  = Q.Current;
            else
              Q.Filter= 'Match(Ќаим,"'+SubStr(‘амили€_,1,1)+'*")';
              if Q.Count>0      then
                Q.First;
                NewRec  = Q.Current;
              end;
            end;
          end;
        end;
      end;
      Q.Close;
    end;
    --открытие справочника без фильтра
    CardForSelect               = – ѕ_—правочники.—правочники.картЋица.Create;
    CardForSelect.‘рагмент      = "";
    –ешение                     = CardForSelect.ShowEx(NewRec,"",Window.ModalWindow);
    if  –ешение                 = CmOk then
    Template.CurrentSection                 =   Cell.Owner;             --установление текущей секции через вычисление владельца клетки
    if    Cell.Owner.Name = "секцѕерсоналии2"           then    if Record.ѕерсоналии.Count              = 0 then  Template.CurrentSection.InsertFrame(1); end;
    elsif Cell.Owner.Name = "секцјвторыЌе”казанные2"    then    if Record.јвторыЌе”казанные.Count       = 0 then  Template.CurrentSection.InsertFrame(1); end;
    elsif Cell.Owner.Name = "секц”частникиЅесед2"       then    if Record.”частникиЅесед.Count          = 0 then  Template.CurrentSection.InsertFrame(1); end;
    elsif Cell.Owner.Name = "секц–едакторы2"            then    if Record.–едакторы.Count               = 0 then  Template.CurrentSection.InsertFrame(1); end;
    elsif Cell.Owner.Name = "секцѕереводчики2"          then    if Record.ѕереводчики.Count             = 0 then  Template.CurrentSection.InsertFrame(1); end;
    elsif Cell.Owner.Name = "секцјвторы¬ступ—татей2"    then    if Record.јвторы¬ступ—татей.Count       = 0 then  Template.CurrentSection.InsertFrame(1); end;
    elsif Cell.Owner.Name = "секцјвторыЋитќбработки2"   then    if Record.јвторыЋитќбработки.Count      = 0 then  Template.CurrentSection.InsertFrame(1); end;
    elsif Cell.Owner.Name = "секц»ллюстраторы2"         then    if Record.»ллюстраторы.Count            = 0 then  Template.CurrentSection.InsertFrame(1); end;
    elsif Cell.Owner.Name = "секцјвторы»нсценировок2"   then    if Record.јвторы»нсценировок.Count      = 0 then  Template.CurrentSection.InsertFrame(1); end;
    elsif Cell.Owner.Name = "секцјвторыѕрочие2"         then    if Record.јвторыѕрочие.Count            = 0 then  Template.CurrentSection.InsertFrame(1); end;
    end;
    --выбор
      Cell.Owner.Cell[Cell.Column-1,Cell.Row].Value     = NewRec.Ќаим;
      Cell.Owner.Cell[Cell.Column+2,Cell.Row].Value     = NewRec.»нициалы;
      if Cell.Owner.Name<>"—екцјвтор2"                  then
      Cell.Owner.Cell[Cell.Column+2,Cell.Row+1].Value   = NewRec.„астица;
      end;
      ‘амили€_                                          = NewRec.Ќаим;
      »нициалы_                                         = NewRec.»нициалы;
      »м€_                                              = NewRec.»м€;
      ќтчество_                                         = NewRec.ќтчество;
    --—охранение полного »мени (»мени и ќтчества) в главной записи в зависимости от имени секции
      if Cell.Owner.Name = "—екцјвтор2"         then  
        јвтор»м€                = »м€_;
        јвторќтчество           = ќтчество_;
      end;
    --ќпределение имени секции и формирование заголовка биб.записи
    if    Cell.Owner.Name <> "—екцјвтор2"               then
      ‘ормированиеѕослед—веденийќтветственности;
    end;
      Return True;
    else
    --отказ от выбора
      Return False;
    end;
  end;

  func ѕоле_ѕриЌажатии_—кобок(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
    if    Cell.Owner.Name="—екцќсновныеѕол€02"          then
      Template.CurrentCell = Template.CellByField[" раткое—одержание—татьи"];
      —ервис. ¬—;
    elsif Cell.Owner.Name="—екцќтветственность1"        then
      Template.CurrentCell = Template.CellByField["ќтветственность1"];
      —ервис. ¬—;
    elsif Cell.Owner.Name="—екцќтветственность2"        then
      Template.CurrentCell = Template.CellByField["ќтветственность2"];
      —ервис. ¬—;
    end;
    ¬ид нопок ¬—;
    Return False;
  end;

  func ѕоле_ѕриЌажатии_ƒобавить–убрику1(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
    var index:integer;
    Template.CurrentSection                             =   Cell.Owner;
    if Template.CurrentSection.Count=0  then    index   = 1;
    else                                        index   = Cell.Frame+1;
    end;
    Template.CurrentSection.InsertFrame(index);
    Template.CurrentCell                    =    Cell;
    if  Template.CurrentSection.Count<2 then    ExecuteCommand("Kernel.Move.Right");
    else                                        ExecuteCommand("Kernel.Move.Down");ExecuteCommand("Kernel.Move.Down");
    fi;
    Return false;
  end;

  --func ѕоле_ѕриЌажатии_ƒобавить–убрику2(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
  --  Return ƒобавить—ерию(Cell,Action);
  --end;

  func ѕоле_ѕриЌажатии_ƒобавитьјвтора(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
    var index:integer;
    var ¬сеѕол€:logical;
    Template.CurrentSection                 =   Cell.Owner;             --установление текущей секции через вычисление владельца клетки
    if Template.CurrentSection.Count=0 then                             --вычисление количества позиций в подтаблице (т.к. разрешено ручное управление и на экране может быть одна строка при 0 записей)
                                      index = 1;                        --index - это номер новой позиции в подтаблице
    else                                                                --1  - если позиций вообще нет и
                                      index = Cell.Frame+1;             --+1 - если есть хоть одна позици€
    end;
    Template.CurrentSection.InsertFrame(index);                         --собственно вставка позиции
    Template.CurrentCell                    =    Cell;                  --позиционирование селектора на поле-"кнопке" "+"
    --
    if  Template.CurrentSection.Count<2 then                            --если вставлена перва€ запись (через вычисление количества позиций в подтаблице)
    ExecuteCommand("Kernel.Move.Right");                                --то вызываетс€ интерфейсна€ команда -> (т.к. им€ пол€ в шаблоне повтор€етс€ и позиционировать селектор через им€ этого пол€ не получитс€)
    else   
    if     Cell.Owner.SubtableName = "ѕерсоналии"          and ѕерсоналии¬сеѕол€          = true then ¬сеѕол€ = true;
    elsif  Cell.Owner.SubtableName = "јвторыЌе”казанные"   and јвторыЌе”казанные¬сеѕол€   = true then ¬сеѕол€ = true;
    elsif  Cell.Owner.SubtableName = "”частникиЅесед"      and ”частникиЅесед¬сеѕол€      = true then ¬сеѕол€ = true;
    elsif  Cell.Owner.SubtableName = "–едакторы"           and –едакторы¬сеѕол€           = true then ¬сеѕол€ = true;
    elsif  Cell.Owner.SubtableName = "ѕереводчики"         and ѕереводчики¬сеѕол€         = true then ¬сеѕол€ = true;
    elsif  Cell.Owner.SubtableName = "јвторы¬ступ—татей"   and јвторы¬ступ—татей¬сеѕол€   = true then ¬сеѕол€ = true;
    elsif  Cell.Owner.SubtableName = "јвторыЋитќбработки"  and јвторыЋитќбработки¬сеѕол€  = true then ¬сеѕол€ = true;
    elsif  Cell.Owner.SubtableName = "»ллюстраторы"        and »ллюстраторы¬сеѕол€        = true then ¬сеѕол€ = true;
    elsif  Cell.Owner.SubtableName = "јвторы»нсценировок"  and јвторы»нсценировок¬сеѕол€  = true then ¬сеѕол€ = true;
    elsif  Cell.Owner.SubtableName = "јвторыѕрочие"        and јвторыѕрочие¬сеѕол€        = true then ¬сеѕол€ = true;
    else
      ¬сеѕол€ = false;
    end;
    --
    if ¬сеѕол€ = true then
      if Cell.Owner.SubtableName = "–азночтени€"     then
      else
      ExecuteCommand("Kernel.Move.Right");                                              -- ->
      end;
    else
      ExecuteCommand("Kernel.Move.Right");                                              -- ->
      ExecuteCommand("Kernel.Move.Down");                                               -- V
    end;
    end;
    Result = False;
  end;

  func ѕоле_ѕриЌажатии_ƒобавитьЌомер(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
  var k:integer;
    Result = ƒобавить—ерию(Cell,Action);
    for k = 1..секцЌомера√азеты.Count do
      if Ќомера√азеты[k].“очностьƒаты¬ыхода=0 then
           “очностьƒаты¬ыходаƒень [k] = true;
           “очностьƒаты¬ыходаћес€ц[k] = false;
      else
           “очностьƒаты¬ыходаƒень [k] = false;
           “очностьƒаты¬ыходаћес€ц[k] = true;
      end;
    end;
    Return Result;
  end;

  func ƒобавить—ерию(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
    var index:integer;
    Template.CurrentSection                             =   Cell.Owner;
    if Template.CurrentSection.Count=0  then    index   = 1;
    else                                        index   = Cell.Frame+1;
    end;
    Template.CurrentSection.InsertFrame(index);
    Template.CurrentCell                    =    Cell;
    if  Template.CurrentSection.Count<2 then    ExecuteCommand("Kernel.Move.Right");
    else                                        ExecuteCommand("Kernel.Move.Down");
    fi;
    Return false;
  end;


  func ѕоле_ѕриЌажатии_”далитьѕозицию(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
    var index:integer;
    Template.CurrentSection                 =   Cell.Owner;
    index = Cell.Frame;
    Template.CurrentCell                    =    Cell;
    if Template.CurrentSection.Count>0 then
      Template.CurrentSection.DeleteFrame(index);
    end;
    Return False;
  end;

  func ѕоле_ѕриЌажатии_‘ормированиеќписани€(Cell :TemplateCell; Action :Template.ClickTypes):Logical;
    if Ќомера√азеты.Count>0 then
      if SessionInfo.UserRecord.FullAccess then
        ‘ормированиеЅиб«аписи;
      fi;
    fi;
    Result = True; 
  end;

  func ѕоле_ѕриЌажатии_јвторы¬сеѕол€(Cell :TemplateCell; Action :Template.ClickTypes):Logical;
    var k:integer;
    if    Cell.Owner.Name = "секцѕерсоналии1"           then
      if ѕерсоналии¬сеѕол€ = true         then  for k = 2..4    do секцѕерсоналии2.Row[k].visible=false;        end;
      else                                      for k = 2..4    do секцѕерсоналии2.Row[k].visible=true;         end;
      end;
    elsif Cell.Owner.Name = "секцјвторыЌе”казанные1"    then
      if јвторыЌе”казанные¬сеѕол€ = true  then  for k = 2..4    do секцјвторыЌе”казанные2.Row[k].visible=false; end;
      else                                      for k = 2..4    do секцјвторыЌе”казанные2.Row[k].visible=true;  end;
      end;
    elsif Cell.Owner.Name = "секц”частникиЅесед1"       then
      if ”частникиЅесед¬сеѕол€ = true     then  for k = 2..4    do секц”частникиЅесед2.Row[k].visible=false;    end;
      else                                      for k = 2..4    do секц”частникиЅесед2.Row[k].visible=true;     end;
      end;
    elsif Cell.Owner.Name = "секц–едакторы1"            then
      if –едакторы¬сеѕол€ = true          then  for k = 2..4    do секц–едакторы2.Row[k].visible=false;         end;
      else                                      for k = 2..4    do секц–едакторы2.Row[k].visible=true;          end;
      end;
    elsif Cell.Owner.Name = "секцѕереводчики1"           then
      if ѕереводчики¬сеѕол€ = true        then  for k = 2..4    do секцѕереводчики2.Row[k].visible=false;       end;
      else                                      for k = 2..4    do секцѕереводчики2.Row[k].visible=true;        end;
      end;
    elsif Cell.Owner.Name = "секцјвторы¬ступ—татей1"     then
      if јвторы¬ступ—татей¬сеѕол€ = true  then  for k = 2..4    do секцјвторы¬ступ—татей2.Row[k].visible=false; end;
      else                                      for k = 2..4    do секцјвторы¬ступ—татей2.Row[k].visible=true;  end;
      end;
    elsif Cell.Owner.Name = "секцјвторыЋитќбработки1"    then
      if јвторыЋитќбработки¬сеѕол€ = true then  for k = 2..4    do секцјвторыЋитќбработки2.Row[k].visible=false;end;
      else                                      for k = 2..4    do секцјвторыЋитќбработки2.Row[k].visible=true; end;
      end;
    elsif Cell.Owner.Name = "секц»ллюстраторы1"           then
      if »ллюстраторы¬сеѕол€ = true       then  for k = 2..4    do секц»ллюстраторы2.Row[k].visible=false;      end;
      else                                      for k = 2..4    do секц»ллюстраторы2.Row[k].visible=true;       end;
      end;
    elsif Cell.Owner.Name = "секцјвторы»нсценировок1"     then
      if јвторы»нсценировок¬сеѕол€ = true then  for k = 2..4    do секцјвторы»нсценировок2.Row[k].visible=false;end;
      else                                      for k = 2..4    do секцјвторы»нсценировок2.Row[k].visible=true; end;
      end;
    elsif Cell.Owner.Name = "секцјвторыѕрочие1"           then
      if јвторыѕрочие¬сеѕол€ = true       then  for k = 2..4    do секцјвторыѕрочие2.Row[k].visible=false;      end;
      else                                      for k = 2..4    do секцјвторыѕрочие2.Row[k].visible=true;       end;
      end;
    end;
    Result = true;
  end;

  func ѕоле_ѕриЌажатии_¬ѕримечани€х(Cell :TemplateCell; Action :Template.ClickTypes):Logical;
    if ¬ѕримечани€х = false                                     then
      ‘ормированиеѕримечани€ќбјвторах;
      ¬ѕримечани€х =  true;
    else
      ѕримќбјвторах—татьи           = nil;
      Message('ѕоле "ѕримечани€ об авторах" очищено!');
      ¬ѕримечани€х =  false;
    end;
    ‘ормированиеѕослед—веденийќтветственности;
    Result = false;
  end;

  func ѕоле_ѕриЌаборе(Cell :TemplateCell; Key :String; Value :Variant; var NewValue :Variant):Logical;
    var Index :Integer;
    var aParam :Variant[2];
    var vExtMethod :– ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef;
    var vEndEditSave :Logical;
    Index = Cell.Frame;
2    --===================================================--
2    --=======0 ¬ременна€ тематическа€ рубрика 2============--
2    --===================================================--
    if (Cell.Contents = '»ндекс¬“–. рЌаим') then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр“ематика—татьи);
      vExtMethod.SetClassFalseCardfiles(– ѕ_—правочники.—правочники.блкарт“ематика—татьи);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред“ематика—татьи);
      vExtMethod.SetFindFilter('Match(Ќаим,"*' + Value + '*") and ¬ременна€');
      aParam[1] = ['“ип–убрик', 2];
      aParam[2] = ['–ежим¬ыбора¬рем–', true];
      aParam[3] = ['–ежим¬ыбора—ист–', false];
      aParam[4] = ['“ип‘рагмента', 1];
      aParam[5] = ['‘рагмент', Value];
      vExtMethod.SetSearchFormParam(aParam);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
2    --===================================================--
2    --=======0 —ист. подрубрика 2==========================--
2    --===================================================--
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр“ематика—татьи);
      vExtMethod.SetClassFalseCardfiles(– ѕ_—правочники.—правочники.блкарт“ематика—татьи);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред“ематика—татьи);
      vExtMethod.SetFindFilter('Match(Ќаим,"*' + Value + '*") and ¬ременна€');
      aParam[1] = ['“ип–убрик', 1];
      aParam[2] = ['–ежим¬ыбора¬рем–', false];
      aParam[3] = ['–ежим¬ыбора—ист–', true];
      aParam[4] = ['“ип‘рагмента', 1];
      aParam[5] = ['‘рагмент', Value];
      vExtMethod.SetSearchFormParam(aParam);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
2    --=================================--
2    --=======0 2—ери€ статей0 2============--
2    --=================================--
    elsif (Cell.Contents = 'Ќазвание—ерии.Ќаим') then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр—ери€—татей);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.карт—ери€—татей);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред—ери€—татей);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
2    --=================================--
2    --========—ери€ статей=============--0 ¬ј–»јЌ“ II
2    --=================================--
    elsif (Cell.Contents = 'Ќазвание—ерииѕриложений.Ќаим') then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—татьи.спр—ери€ѕриложений);
      vExtMethod.SetClassCardfile(– ѕ_—татьи.—правочники.карт—ери€ѕриложений);
      #Warning '2024 ѕереработать справочник серий приложений!!!';
      vExtMethod.SetClassEditorForm(– ѕ_—татьи.—правочники.ред—ери€ѕриложений);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
2    --===============================================================--
2    --========√еографическое название в заголовке статьи=============--
2    --===============================================================--
    elsif Cell.Contents in ['¬ќ_√еоЌаим.Ќаим','ѕќ_√еоЌаим.Ќаим'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр√еографи€—татьи);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.карт√еографи€—татьи);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред√еографи€—татьи);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
2    --===============================================================--
2    --========   0            ќрганизации 2         0      2=============--
2    --===============================================================--
    elsif Cell.Contents in ['ѕќ_Ќаименование.Ќаим'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спрѕќрганизаци€);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.картѕостќрг);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.редѕостќрг);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
    elsif Cell.Contents in ['ѕќ_ оллектив.Ќаим'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спрѕ оллектив);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.картѕостќрг олл);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.редѕостќрг олл);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
    elsif Cell.Contents in ['ѕќ_—труктѕодр.Ќаим'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спрѕ—труктѕодр);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.картѕостќрг—ѕ);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.редѕостќрг—ѕ);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
    elsif Cell.Contents in ['ѕќ_¬ремѕодр.Ќаим'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спрѕ¬ремѕодр);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.картѕостќрг¬ѕ);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.редѕостќрг¬ѕ);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
    elsif Cell.Contents in ['¬ќ_Ќаименование.Ќаим'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр¬ќрганизаци€);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.карт¬ремќрг);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред¬ремќрг);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
    elsif Cell.Contents in ['¬ќ_ оллектив.Ќаим'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр¬ оллектив);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.карт¬ремќрг олл);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред¬ремќрг олл);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
    elsif Cell.Contents in ['¬ќ_—труктѕодр.Ќаим'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр¬—труктѕодр);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.карт¬ремќрг—ѕ);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред¬ремќрг—ѕ);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
    elsif Cell.Contents in ['¬ќ_¬ремѕодр.Ќаим'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр¬¬ремѕодр);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.карт¬ремќрг¬ѕ);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред¬ремќрг¬ѕ);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
2    --===============================================================--
2    --========               ”    ƒ                     =============--
2    --===============================================================--
    elsif Cell.Contents in ['–убрика”ƒ . од'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetFindFilter( 'ѕодрубрика and not Ќеѕримен€етс€ and Match( од,"*' + Value + '*")' );
      aParam[1] = ['“ип‘рагмента', 0];
      aParam[2] = ['‘рагмент', Value];
      aParam[3] = ['“ип–убрик', 1];
      aParam[4] = ['ѕоказать”старевшее', -1];
      aParam[5] = ['–ежим¬ыбора—ист–', true];
      aParam[6] = ['–ежим¬ыбора¬рем–', false];
      vExtMethod.SetSearchFormParam(aParam);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр“ематика—татьи);
      vExtMethod.SetClassFalseCardfiles(– ѕ_—правочники.—правочники.блкарт“ематика—татьи);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред“ематика—татьи);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
    elsif Cell.Contents in ['–убрика”ƒ .Ќаим'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetFindFilter( 'ѕодрубрика and not Ќеѕримен€етс€ and Match(Ќаим,"*' + Value + '*")' );
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр“ематика—татьи);
      vExtMethod.SetClassFalseCardfiles(– ѕ_—правочники.—правочники.блкарт“ематика—татьи);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред“ематика—татьи);
      aParam[1] = ['“ип‘рагмента', 1];
      aParam[2] = ['‘рагмент', Value];
      aParam[3] = ['“ип–убрик', 1];
      aParam[4] = ['ѕоказать”старевшее', -1];
      aParam[5] = ['–ежим¬ыбора—ист–', true];
      aParam[6] = ['–ежим¬ыбора¬рем–', false];
      vExtMethod.SetSearchFormParam(aParam);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
2    --===============================================================--
2    --========               Ѕ    Ѕ                     =============--
2    --===============================================================--
    elsif Cell.Contents in ['–убрикаЅЅ . од'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спрЅЅ );
      vExtMethod.SetClassFalseCardfiles(– ѕ_—правочники.—правочники.блкартЅЅ );
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.редЅЅ );
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
    elsif Cell.Contents in ['–убрикаЅЅ .Ќаим'] then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спрЅЅ );
      vExtMethod.SetClassFalseCardfiles(– ѕ_—правочники.—правочники.блкартЅЅ );
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.редЅЅ );
      aParam[1] = ['“ип‘рагмента', 0];
      aParam[2] = ['‘рагмент', Value];
      vExtMethod.SetSearchFormParam(aParam);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
2    --==============================================--
2    --======0  ¬ременна€ тем. рубрика     2===========--
2    --==============================================--
    elsif (Cell.Contents = '»ндекс¬“–.Ќаим') then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр“ематика—татьи);
      vExtMethod.SetClassFalseCardfiles(– ѕ_—правочники.—правочники.блкарт“ематика—татьи);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред“ематика—татьи);
      if (Record.»ндекс”ƒ .Count > 0) then
        if (Record.»ндекс”ƒ [1].–убрика”ƒ  <> nil) then
          vExtMethod.SetFindFilter( 'Match(Ќаим,"*' + Value + '*") and ¬ременна€=true and Match( од,"' + Record.»ндекс”ƒ [1].–убрика”ƒ . од + '*") and Ќеѕримен€етс€=false' );
        else
          vExtMethod.SetFindFilter( 'Match(Ќаим,"*' + Value + '*") and ¬ременна€=true and Ќеѕримен€етс€=false' );
        fi;
      else
        vExtMethod.SetFindFilter( 'Match(Ќаим,"*' + Value + '*") and ¬ременна€=true and Ќеѕримен€етс€=false' );
      fi;
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
2    --==============================================--
2    --======0  √еографический рубрикатор  2===========--
2    --==============================================--
    elsif (Cell.Contents = '–убрика√ео.Ќаим') then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спр√еографи€—татьи);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.карт√еографи€—татьи);
      vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред√еографи€—татьи);
      vExtMethod.SetDialogIfNoValue(тдƒобавить»скатьѕовторить);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
        if (Index = 1) then
          if (»ндекс”ƒ .Count > 0) then
           »ндекс√ео[1].ѕод–убрика—ист = »ндекс”ƒ [1].–убрика”ƒ ;
          fi;
        else
           »ндекс√ео[Index].ѕод–убрика—ист = »ндекс√ео[Index - 1].ѕод–убрика—ист;
        fi;
      fi;
      Return;
2    --===============================================--
2    --======0  —истематический рубрикатор  2===========--
2    --===============================================--
    elsif (Cell.Contents = 'ѕод–убрика—ист. рЌаим') then
      if (Value = nil) then
        Return true;
      else
        vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
        vExtMethod.SetClassRecord(– ѕ_—правочники.спр“ематика—татьи);
        vExtMethod.SetClassFalseCardfiles(– ѕ_—правочники.—правочники.блкарт“ематика—татьи);
        vExtMethod.SetClassEditorForm(– ѕ_—правочники.—правочники.ред“ематика—татьи);
        Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
        if (not Result) and vEndEditSave then
          Template.EndEdit(true);
        fi;
        Return;
      fi;
2    --==============================================--
2    --======0  язак оригинала статьи      2===========--
2    --==============================================--
    elsif (Cell.Contents = 'языкќригинала.ЌаимЅибл') then
      vExtMethod = – ѕ_—правочники.ExtendedMethod.Cell.OnTypeRef.CreateExt(Value);
      vExtMethod.SetClassRecord(– ѕ_—правочники.спрязыкќригинала);
      vExtMethod.SetClassCardfile(– ѕ_—правочники.—правочники.картязыкќригинала);
      vExtMethod.SetSearchFormParam([['‘рагмент', Value]]);
      Result = vExtMethod.ReturnResult(NewValue, vEndEditSave);
      if (not Result) and vEndEditSave then
        Template.EndEdit(true);
      fi;
      Return;
    fi; -- конец условий на имена полей
  end;

  func ѕоле_ѕриќбзоре(Cell :TemplateCell; Value :Variant; var NewValue :Variant):Logical;
2    va0r index,k         : integer;
    var R               : record;
    var dats            : date;
    var fltn :String;
    var Ќомера¬ыхода_[] : string;
    var CardForSelect   : CardForm;
    var aFlt :String[];
    var лок√од, локћес :Integer;
    var aParam :Variant[2];
    var vRefRec :– ѕ_—правочники.BaseRefType1;
    Index = Cell.Frame;
    -- ”ƒ  (код) --
    if (Cell.Contents = '–убрика”ƒ . од') then
      aParam[1] = ['“ип‘рагмента', 0];
      aParam[2] = ['‘рагмент', Value];
      aParam[3] = ['“ип–убрик', 1];
      aParam[4] = ['ѕоказать”старевшее', -1];
      aParam[5] = ['–ежим¬ыбора—ист–', true];
      aParam[6] = ['–ежим¬ыбора¬рем–', false];
      if (cmOk = – ѕ_—правочники.—правочники.блкарт“ематика—татьи.¬ыполнить¬ыбор(vRefRec, aParam)) then
        »ндекс”ƒ [index].–убрика”ƒ  = vRefRec;
        NewValue = vRefRec;
        Template.EndEdit(true);
      fi;
      Return false;
    -- ”ƒ  (наименование) --
    elsif (Cell.Contents = '–убрика”ƒ .Ќаим') then
      aParam[1] = ['“ип‘рагмента', 1];
      aParam[2] = ['‘рагмент', Value];
      aParam[3] = ['“ип–убрик', 1];
      aParam[4] = ['ѕоказать”старевшее', -1];
      aParam[5] = ['–ежим¬ыбора—ист–', true];
      aParam[6] = ['–ежим¬ыбора¬рем–', false];
      if (cmOk = – ѕ_—правочники.—правочники.блкарт“ематика—татьи.¬ыполнить¬ыбор(vRefRec, aParam)) then
        »ндекс”ƒ [index].–убрика”ƒ  = vRefRec;
        NewValue = vRefRec;
        Template.EndEdit(true);
      fi;
      Return false;
    -- ¬ременна€ тематическа€ рубрика --
    elsif (Cell.Contents = '»ндекс¬“–. рЌаим') then
      aParam[1] = ['“ип–убрик', 2];
      aParam[2] = ['–ежим¬ыбора¬рем–', true];
      aParam[3] = ['–ежим¬ыбора—ист–', false];
      aParam[4] = ['“ип‘рагмента', 1];
      aParam[5] = ['‘рагмент', Value];
      if (cmOk = – ѕ_—правочники.—правочники.блкарт“ематика—татьи.¬ыполнить¬ыбор(vRefRec, aParam) ) then
        NewValue = vRefRec;
        Template.EndEdit(true);
      fi;
      Return false;
    -- —ист. подрубрика --
    elsif (Cell.Contents = 'ѕод–убрика—ист. рЌаим') then
      aParam[1] = ['“ип–убрик', 1];
      aParam[2] = ['–ежим¬ыбора¬рем–', false];
      aParam[3] = ['–ежим¬ыбора—ист–', true];
      aParam[4] = ['“ип‘рагмента', 1];
      aParam[5] = ['‘рагмент', Value];
      if (cmOk = – ѕ_—правочники.—правочники.блкарт“ематика—татьи.¬ыполнить¬ыбор(vRefRec, aParam) ) then
        NewValue = vRefRec;
        Template.EndEdit(true);
      fi;
      Return false;
    -- √од выпуска номера (при обзоре) --
    elsif (Cell.Contents = '√од¬ыпуска') then
      if CmOk = – ѕ_—»—.—ервис.бл¬ыбор√ода.¬ыполнить¬ыбор(лок√од) then
        NewValue = лок√од;
        Template.EndEdit(true);
      fi;
      Return;
    --..........ƒата начала номера (при обзоре)..........--
    elsif (Cell.Contents = 'ƒатаЌачалаЌомера—тр') then
      if (“очностьƒатыЌачалаЌомера = 0) then
        if (ƒатаЌачалаЌомера <> nil) then
          dats = Calendar(ƒатаЌачалаЌомера);
        else
          dats = Calendar(today);
        fi;
        if (dats <> nil) then
          NewValue = Str(dats);
          Template.EndEdit;
        end;
  2 0     2Return 0false2;
      else
        if CmOk = – ѕ_—»—.—ервис.бл¬ыборћес€ца.¬ыполнить¬ыбор(лок√од, локћес) then
          NewValue = Str(Dat(1, локћес, лок√од));
          Template.EndEdit;
          ¬ид“очностиƒат¬ыхода;
2 0 2     0   2Return 0false2;
        fi;
2      0fi2;
    --..........ƒата выпуска номера (при обзоре)..........--
    elsif (Cell.Contents = 'ƒата¬ыхода—тр') then
      if  (Ќомера√азеты[Index].√од¬ыпуска > 0) and (Ќомера√азеты[Index].Ќомер <> nil) then
        if (Ќомера√азеты[Index].“очностьƒаты¬ыхода = 0) then
          if (Ќомера√азеты[Index].ƒата¬ыхода <> nil) then
            dats = Calendar(Ќомера√азеты[Index].ƒата¬ыхода);
          else
            dats = Calendar(today);
          fi;
          if (dats <> nil) then
            NewValue = Str(dats);
            Template.EndEdit;
            ¬ид“очностиƒат¬ыхода;
            Template.EndEdit;
          fi;
2     0     2Return 0false2;
        else
          if CmOk = – ѕ_—»—.—ервис.бл¬ыборћес€ца.¬ыполнить¬ыбор(лок√од, локћес) then
            NewValue = Str(Dat(1, локћес, лок√од));
            Template.EndEdit;
            ¬ид“очностиƒат¬ыхода;
            Template.EndEdit;
2 0 2   0  2  0   2Return 0false2;
          fi;
        fi;
      else
        Message('ѕожалуйста, укажите год и номер выпуска номера газеты!');
      fi;
    elsif (Cell.Contents = 'Ќазвание—ерииѕриложений.Ќаим') then
      aParam[1] = ['√лавна€√азета', Record.√азета];
      aParam[2] = ['‘рагмент', Value];
      if (cmOk = – ѕ_—татьи.—правочники.карт—ери€ѕриложений.¬ыполнить¬ыбор(vRefRec, aParam) ) then
        NewValue = vRefRec;
        Template.EndEdit(true);
      fi;
      Return false;
      #Warning '2024 ƒоработать картотеку картѕриложени€ - метод ¬ыполнить¬ыбор';
      --CardForSelect = – ѕ_—татьи.—правочники.карт—ери€ѕриложений.Create;
      --CardForSelect.√лавна€√азета=√азета;
      --if (CmOk = CardForSelect.ShowEx(R, '√азета=' + Str(Record), Window.ModalWindow)) then
      --  NewValue = R;
      --  Ќазвание—ерииѕриложений = R;
      --  Template.EndEdit;
      --fi;
    fi; --конец условий на имена полей
  2  Return0  Result;
  end;

  func ѕоле_ѕриќбзоре_¬ыборЌомера(Cell :TemplateCell; Value :Variant; var NewValue :Variant):Logical;
    var Index, k :Integer;
    var aFlt, aIssue :String[];
    var vFlt :String;
    var vRec :– ѕ_√азеты.Ќомер√азеты;
    Index = Cell.Frame;
    if (Ќомера√азеты[Index].√од¬ыпуска > 0) then
      -- фильтр на номера по формальным признакам дл€ целей Ћ√—
      AddInArray( aFlt, '√од¬ыпуска=' + Str(Ќомера√азеты[Index].√од¬ыпуска) );
      AddInArray( aFlt, 'Ќомер="'     + Str(Ќомера√азеты[index].√од¬ыпуска) + '" and ‘ункци€√руппы=-1' );
      AddInArray( aFlt, '‘ункци€√руппы=-2' );
      vFlt = MakeFilter( aFlt, byOr);
      if cmOk = – ѕ_√азеты.”чет√азет.картЌомера¬ыбор.¬ыполнить¬ыбор(√азета, vFlt, vRec) then
        NewValue = – ѕ_—»—.StdCode.NoSpace(vRec.Ќомер);
        ќбработкаЌомера√азетыЋ√—(Index, vRec);
        -- ќбработка диапазона дат
        if (Ќомера√азеты[Index].ƒата¬ыхода <> nil) then
          ƒаты¬ыхода = ќписаниеƒат.¬—троку(ƒатаЌачалаЌомера,
                                           Ќомера√азеты[секцЌомера√азеты.Count].ƒата¬ыхода,
                                           “очностьƒатыЌачалаЌомера,
                                           Ќомера√азеты[секцЌомера√азеты.Count].“очностьƒаты¬ыхода
                                           );
        fi;
        -- ќбработка диапазона номеров
        for k = 1 .. секцЌомера√азеты.Count do
          aIssue[k] = Ќомера√азеты[k].Ќомер;
        od;
        Ќомера¬ыхода = ќписаниеЌомеров.¬—троку(√азета, aIssue);
        Template.EndEdit(True);
        Ќомер¬ыбран = true;
      fi;
    else
      Message('ѕожалуйста, укажите год выпуска номера газеты!');
    fi;
  end;


  func ѕоле_ѕриѕроверке(Cell :TemplateCell; Index :Integer; var Value :Variant):Logical;
    var Q                : Query;
    var Q2               : Query;
    var R,R2             : record;
    var D_Value          : date;
    var fltn,S_Value: String;
    var VarRG            : string;--преобразование номера по правилам ќ–√
    var aFlt :String[];
    --..........√од выпуска ѕ   (при проверке)..........--
    if          Cell.Contents   = "2ƒата арточек0"   and Value<>nil        then
      if   Year(Value)=√одЋетописи                                       then
        Return  ¬ыпѕк.—оздать«апись(Value,Record);
      else
       Message("ƒата выпуска печатных карточек должна входить в год Ћ√—!");
        Return  false;
      end;
    elsif       Cell.Contents   = "2ƒата арточек0"   and Value =nil        then
      ¬ыпуск арточек            = nil;
      Ўифр арточек              = nil;
      —татусѕ                   = nil;
      Ќомер«аписи¬¬ыпускеѕ      = nil;
      ƒата«аписи¬‘айлѕ          = nil;
      Return True;
    --..........√од выпуска Ћ√— (при проверке)..........--
      --ѕроверка наличи€ группы в картотеке "¬ыпуск Ћ√—"
      --ѕри отсутствии - добавление
    elsif       Cell.Contents   = "2√одЋетописи0"   and Value<>nil        then
      Return  ¬ыпЋ√—.—оздать«апись√од(Value);
    --..........Ќомер выпуска Ћ√— (при проверке)..........--
      --ѕроверка наличи€ записи в картотеке "¬ыпуск Ћ√—"
      --ѕри отсутствии - добавление
    elsif       Cell.Contents   = "2¬ыпускЋетописи0"                      and 
                Value2 0          <>nil                                   then
      Return ¬ыпЋ√—.—оздать«апись¬ыпуск(√одЋетописи,Value);
    elsif Cell.Contents = "2ƒата¬ыхода—тр0" and Value <> nil then
      if     Ќомера√азеты[index].√од¬ыпуска     =nil    then
        Message('ѕожалуйста, заполните поле "√од (выпуска газеты)"!');
          Return False;
      elsif  Ќомера√азеты[index].Ќомер          =nil    then
        Message('ѕожалуйста, заполните поле "Ќомер (выпуска газеты)"!');
          Return False;
      --..........ƒата выпуска номера газеты (при проверке)..........--
      else   --≈сли все услови€ корректности соблюдены, то это обозначает, что номер в базе данных –√ имеетс€.
             --¬ этом случае в номер вноситс€ дата выпуска и дата начала выпуска (только дл€ первой позиции)
             --ќбрабатываетс€ строковое представление даты
        try
          if  – ѕ_—»—.DateDescription.ѕроверить—троку(Value,S_Value)=true  then
            D_Value = StringToDate(S_Value);
          else
            Return false;
          end;
        except
          Return false;
        end;

        if Year(D_Value) = Ќомера√азеты[index].√од¬ыпуска then  --проверка на соответствие года выпуска
          R = Ќомера√азеты[index].Ќомер√азеты;
          --преобразование даты в соотв. с требовани€ми точности
          if Ќомера√азеты[index].“очностьƒаты¬ыхода  = 1  then
            Value = Str(Dat(1,Mon(D_Value),Year(D_Value)));
            S_Value=Value;
          end;
          --запись даты
          Ќомера√азеты[index].ƒата¬ыхода = StringToDate(S_Value);
          --определение даты начала газеты
          if index = 1 and Ќомера√азеты[index].ƒата¬ыхода<>nil      then
            if ƒатаЌачалаЌомера = nil                               then
              ƒатаЌачалаЌомера = ќписаниеƒат.ЌачалоЌомера(R.√азета,Ќомера√азеты[index].ƒата¬ыхода);
            end;
          end;
          --корректировка базы –√
          ќбработкаЌомера√азеты–√(Index,R);
          --¬ычисление диапазона дат
          if index > 0 and Ќомера√азеты[index].ƒата¬ыхода<>nil      then
            ƒаты¬ыхода = ќписаниеƒат.¬—троку(ƒатаЌачалаЌомера,
                                             Ќомера√азеты[секцЌомера√азеты.Count].ƒата¬ыхода,
                                             “очностьƒатыЌачалаЌомера,
                                             Ќомера√азеты[секцЌомера√азеты.Count].“очностьƒаты¬ыхода
                                             );
          end;
          Return True;
        else
          Message('√од выпуска номера должен совпадать с указанным в солбце "год" (' + Str(Ќомера√азеты[index].√од¬ыпуска) + ')!');
          Return False;
        end;
      end;
    --..........ƒата начала номера (при проверке)..........--
    elsif Cell.Contents = "ƒатаЌачалаЌомера—тр"         then
      if Value <> nil                                   then
        try
          if  – ѕ_—»—.DateDescription.ѕроверить—троку(Value,S_Value)=true  then
            D_Value = StringToDate(S_Value);
          else
            Return false;
          end;
        except
          Return false;
        end;
        if “очностьƒатыЌачалаЌомера = 1                 then
          Value = Str(Dat(1,Mon(D_Value),Year(D_Value)));
          S_Value = Value;
        end;
        ƒатаЌачалаЌомера = StringToDate(S_Value);
        ƒаты¬ыхода = ќписаниеƒат.¬—троку(ƒатаЌачалаЌомера,
                                         Ќомера√азеты[секцЌомера√азеты.Count].ƒата¬ыхода,
                                         “очностьƒатыЌачалаЌомера,
                                         Ќомера√азеты[секцЌомера√азеты.Count].“очностьƒаты¬ыхода
                                         );
      else
        if  секцЌомера√азеты.Count > 0                  then
          ƒатаЌачалаЌомера = Ќомера√азеты[1].ƒата¬ыхода;
          ƒаты¬ыхода = ќписаниеƒат.¬—троку(ƒатаЌачалаЌомера,
                                         Ќомера√азеты[секцЌомера√азеты.Count].ƒата¬ыхода,
                                         “очностьƒатыЌачалаЌомера,
                                         Ќомера√азеты[секцЌомера√азеты.Count].“очностьƒаты¬ыхода
                                         );
        else
          ƒатаЌачалаЌомера = nil;
          Return True;
        end;
      end;
      Return True;
    end;                --конец условий на имена полей
  2  Return0  Result;
  end;                  -- конец процедуры ѕолеѕриѕроверке

  var Ќомер¬ыбран :Logical;

  func ѕоле_ѕриѕроверке_Ќомер(Cell :TemplateCell; Index :Integer; var Value :Variant):Logical;
    var aFlt, aTxt :String[];
    var rArticle :– ѕ_—татьи.–оспись;
    var rIssue :– ѕ_√азеты.Ќомер√азеты;
    var rIssueStat :– ѕ_√азеты.¬ыпуск√азеты;
    var vStdNum :String;
    var vIssueCount :Integer;
    var vTxt :String;
    if (Value <> nil) then
2   0   2--========0    √лобальный контроль   2============--
      if (√азета = nil) then
        Message('ќшибка! ѕожалуйста, создавайте запись о статье, установив селектор на год выпуска внутри папки с названием газеты!');
        Return;
      fi;
      if (Ќомера√азеты[Index].√од¬ыпуска = nil) then
        Message('ѕожалуйста, укажите год, в котором выпущен номер газеты!');
        Return;
      fi;
      if Ќомер¬ыбран then
        Ќомер¬ыбран = false;
        Return true;
      else
        -- ѕри добавлении номера анализируетс€ реестр номеров, формируемый отделом –√.
        --  ритерии поиска - год и номер выпуска. ƒата не учитываетс€.
        -- ѕри положительном результате анализа информаци€ о номере считываетс€ в текущую запись подтаблицы.
        -- ѕри отрицательном - номер создаетс€ со взведенным флагом "—оздан отделом Ћ√—..."
        -- ƒо совершени€ всех этих действий необходима обработка пользовательских ошибок
        --== ќбработка пользовательских ошибок ==--
        --ј. –анее был введен номер, не существующий в природе.
        --  ритерии:
        -- запись в таблице номеров существует,
        -- запись при€в€зана только к этой статье,
        -- запись сохран€ет статус не полученного номера, созданного отделом Ћ√—
        if (Ќомера√азеты[Index].Ќомер√азеты <> nil) then
          rIssue = Ќомера√азеты[Index].Ќомер√азеты;
          aFlt = nil;
          AddInArray( aFlt, 'Ќомера√азеты.Exists(Ќомер√азеты=' + Str(rIssue) + ')' );
          AddInArray( aFlt, 'DocId<>' + Str(Self.Record.DocID) );
          rArticle = FindRecord(– ѕ_—татьи.–оспись, MakeFilter(aFlt));
          if (rArticle = nil) then
            if (rIssue.—озданќЋ√— and rIssue.Ќеѕолучен) then
              try
                RecordDelete(rIssue);
              except
              end;
            fi;
          fi;
        fi;
        -- конец проверки ј
        vStdNum = CustomStandard(Value); -- приведение сырого значени€ номера к стандарту –√
        --== конец исправлени€ пользовательских ошибок ==--
        aFlt = nil;
        AddInArray( aFlt, '√азета=' + √азета.DocIDStr );
        AddInArray( aFlt, '‘ункци€√руппы=0' );
        AddInArray( aFlt, '√од¬ыпуска=' + Str(Ќомера√азеты[Index].√од¬ыпуска) );
        AddInArray( aFlt, 'Match(Ќомер,"*' + vStdNum + '*")' );
        rIssue = FindRecordExt(– ѕ_√азеты.Ќомер√азеты, MakeFilter(aFlt), , vIssueCount);
        if (vIssueCount = 0) then -- 2_¬ыпусков с таким номером Ќ≈“0  - создаетс€ запись о новом выпуске
          aTxt = nil;
          AddInArray( aTxt, '¬ сегменте базы данных отдела регистрации газет номера (выпуска)');
          AddInArray( aTxt, 'за ' + Str(Ќомера√азеты[index].√од¬ыпуска) + ' год');
          AddInArray( aTxt, 'газеты "' + Ќазваниеќсн + ' нет.');
          vTxt = ArrayToText(aTxt, false);
          aTxt = nil;
          AddInArray( aTxt, vTxt);
          AddInArray( aTxt, 'ѕродолжить заполнение?');
          if ( cmOk = EnqOkCancel(ArrayToText(aTxt)) ) then
            rIssue = – ѕ_√азеты.Ќомер√азеты.Create;
            rIssue.√азета     = √азета;
            rIssue.√од¬ыпуска = Ќомера√азеты[index].√од¬ыпуска;
            rIssue.Ќомер      = FixCode10(vStdNum);
            rIssue.Ќеѕолучен  = true;
            rIssue.—озданќЋ√— = true;
            rIssue.Post;
            -- поиск и создание (при отсутствии записи сбора статистики по гоу выпуска)
            aFlt = nil;
            AddInArray( aFlt, '√азета=' + √азета.DocIDStr );
            AddInArray( aFlt, '√од¬ыпуска=' + Str(Ќомера√азеты[Index].√од¬ыпуска) );
            rIssueStat = FindRecord(– ѕ_√азеты.¬ыпуск√азеты, MakeFilter(aFlt));
            if (rIssueStat = nil) then
              with – ѕ_√азеты.¬ыпуск√азеты.Create do
                √азета     = √азета;
                √од¬ыпуска = Ќомера√азеты[index].√од¬ыпуска;
                Post;
              end;
            fi;
            ќбработкаЌомера√азетыЋ√—(Index, rIssue);
            ExecuteCommand('Kernel.Move.Right');
            Return true;
          else -- отказ от создани€ номера в базе рг
            Return;
          fi;
        elsif (vIssueCount = 1) and (rIssue <> nil) then2 0-- 2_¬ыпуск ≈ƒ»Ќ—“¬≈ЌЌџ…0 - идеальна€ ситуаци€ в плане взаимодействи€ отделов
          if (rIssue.ќписанќЋ√—) then -- проверка на полностью описанный номер
            aTxt = nil;
            AddInArray( aTxt, 'Ќомер (выпуск) ' + Trim(rIssue.Ќомер));
            AddInArray( aTxt, 'за ' + Str(Ќомера√азеты[index].√од¬ыпуска) + ' год');
            AddInArray( aTxt, 'газеты "' + Ќазваниеќсн + ' уже обработан группой Ћ√—!');
            Message( ArrayToText(aTxt, false) );
          fi;
          ќбработкаЌомера√азетыЋ√—(Index, rIssue);
          ExecuteCommand('Kernel.Move.Right');
          Return true;
        elsif (vIssueCount > 1) then2 0-- 2_¬ыпусков0 2 ћЌќ√ќ0 - необходимо вмешательство оператора ввода: надо выбрать номер
          aFlt = nil;
          AddInArray( aFlt, '√од¬ыпуска=' + Str(Ќомера√азеты[Index].√од¬ыпуска) + ' and Match(Ќомер,"*' + vStdNum + '*")' );
          AddInArray( aFlt, 'Ќомер="'     + Str(Ќомера√азеты[Index].√од¬ыпуска) + '" and ‘ункци€√руппы=-1' );
          AddInArray( aFlt, '‘ункци€√руппы=-2' );
          if cmOk = – ѕ_√азеты.”чет√азет.картЌомера¬ыбор.¬ыполнить¬ыбор(√азета, MakeFilter(aFlt, byOr), rIssue) then
            if (rIssue.ќписанќЋ√—) then -- проверка на полностью описанный номер
              aTxt = nil;
              AddInArray( aTxt, 'Ќомер (выпуск) ' + Trim(rIssue.Ќомер));
              AddInArray( aTxt, 'за ' + Str(Ќомера√азеты[index].√од¬ыпуска) + ' год');
              AddInArray( aTxt, 'газеты "' + Ќазваниеќсн + ' уже обработан группой Ћ√—!');
              Message( ArrayToText(aTxt, false) );
            fi;
            ќбработкаЌомера√азетыЋ√—(Index, rIssue);
            ExecuteCommand('Kernel.Move.Right');
            Return true;
          fi;
        fi;
      fi;
    elsif (Value = nil) then
      aTxt = nil;
      AddInArray( aTxt, 'ѕоле "Ќомер газеты" не должно остатьс€ незаполненным!');
      AddInArray( aTxt, '≈сли номер газеты отсутствует в списке выбора, введите его вручную.');
      AddInArray( aTxt, 'ƒл€ очистки пол€ ввода следует удалить строку.');
      Message( ArrayToText(aTxt) );
    fi;
  end;

  func ѕоле_ѕриѕроверке_‘амили€(Cell :TemplateCell; Index :Integer; var Value :Variant):Logical;
    var ‘амили€_,»м€_,ќтчество_ : string;
    var Q                       : Query;
    var NewRec,R                : Record;
    var –ешение1 :Integer;
    var »нициалы_               : string;
    var NameSplitter :– ѕ_—»—.NameSplitterSrv;
    var RI :RI.—правочники.Ћица;
    NameSplitter = – ѕ_—»—.NameSplitterSrv.CreateExt(Value as String);
    if NameSplitter.Make then
      ‘амили€_  = NameSplitter.‘амили€;
      »м€_      = NameSplitter.»м€;
      ќтчество_ = NameSplitter.ќтчество;
      »нициалы_ = NameSplitter.»нициалы;
      if (Cell.Contents = 'јвтор‘амили€') then
        if (‘амили€_ = nil) and (»м€_ = nil) and (ќтчество_ = nil) then
          јвтор»нициалы = nil;
          Return true;
        fi;
      fi;
      #Warning 'ѕроработать вопрос реализации расширенного обработчика событи€ ѕриѕроверке - как дл€ ѕри¬воде, но с возможно иной логикой возврата true/false';
      --поиск в справочнике
      Q = Query.Create([– ѕ_—правочники.—прЋица]);
      if (»нициалы_ <> nil) then
        Q.Filter = 'Match(Ќаим,"*' + ‘амили€_ + '*") and  Match(»нициалы,"*' + »нициалы_ + '*")';
      else
        Q.Filter = 'Match(Ќаим,"*' + ‘амили€_ + '*")';
      fi;
      Q.Select;
      -- значение - ≈ƒ»Ќ—“¬≈ЌЌќ≈
      if (Q.Count = 1) then
        NewRec = Q.Current;
        Value     = NewRec.Ќаим;
        ‘амили€_  = NewRec.Ќаим;
        »нициалы_ = NewRec.»нициалы;
        »м€_      = NewRec.»м€;
        ќтчество_ = NewRec.ќтчество;
        Cell.Owner.Cell[Cell.Column + 3, Cell.Row].Value = »нициалы_;
        if (Cell.Owner.Name <> '—екцјвтор2') then
          Cell.Owner.Cell[Cell.Column + 3, Cell.Row + 1].Value = NewRec.„астица;
        fi;
        Result = true;
      -- значений - ћЌќ√ќ
      elsif (Q.Count > 1) then
        #Warning '«десь и вдругих случа€х, когда используетс€ метод ¬ыполнить¬ыбор - проверить позиционирование на ранее выбранную запись. ѕри необходимости - доработать';
        if (cmOk = – ѕ_—правочники.—правочники.картЋица.¬ыполнить¬ыбор(NewRec, [['‘рагмент', ‘амили€_]])) then
          Value     = NewRec.Ќаим;
          ‘амили€_  = NewRec.Ќаим;
          »нициалы_ = NewRec.»нициалы;
          »м€_      = NewRec.»м€;
          ќтчество_ = NewRec.ќтчество;
          Cell.Owner.Cell[Cell.Column + 3, Cell.Row].Value = »нициалы_;
          if (Cell.Owner.Name <> '—екцјвтор2') then
            Cell.Owner.Cell[Cell.Column + 3, Cell.Row + 1].Value = NewRec.„астица;
          fi;
          Result = true;
        else
          Return false;
        fi;
      -- значений - Ќ≈“
      else
        –ешение1 = Enquiry('',
                           '‘»ќ "' + ‘амили€_ + ' ' + »нициалы_ +'" не найдено в справочнике. ѕожалуйста, выберите действие:',
                           ['ƒобавить в справочник', '»скать в полном списке', 'ѕовторить ввод']);
        if (–ешение1 in [0, 3]) then
        -- отказ или кн.повторить ввод -------------------------------------------
          Return False;
        elsif (–ешение1 = 1) then
        -- добавление в справочник -----------------------------------------------
          RI = – ѕ_—правочники.RI.—правочники.Ћица.Create;
          RI.Record.Ќаим     = ‘амили€_;
          RI.Record.»нициалы = »нициалы_;
          RI.Record.»м€      = »м€_;
          RI.Record.ќтчество = ќтчество_;
          RI.Record.Hash     = RI.GetHashByRecord(RI.Record);
          RI.Post;
          Value      = ‘амили€_;
          Cell.Owner.Cell[Cell.Column + 3, Cell.Row].Value = »нициалы_;
          Result = true;
        elsif (–ешение1 = 2) then
        -- открытие всего справочника --------------------------------------------
          if (cmOk = – ѕ_—правочники.—правочники.картЋица.¬ыполнить¬ыбор(NewRec)) then
            Value     = NewRec.Ќаим;
            ‘амили€_  = NewRec.Ќаим;
            »нициалы_ = NewRec.»нициалы;
            »м€_      = NewRec.»м€;
            ќтчество_ = NewRec.ќтчество;
            Cell.Owner.Cell[Cell.Column + 3, Cell.Row].Value = »нициалы_;
            if (Cell.Owner.Name <> '—екцјвтор2') then
              Cell.Owner.Cell[Cell.Column + 3, Cell.Row + 1].Value = NewRec.„астица;
            fi;
            Result = true;
          else
            Return false;
          fi;
        fi;
      fi; -- усл. на кол-во записей в запросе
    fi;
    -- —охранение полного »мени (»мени и ќтчества) в главной записи в зависимости от имени секции
    if (Cell.Owner.Name = '—екцјвтор2') then
      јвтор»м€      = »м€_;
      јвторќтчество = ќтчество_;
    else
      Cell.Owner.Subtable[Index].»м€ = »м€_;
    fi;
    Return  Result;
  end;

  func ѕоле_ѕриѕроверке_»нициалы(Cell :TemplateCell; Index :Integer; var Value :Variant):Logical;
    var Value_                  : string;
    var ‘амили€_,»м€_,ќтчество_ : string;
    var Q                       : Query;
    var NewRec,R                : Record;
    var –ешение1 :Integer;
    var »нициалы_               : string;
    var NameSplitter :– ѕ_—»—.NameSplitterSrv;
    var RI :RI.—правочники.Ћица;
    if (Cell.Owner.Cell[Cell.Column - 3, Cell.Row].Value <> nil) then
      Value_ = Cell.Owner.Cell[Cell.Column - 3, Cell.Row].Value + ' ' + Value;
      NameSplitter = – ѕ_—»—.NameSplitterSrv.CreateExt(Value_);
      if NameSplitter.Make then
        ‘амили€_  = NameSplitter.‘амили€;
        »м€_      = NameSplitter.»м€;
        ќтчество_ = NameSplitter.ќтчество;
        »нициалы_ = NameSplitter.»нициалы;
        -- поиск в справочнике
        Q = Query.Create([– ѕ_—правочники.—прЋица]);
        if (»нициалы_ <> nil) then
          Q.Filter = 'Match(Ќаим,"*' + ‘амили€_ + '*") and  Match(»нициалы,"*' + »нициалы_ + '*")';
        else
          Q.Filter = 'Match(Ќаим,"*' + ‘амили€_ + '*")';
        fi;
        Q.Select;
        -- значение - ≈ƒ»Ќ—“¬≈ЌЌќ≈
        if (Q.Count = 1) then
          NewRec    = Q.Current;
          Value     = NewRec.»нициалы;
          ‘амили€_  = NewRec.Ќаим;
          »нициалы_ = NewRec.»нициалы;
          »м€_      = NewRec.»м€;
          ќтчество_ = NewRec.ќтчество;
          Cell.Owner.Cell[Cell.Column-3,Cell.Row].Value   = ‘амили€_;
          Result = true;
        -- значений - ћЌќ√ќ
        elsif (Q.Count > 1) then
          if (cmOk = – ѕ_—правочники.—правочники.картЋица.¬ыполнить¬ыбор(NewRec, [['‘рагмент', ‘амили€_]])) then
            Value     = NewRec.»нициалы;
            ‘амили€_  = NewRec.Ќаим;
            »нициалы_ = NewRec.»нициалы;
            »м€_      = NewRec.»м€;
            ќтчество_ = NewRec.ќтчество;
            Cell.Owner.Cell[Cell.Column - 3, Cell.Row].Value = ‘амили€_;
            Result = true;
          else
            Return false;
          fi;
        -- значений - Ќ≈“
        else
          –ешение1 = Enquiry('',
                             '‘»ќ "' + ‘амили€_ + ' ' + »нициалы_ +'" не найдено в справочнике. ѕожалуйста, выберите действие:',
                             ['ƒобавить в справочник', '»скать в полном списке', 'ѕовторить ввод']);
          if (–ешение1 in [0, 3]) then
          -- отказ или кн.повторить ввод -------------------------------------------
            Return false;
          elsif (–ешение1 = 1) then
          -- добавление в справочник -----------------------------------------------
            RI = – ѕ_—правочники.RI.—правочники.Ћица.Create;
            RI.Record.Ќаим     = ‘амили€_;
            RI.Record.»нициалы = »нициалы_;
            RI.Record.»м€      = »м€_;
            RI.Record.ќтчество = ќтчество_;
            RI.Record.Hash     = RI.GetHashByRecord(RI.Record);
            RI.Post;
            Value      = »нициалы_;
            Cell.Owner.Cell[Cell.Column - 3, Cell.Row].Value = ‘амили€_;
            Result = true;
          elsif (–ешение1 = 2) then
          -- открытие всего справочника --------------------------------------------
          if (cmOk = – ѕ_—правочники.—правочники.картЋица.¬ыполнить¬ыбор(NewRec)) then
            Value     = NewRec.»нициалы;
            ‘амили€_  = NewRec.Ќаим;
            »нициалы_ = NewRec.»нициалы;
            »м€_      = NewRec.»м€;
            ќтчество_ = NewRec.ќтчество;
            Cell.Owner.Cell[Cell.Column - 3, Cell.Row].Value = ‘амили€_;
            Result = true;
          else
            Return false;
          fi;
          fi;
        fi;
      fi;
    fi;
    -- —охранение полного »мени (»мени и ќтчества) в главной записи в зависимости от имени секции
    if (Cell.Owner.Name = '—екцјвтор2') then
      јвтор»м€      = »м€_;
      јвторќтчество = ќтчество_;
    else
      Cell.Owner.Subtable[Index].»м€ = »м€_;
    fi;
    Return  Result;
  end;

  proc ѕоле_ѕри¬ыходе(Cell :TemplateCell; Index :Integer);
    var Ќомера¬ыхода_[]  : string;
    var k                : integer;
    if          Cell.Contents   = "2√одЋетописи0"                 then
      Template.CurrentCell = Template.CellByField["¬ыпускЋетописи"];
    elsif       Cell.Contents   = "2¬ыпускЋетописи0"              then
      Template.CurrentCell = Template.CellByField["√од¬ыпуска"];
    elsif       Cell.Contents   = "2ƒата арточек0"                then
      Template.CurrentCell = Cell;
    elsif       Cell.Contents   = "2‘ормаќтветственности10"       then
--      ¬ид—екцќтветственность1;
      Template.CurrentCell = —екцќтветственность1.CellByField["ќтветственность1"];
    elsif       Cell.Contents   = "2‘ормаќтветственности20"        then
      Template.CurrentCell = —екцќтветственность2.CellByField["ќтветственность2"];
    elsif      Cell.Contents   = "2√од¬ыпуска0"                   then
      Template.CurrentCell = Cell;
      ExecuteCommand("Kernel.Move.Right");
    elsif      Cell.Contents   = "2Ќомер0"                        then
      --ќбработка диапазона дат
      if  секцЌомера√азеты.Count > 0                  then
        ƒатаЌачалаЌомера = Ќомера√азеты[1].ƒата¬ыхода;
      end;
      ƒаты¬ыхода = ќписаниеƒат.¬—троку(ƒатаЌачалаЌомера,
                                       Ќомера√азеты[секцЌомера√азеты.Count].ƒата¬ыхода,
                                       “очностьƒатыЌачалаЌомера,
                                       Ќомера√азеты[секцЌомера√азеты.Count].“очностьƒаты¬ыхода
                                       );
      --ќбработка диапазона номеров
      for k = 1..секцЌомера√азеты.Count do
        Ќомера¬ыхода_[k]  = Ќомера√азеты[k].Ќомер;
      end;
      Ќомера¬ыхода  = ќписаниеЌомеров.¬—троку(√азета,Ќомера¬ыхода_);
      --создание групп: газета и года
      – ѕ_√азеты.√руппаЌомеров.ѕо√одам.CreateGroupsByYears(√азета);
      – ѕ_√азеты.√руппаЌомеров.ѕо√азете.CreateGroupsByNsp(√азета);
    --..........ƒата начала номера (при выходе)..........--
    elsif      Cell.Contents   = "2ƒатаЌачалаЌомера0—тр"          then
      Template.CurrentCell = Cell;
      Template.CurrentCell = Template.CellByField["Ќомера—траниц—татьи"];
      ¬ид“очностиƒат¬ыхода;
    --..........ƒата выпуска номера (при выходе)..........--
    elsif      Cell.Contents   = "2ƒата¬ыхода0—тр"                then
      Template.CurrentCell = Cell;
      Template.CurrentCell = Template.CellByField["Ќомера—траниц—татьи"];
      ¬ид“очностиƒат¬ыхода;
    --..........—траницы статьи (при выходе)..........--
    elsif      Cell.Contents="2Ќомера—траниц—татьи0"              or
               Cell.Contents="Ќомер¬ыпуска"                     or
               Cell.Contents="Ќазвание—ерииѕриложений.Ќаим"     then
      if Pos ("ѕ–»Ћ",Up(Ќомера—траниц—татьи))>0                 then
        —траницы—татьи          = Ќомера—траниц—татьи;
      else
      if Ќомераѕриложений.Count = 0                             then
        —траницы—татьи          = "—. "+Ќомера—траниц—татьи;
      else
        if  Ќазвание—ерииѕриложений.√азета<>nil                 then
        —траницы—татьи          = "ѕрил.: с. "+Ќомера—траниц—татьи;
        else
        —траницы—татьи          = "—. "+Ќомера—траниц—татьи;
        end;
      end;
     --
      end;
    elsif               Cell.Contents = "2Ќомер¬ыпуска0"                                  then
      Template.CurrentCell = Template.CellByField["Ќомер"];
    elsif               Cell.Contents = "2‘амили€0"                                       then --во всех секци€х
      ‘ормированиеѕослед—веденийќтветственности;
    elsif               Cell.Contents = "2»нициалы0"                                      then --во всех секци€х
      ‘ормированиеѕослед—веденийќтветственности;
    elsif               Cell.Contents = "2„астица0"                                       then --во всех секци€х
      ‘ормированиеѕослед—веденийќтветственности;
    elsif               Cell.Contents = "2ƒоп—ведени€0"                                   then --во всех секци€х
      ‘ормированиеѕослед—веденийќтветственности;
    elsif               Cell.Contents = "2‘ормаќтв–0"                                     then
      ‘ормированиеѕослед—веденийќтветственности;
      ExecuteCommand("Kernel.Move.Down");                                               -- V V
      ExecuteCommand("Kernel.Move.Left");      ExecuteCommand("Kernel.Move.Left");      -- < <
      ExecuteCommand("Kernel.Move.Left");                                               -- <
    elsif               Cell.Contents = "2‘ормаќтвјЋќ0"                                   then
      ‘ормированиеѕослед—веденийќтветственности;
      ExecuteCommand("Kernel.Move.Down");                                               -- V V
      ExecuteCommand("Kernel.Move.Left");      ExecuteCommand("Kernel.Move.Left");      -- < <
      ExecuteCommand("Kernel.Move.Left");                                               -- <
    elsif               Cell.Contents = "2языкќригинала.ЌаимЅибл0"                        then
      ‘ормированиеѕослед—веденийќтветственности;
      ExecuteCommand("Kernel.Move.Down");                                               -- V V
      ExecuteCommand("Kernel.Move.Left");      ExecuteCommand("Kernel.Move.Left");      -- < <
      ExecuteCommand("Kernel.Move.Left");                                               -- <
    --..........«акладка 2..........--
    elsif               Cell.Contents = "2Ќазвание—татьи0"                                then
      Template.CurrentCell = Template.CellByField[" раткое—одержание—татьи"];
    elsif               Cell.Contents = "2 раткое—одержание—татьи0"                       then
      if Cell.Value<>nil                                                                then
        if  SubStr(Cell.Value,1,1)<>"["                                                 then
          —ервис. ¬—;
        end;
      end;
      ¬ид нопок ¬—;
      if     атегори€ќтветственности    = 0     then
      Template.CurrentCell = Template.CellByField["јвтор‘амили€"];
      elsif  атегори€ќтветственности    = 1     then
      Template.CurrentCell = Template.CellByField["ѕќ_√еоЌаим.Ќаим"];
      elsif  атегори€ќтветственности    = 2     then
      Template.CurrentCell = Template.CellByField["¬ќ_√еоЌаим.Ќаим"];
      end;
    elsif               Cell.Contents = "2 раткое—одержание—татьи0ƒоп"                    then
      if     атегори€ќтветственности    = 0     then
      Template.CurrentCell = Template.CellByField["јвтор‘амили€"];
      elsif  атегори€ќтветственности    = 1     then
      Template.CurrentCell = Template.CellByField["ѕќ_√еоЌаим.Ќаим"];
      elsif  атегори€ќтветственности    = 2     then
      Template.CurrentCell = Template.CellByField["¬ќ_√еоЌаим.Ќаим"];
      end;
    elsif               Cell.Contents = "ќтветственность1"                              then
      ¬ид нопок ¬—;
    elsif               Cell.Contents = "јвтор‘амили€"                                  then
      Template.CurrentCell = Template.CellByField["–убрика”ƒ . од"];
    --
    elsif               Cell.Contents = "ѕќ_√еоЌаим.Ќаим"                               then
      Template.CurrentCell = Template.CellByField["ѕќ_Ќаименование.Ќаим"];
    elsif               Cell.Contents = "ѕќ_ оллектив.Ќаим"                             then
      Template.CurrentCell = Template.CellByField["ѕќ_—труктѕодр.Ќаим"];
    elsif               Cell.Contents = "ѕќ_—труктѕодр.Ќаим"                            then
      Template.CurrentCell = Template.CellByField["ѕќ_¬ремѕодр.Ќаим"];
    elsif               Cell.Contents = "ѕќ_¬ремѕодр.Ќаим"                              then
      Template.CurrentCell = Template.CellByField["ѕќ_Ќомер"];
    elsif               Cell.Contents = "ѕќ_Ќомер"                                      then
      Template.CurrentCell = Template.CellByField["ѕќ_ƒаты"];
    elsif               Cell.Contents = "ѕќ_ƒаты"                                       then
      Template.CurrentCell = Template.CellByField["ѕќ_ћесто"];
    elsif               Cell.Contents = "¬ќ_√еоЌаим.Ќаим"                               then
      Template.CurrentCell = Template.CellByField["¬ќ_Ќаименование.Ќаим"];
    --
    elsif               Cell.Contents = "¬ќ_√еоЌаим.Ќаим"                               then
      Template.CurrentCell = Template.CellByField["¬ќ_Ќаименование.Ќаим"];
    elsif               Cell.Contents = "¬ќ_ оллектив.Ќаим"                             then
      Template.CurrentCell = Template.CellByField["¬ќ_—труктѕодр.Ќаим"];
    elsif               Cell.Contents = "¬ќ_—труктѕодр.Ќаим"                            then
      Template.CurrentCell = Template.CellByField["¬ќ_¬ремѕодр.Ќаим"];
    elsif               Cell.Contents = "¬ќ_¬ремѕодр.Ќаим"                              then
      Template.CurrentCell = Template.CellByField["¬ќ_Ќомер"];
    elsif               Cell.Contents = "¬ќ_Ќомер"                                      then
      Template.CurrentCell = Template.CellByField["¬ќ_ƒаты"];
    elsif               Cell.Contents = "¬ќ_ƒаты"                                       then
      Template.CurrentCell = Template.CellByField["¬ќ_ћесто"];
    --
    elsif               Cell.Contents = "»ндекс”ƒ . од"                              then
      Template.CurrentCell = Template.CellByField["»ндексЅЅ . од"];
    elsif               Cell.Contents = "»ндекс”ƒ .Ќаим"                                then
      Template.CurrentCell = Template.CellByField["»ндексЅЅ .Ќаим"];
    --
    elsif               Cell.Contents = "–убрика√ео.Ќаим"                               then
      Template.CurrentCell = Template.CellByField["ѕод–убрика—ист. рЌаим"];
    elsif               Cell.Contents = "Ќазвание—ерии.Ќаим"                            then
      Template.CurrentCell = Template.CellByField["Ќомер—ерии"];
    ------------------------
    elsif               Cell.Contents = "ќтветственность2"                              then
      ¬ид нопок ¬—;
    end;
    --доп. тур
    if                  Cell.Contents = "2Ќазвание—ерииѕриложений.Ќаим0"                  then
      Template.CurrentCell = Template.CellByField["Ќомер¬ыпуска"];
    end;
  end;

  func ѕоле_ѕри¬ыводе_ѕунктир(Cell :TemplateCell; Value :Variant; Action :Template.OutputTypes; var Format :String) :Variant;
    var cloWidth :Numeric;
    var txtFilling :String;
    cloWidth = CellColumn(Cell).Width;
    while Cell.TextWidth(txtFilling) < cloWidth do
      txtFilling = txtFilling + '„';  -- шрифт Symbol
    od;
    Result = txtFilling;
  end;



-- 2_ќбработчики событий прочих объектов шаблона0. --

  func ѕриѕереключении‘рейма(Frame :TemplateFrame; NewFrame :TemplateFrame):Logical;
  var Ќова€ атегори€ќтветственности:integer;
    if NewFrame.Name="фреймќсновныеѕол€"        then
      if     атегори€ќтветственности    = 0     then
        Template.CurrentFrame           = Template.FrameByName["фрейм»ндјвторы"];
      elsif  атегори€ќтветственности    = 1     then
        Template.CurrentFrame           = Template.FrameByName["фреймѕостќрг"];
      elsif  атегори€ќтветственности    = 2     then
        Template.CurrentFrame           = Template.FrameByName["фрейм¬ремќрг"];
      end;
    end;
    ----------
    if     NewFrame.Name="фрейм»ндјвторы"       then    Ќова€ атегори€ќтветственности    = 0;
    elsif  NewFrame.Name="фреймѕостќрг"         then    Ќова€ атегори€ќтветственности    = 1;
    elsif  NewFrame.Name="фрейм¬ремќрг"         then    Ќова€ атегори€ќтветственности    = 2;
    end;
    ----------
    if     NewFrame.Name="фреймќсновныеѕол€"    then
      if Ќазвание—татьи=""                      or
         Ќазвание—татьи="Ќова€ стать€..."       then
        Template.CurrentCell = Template.CellByField["Ќазвание—татьи"];
      end;
    end;
    ----------
    if    NewFrame.Name="фрейм»ндјвторы"        or
          NewFrame.Name="фреймѕостќрг"          or
          NewFrame.Name="фрейм¬ремќрг"          then
      if Ќова€ атегори€ќтветственности<> атегори€ќтветственности then
        if     атегори€ќтветственности    = 0     then
          if CmOk = EnqOkCancel('ƒанные на закладке "»ндивидуальные авторы" будут утер€ны! ѕродолжить?')  then
            јвтор‘амили€                = nil;
            јвтор»нициалы               = nil;
            јвтор„астица                = nil;
            јвторƒоп—ведени€            = nil;
            record.–азночтени€.Clear;
            ќтветственность1            = nil;
            Result = True;
          else
            Return false;
          end;
        elsif  атегори€ќтветственности    = 1     then
          if CmOk = EnqOkCancel('ƒанные на закладке "ѕосто€нна€ организаци€" будут утер€ны! ѕродолжить?')  then
            ѕќ_Ќаименование    = nil;
            ѕќ_√еоЌаим          = nil;
            ѕќ_ оллектив        = nil;
            ѕќ_—труктѕодр       = nil;
            ѕќ_¬ремѕодр         = nil;
            ѕќ_Ќомер            = nil;
            ѕќ_ƒаты             = nil;
            ѕќ_ћесто            = nil;
            Result = True;
          else
            Return false;
          end;
        elsif  атегори€ќтветственности    = 2     then
          if CmOk = EnqOkCancel('ƒанные на закладке "¬ременна€ организаци€" будут утер€ны! ѕродолжить?')  then
            ¬ќ_Ќаименование    = nil;
            ¬ќ_√еоЌаим          = nil;
            ¬ќ_ оллектив        = nil;
            ¬ќ_—труктѕодр       = nil;
            ¬ќ_¬ремѕодр         = nil;
            ¬ќ_Ќомер            = nil;
            ¬ќ_ƒаты             = nil;
            ¬ќ_ћесто            = nil;
            Result = True;
          else
            Return false;
          end;
        end;
      end;
    end;
    if     NewFrame.Name="фрейм»ндјвторы"       then     атегори€ќтветственности    = 0;
    elsif  NewFrame.Name="фреймѕостќрг"         then     атегори€ќтветственности    = 1;
    elsif  NewFrame.Name="фрейм¬ремќрг"         then     атегори€ќтветственности    = 2;
    end;
    if     NewFrame.Name="фреймЅиб«апись"       then    ѕоле_ѕриЌажатии_‘ормированиеќписани€(nil, Template.SingleClick);
    end;
    if     NewFrame.Name="фреймBChMarc"         then    ‘ормирование¬ходного‘ормата– ѕ;
    end;

    Result = True; -- –азрешаем переключение
  end;

  proc —екцѕосле¬ставки(Section :TemplateSection; Index :Integer);
    if Section.Name     = "секцЌомера√азеты"    then
      if Index>1                                then
        Ќомера√азеты[index].√од¬ыпуска = Ќомера√азеты[index-1].√од¬ыпуска;
      end;
    end;
  end;


  -- —тандартные процедуры панели управлени€ формой (справа)
  proc кн«акрытьѕриЌажатии(Sender :Button);
    Ѕланк«акрываетс€ = True;
    if BlankOption[AutoPostOrCancel] = True then
      EditorPost;
    end;
    Close(cmOK);
  end;

  proc кнќтменаѕриЌажатии(Sender :Button);
    Ѕланк«акрываетс€ = True;
    if (BlankOption[AutoPostOrCancel] = True) and (—»—2.’ранимыеЌастройки.¬ернуть¬ыдавать«апросЌаѕодтверждение = False) then
      EditorCancel;
    end;
    if Ѕланк«акрываетс€ = True then
      Close(cmCancel);
    end;
  end;

  proc кнѕредѕриЌажатии(Sender :Button);
    ExecuteCommand("Kernel.Card.Run.PrevRec");
  end;

  proc кн—ледѕриЌажатии(Sender :Button);
    ExecuteCommand("Kernel.Card.Run.NextRec");
  end;

-- 2_ƒополнительные команды0. --



-- 2_¬спомогательные методы0. --

  proc ¬ид«аголовкаќкна;
  --ѕроцедура обновл€ет вид заголовка окна, отрисовыва€ название газеты, год и выпуск летописи
  --¬ведена дл€ экономии экранного пространства
    if √азета.ЌазваниеЋ√—<>""   then
      Window.Caption      = √азета.ЌазваниеЋ√—;
      if ¬ыпускЋетописи>0       then
        if Length(Ќазвание—татьи)<=25 then
          Window.Caption      = √азета.ЌазваниеЋ√— +
                                ' "' + Ќазвание—татьи + '"' +
                                ' [ Ћ√— є ' + Str(¬ыпускЋетописи) + ' / ' + Str(√одЋетописи) +']';
        else
          Window.Caption      = √азета.ЌазваниеЋ√— +
                                ' "' + SubStr(Ќазвание—татьи, 1, 22) + '..."' +
                                ' [ Ћ√— є ' + Str(¬ыпускЋетописи) + ' / ' + Str(√одЋетописи) + ']';
        end;

      else
        if Length(Ќазвание—татьи)<=25 then
          Window.Caption      = √азета.ЌазваниеЋ√— +
                                ' "' + Ќазвание—татьи + '"' +
                                ' [¬џѕ”—  Ћ≈“ќѕ»—» Ќ≈ ” ј«јЌ!]';
        else
          Window.Caption      = √азета.ЌазваниеЋ√— +
                                ' "' + SubStr(Ќазвание—татьи, 1, 22) + '..."' +
                                ' [¬џѕ”—  Ћ≈“ќѕ»—» Ќ≈ ” ј«јЌ!]';
        end;
      end;
    else
      Window.Caption      = √азета.Ќазваниеќсн;
      Message('ѕожалуста, уточните условное название газеты дл€ Ћ√—!');

    end;
  end;

  proc ¬ид“очностиƒат¬ыхода;
  --процедура управл€ет видом секций "секцЌачалоЌомера" и "Ќомера газет"
  var k         : integer;
    --.....Ќомера газет.....--
    ƒата¬ыхода—тр                       = nil;
    if секцЌомера√азеты.Count>0                         then
      for k = 1..секцЌомера√азеты.Count                 do
        if  Ќомера√азеты[k].“очностьƒаты¬ыхода=0        then
             “очностьƒаты¬ыходаƒень [k] = true;
             “очностьƒаты¬ыходаћес€ц[k] = false;
             if Ќомера√азеты[k].ƒата¬ыхода <> nil       then
               ƒата¬ыхода—тр[k]         = Str(Ќомера√азеты[k].ƒата¬ыхода);
             end;
        else
             “очностьƒаты¬ыходаƒень [k] = false;
             “очностьƒаты¬ыходаћес€ц[k] = true;
             if Ќомера√азеты[k].ƒата¬ыхода <> nil       then
               if Ќомера√азеты[k].ƒата¬ыхода <> Dat(1,Mon(Ќомера√азеты[k].ƒата¬ыхода),Year(Ќомера√азеты[k].ƒата¬ыхода)) then
                 Ќомера√азеты[k].ƒата¬ыхода  =  Dat(1,Mon(Ќомера√азеты[k].ƒата¬ыхода),Year(Ќомера√азеты[k].ƒата¬ыхода));
               end;
               ƒата¬ыхода—тр[k]         = – ѕ_—»—.DateDescription.¬—троку(Ќомера√азеты[k].ƒата¬ыхода,– ѕ_—»—.DateDescription.dfYYYYMMM);
             end;
        end;
      end;
    else
      “очностьƒаты¬ыходаƒень [1] = true;
      “очностьƒаты¬ыходаћес€ц[1] = false;
    end;
    --.....Ќачало номера газет.....--
    “очностьƒатыЌачалаЌомераƒень        = false;
    “очностьƒатыЌачалаЌомераћес€ц       = false;
    if “очностьƒатыЌачалаЌомера = 0                     then
      “очностьƒатыЌачалаЌомераƒень    = true;
      --секцЌачалоЌомера.CellByField["ƒатаЌачалаЌомера"].FieldFormat = "dd/mm/yyyy";
      ƒатаЌачалаЌомера—тр = Str(ƒатаЌачалаЌомера);
    else
      if ƒатаЌачалаЌомера <> nil                                               then
      if ƒатаЌачалаЌомера<>Dat(1,Mon(ƒатаЌачалаЌомера),Year(ƒатаЌачалаЌомера)) then
      ƒатаЌачалаЌомера = Dat(1,Mon(ƒатаЌачалаЌомера),Year(ƒатаЌачалаЌомера));
      end;
      end;
      “очностьƒатыЌачалаЌомераћес€ц   = true;
      --секцЌачалоЌомера.CellByField["ƒатаЌачалаЌомера"].FieldFormat = "mmm/yyyy";
      if ƒатаЌачалаЌомера = nil         then
      ƒатаЌачалаЌомера—тр  = – ѕ_—»—.DateDescription.¬—троку(ƒатаЌачалаЌомера,– ѕ_—»—.DateDescription.dfYYYYMMM);
      end;
    end;
  end;

  proc ¬ид—крываемых—екций;
    --закл. »здание
    if секц√азета1.Cell[1,3].Contents                   = SymbolExpanded  then
       секц√азета1.Row[5].Visible                       = true;
       секц√азета1.Row[6].Visible                       = true;
       секц√азета1.Row[7].Visible                       = true;
       секц√азета2.Visible                              = true;
       секц√азета3.Visible                              = true;
       секц√азета4.Visible                              = true;
       секц√азета5.Visible                              = true;
       секц√азета6.Visible                              = true;
       секц√азета1.Cell[3,4].Border                     = [0,1,1,0];
       секц√азета1.Cell[3,5].Border                     = [0,0,1,0];
    else
       секц√азета1.Row[5].Visible                       = false;
       секц√азета1.Row[6].Visible                       = false;
       секц√азета1.Row[7].Visible                       = false;
       секц√азета2.Visible                              = false;
       секц√азета3.Visible                              = false;
       секц√азета4.Visible                              = false;
       секц√азета5.Visible                              = false;
       секц√азета6.Visible                              = false;
       секц√азета1.Cell[3,4].Border                     = [0,1,0,0];
       секц√азета1.Cell[3,5].Border                     = [0,0,0,0];
    end;
    --
    if (ƒата арточек <> nil) then
      секц¬ыпуск арточки1.Cell[1,3].Contents = SymbolExpanded;
      секц–бЅЅ 1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секц¬ыпуск арточки1.Cell[1,3].Contents = SymbolExpanded) then
      секц¬ыпуск арточки2.Visible          = true;
      секц¬ыпуск арточки3.Visible          = true;
      секц¬ыпуск арточки1.Cell[2,4].Border = [0,1,1,0];
      секц¬ыпуск арточки1.Cell[2,5].Border = [0,0,1,0];
    else
      секц¬ыпуск арточки2.Visible          = false;
      секц¬ыпуск арточки3.Visible          = false;
      секц¬ыпуск арточки1.Cell[2,4].Border = [0,1,0,0];
      секц¬ыпуск арточки1.Cell[2,5].Border = [0,0,0,0];
    fi;


    -----------------------
    --звкл. ќсновные пол€
    if (јвтор„астица <> nil or јвторƒоп—ведени€ <> nil or –азночтени€.Count > 0) then
      —екцјвтор3.Cell[1,1].Contents  = SymbolExpanded;
    fi;
    if (—екцјвтор3.Cell[1,1].Contents = SymbolExpanded) then
      —екцјвтор3.Cell[3,2].Border  = [0,1,1,0];
      —екцјвтор3.Cell[3,3].Border  = [0,0,1,0];
      —екцјвтор3.Row[4].Visible    = true;
      —екцјвтор3.Column[6].Visible = true;
      —екцјвтор3.Column[7].Visible = true;
      —екцјвтор4.Visible           = true;
    else
      —екцјвтор3.Cell[3,2].Border  = [0,1,0,0];
      —екцјвтор3.Cell[3,3].Border  = [0,0,0,0];
      —екцјвтор3.Row[4].Visible    = false;
      —екцјвтор3.Column[6].Visible = false;
      —екцјвтор3.Column[7].Visible = false;
      —екцјвтор4.Visible           = false;
    fi;
    -----------------------
    if true in [(ѕќ_ оллектив.Ќаим <> nil),(ѕќ_—труктѕодр.Ќаим <> nil),(ѕќ_¬ремѕодр.Ќаим <> nil),(ѕќ_Ќомер <> nil),(ѕќ_ƒаты <> nil),(ѕќ_ћесто <> nil)] then
      секцѕостќрг4.Cell[2,1].Contents = SymbolExpanded;
    fi;
    if (секцѕостќрг4.Cell[2,1].Contents = SymbolExpanded) then
      секцѕостќрг4.Cell[4,2].Border = [0,1,1,0];
      секцѕостќрг4.Cell[4,3].Border = [0,0,1,0];
      секцѕостќрг5.Visible          = true;
      секцѕостќрг6.Visible          = true;
      секцѕостќрг7.Visible          = true;
      секцѕостќрг8.Visible          = true;
      секцѕостќрг9.Visible          = true;
    else
      секцѕостќрг4.Cell[4,2].Border = [0,1,0,0];
      секцѕостќрг4.Cell[4,3].Border = [0,0,0,0];
      секцѕостќрг5.Visible          = false;
      секцѕостќрг6.Visible          = false;
      секцѕостќрг7.Visible          = false;
      секцѕостќрг8.Visible          = false;
      секцѕостќрг9.Visible          = false;
    fi;
    -----------------------
    if true in [(¬ќ_ оллектив.Ќаим <> nil),(¬ќ_—труктѕодр.Ќаим <> nil),(¬ќ_¬ремѕодр.Ќаим <> nil),(¬ќ_Ќомер <> nil),(¬ќ_ƒаты <> nil),(¬ќ_ћесто <> nil)] then
      секц¬ремќрг4.Cell[2,1].Contents = SymbolExpanded;
    fi;
    if (секц¬ремќрг4.Cell[2,1].Contents = SymbolExpanded) then
      секц¬ремќрг4.Cell[4,2].Border = [0,1,1,0];
      секц¬ремќрг4.Cell[4,3].Border = [0,0,1,0];
      секц¬ремќрг5.Visible          = true;
      секц¬ремќрг6.Visible          = true;
      секц¬ремќрг7.Visible          = true;
      секц¬ремќрг8.Visible          = true;
      секц¬ремќрг9.Visible          = true;
    else
      секц¬ремќрг4.Cell[4,2].Border = [0,1,0,0];
      секц¬ремќрг4.Cell[4,3].Border = [0,0,0,0];
      секц¬ремќрг5.Visible          = false;
      секц¬ремќрг6.Visible          = false;
      секц¬ремќрг7.Visible          = false;
      секц¬ремќрг8.Visible          = false;
      секц¬ремќрг9.Visible          = false;
    fi;
    -----------------------
    if (»ндексЅЅ .Count > 0) or (ƒата арточек <> nil) then
      секц–бЅЅ 1.Cell[1,3].Contents = SymbolExpanded;
      секц–бЅЅ 1.Row[6].Visible     = true;
    fi;
    if (секц–бЅЅ 1.Cell[1,3].Contents = SymbolExpanded) then
      секц–бЅЅ 1.Cell[3,4].Border   = [0,1,1,0];
      секц–бЅЅ 1.Cell[3,5].Border   = [0,0,1,0];
      секц–бЅЅ 1.Row[6].Visible     = true;
      секц–бЅЅ 2.Visible            = true;
    else
      секц–бЅЅ 1.Cell[3,4].Border   = [0,1,0,0];
      секц–бЅЅ 1.Cell[3,5].Border   = [0,0,0,0];
      секц–бЅЅ 1.Row[6].Visible     = false;
      секц–бЅЅ 2.Visible            = false;
    fi;
    -----------------------
    if (»ндекс¬“– <> nil) then
      секц¬“–1.Cell[1,3].Contents   = SymbolExpanded;
    fi;
    if (секц¬“–1.Cell[1,3].Contents = SymbolExpanded) then
      секц¬“–1.Cell[3,4].Border     = [0,1,1,0];
      секц¬“–1.Cell[3,5].Border     = [0,0,1,0];
      секц¬“–2.Visible              = true;
    else
      секц¬“–1.Cell[3,4].Border     = [0,1,0,0];
      секц¬“–1.Cell[3,5].Border     = [0,0,0,0];
      секц¬“–2.Visible              = false;
    fi;
    -----------------------
    if (»ндекс√ео.Count > 0) then
      секц–б√ео1.Cell[1,3].Contents = SymbolExpanded;
    end;
    if (секц–б√ео1.Cell[1,3].Contents = SymbolExpanded) then
      секц–б√ео1.Cell[3,4].Border   = [0,1,1,0];
      секц–б√ео1.Cell[3,5].Border   = [0,0,1,0];
      секц–б√ео2.Visible            = true;
    else
      секц–б√ео1.Cell[3,4].Border   = [0,1,0,0];
      секц–б√ео1.Cell[3,5].Border   = [0,0,0,0];
      секц–б√ео2.Visible            = false;
    fi;
    -----------------------
    if (Ќомераѕриложений.Count > 0) or (Ќазвание—ерииѕриложений <> nil) then
      секц—ери€1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секц—ери€1.Cell[1,3].Contents = SymbolExpanded) then
      секц—ери€1.Cell[3,4].Border = [0,1,1,0];
      секц—ери€1.Cell[3,5].Border = [0,0,1,0];
      секц—ери€2.Visible          = true;
      секц—ери€3.Visible          = true;
    else
      секц—ери€1.Cell[3,4].Border = [0,1,0,0];
      секц—ери€1.Cell[3,5].Border = [0,0,0,0];
      секц—ери€2.Visible          = false;
      секц—ери€3.Visible          = false;
    fi;
    -----------------------
    if (true in [(ѕримќ«аглавии—ерии <> nil),(ѕримќбјвторах—татьи <> nil),(ѕримќ—в€зи—татьи—ƒр <> nil),(ѕримќ—одержании—татьи <> nil),(ѕримќѕриложении <> nil)]) then
      секцѕрим1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секцѕрим1.Cell[1,3].Contents = SymbolExpanded) then
      секцѕрим1.Cell[3,4].Border  = [0,1,1,0];
      секцѕрим1.Cell[3,5].Border  = [0,0,1,0];
      секцѕрим2.Visible           = true;
      секцѕрим3.Visible           = true;
      секцѕрим4.Visible           = true;
      секцѕрим5.Visible           = true;
      секцѕрим6.Visible           = true;
    else
      секцѕрим1.Cell[3,4].Border  = [0,1,0,0];
      секцѕрим1.Cell[3,5].Border  = [0,0,0,0];
      секцѕрим2.Visible           = false;
      секцѕрим3.Visible           = false;
      секцѕрим4.Visible           = false;
      секцѕрим5.Visible           = false;
      секцѕрим6.Visible           = false;
    fi;
    -----------------------
    --закл.ѕерсоналии
    if (ѕерсоналии.Count > 0) then
      секцѕерсоналии1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секцѕерсоналии1.Cell[1,3].Contents = SymbolExpanded) then
      секцѕерсоналии1.Cell[3,4].Border   = [0,1,1,0];
      секцѕерсоналии1.Cell[3,5].Border   = [0,0,1,0];
      секцѕерсоналии1.Column[5].Visible  = true;
      секцѕерсоналии1.Column[6].Visible  = true;
      секцѕерсоналии1.Column[7].Visible  = true;
      секцѕерсоналии2.Visible            = true;
    else
      секцѕерсоналии1.Cell[3,4].Border   = [0,1,0,0];
      секцѕерсоналии1.Cell[3,5].Border   = [0,0,0,0];
      секцѕерсоналии1.Column[5].Visible  = false;
      секцѕерсоналии1.Column[6].Visible  = false;
      секцѕерсоналии1.Column[7].Visible  = false;
      секцѕерсоналии2.Visible            = false;
    fi;
    -----------------------
    if (јвторыЌе”казанные.Count > 0) then
      секцјвторыЌе”казанные1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секцјвторыЌе”казанные1.Cell[1,3].Contents = SymbolExpanded) then
      секцјвторыЌе”казанные1.Cell[3,4].Border   = [0,1,1,0];
      секцјвторыЌе”казанные1.Cell[3,5].Border   = [0,0,1,0];
      секцјвторыЌе”казанные1.Column[5].Visible  = true;
      секцјвторыЌе”казанные1.Column[6].Visible  = true;
      секцјвторыЌе”казанные1.Column[7].Visible  = true;
      секцјвторыЌе”казанные2.Visible            = true;
    else
      секцјвторыЌе”казанные1.Cell[3,4].Border   = [0,1,0,0];
      секцјвторыЌе”казанные1.Cell[3,5].Border   = [0,0,0,0];
      секцјвторыЌе”казанные1.Column[5].Visible  = false;
      секцјвторыЌе”казанные1.Column[6].Visible  = false;
      секцјвторыЌе”казанные1.Column[7].Visible  = false;
      секцјвторыЌе”казанные2.Visible            = false;
    fi;
    -----------------------
    if (”частникиЅесед.Count > 0) then
      секц”частникиЅесед1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секц”частникиЅесед1.Cell[1,3].Contents = SymbolExpanded) then
      секц”частникиЅесед1.Cell[3,4].Border  = [0,1,1,0];
      секц”частникиЅесед1.Cell[3,5].Border  = [0,0,1,0];
      секц”частникиЅесед1.Column[5].Visible = true;
      секц”частникиЅесед1.Column[6].Visible = true;
      секц”частникиЅесед1.Column[7].Visible = true;
      секц”частникиЅесед2.Visible           = true;
    else
      секц”частникиЅесед1.Cell[3,4].Border  = [0,1,0,0];
      секц”частникиЅесед1.Cell[3,5].Border  = [0,0,0,0];
      секц”частникиЅесед1.Column[5].Visible = false;
      секц”частникиЅесед1.Column[6].Visible = false;
      секц”частникиЅесед1.Column[7].Visible = false;
      секц”частникиЅесед2.Visible           = false;
    fi;
    -----------------------
    if (–едакторы.Count > 0) then
      секц–едакторы1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секц–едакторы1.Cell[1,3].Contents = SymbolExpanded) then
      секц–едакторы1.Cell[3,4].Border  = [0,1,1,0];
      секц–едакторы1.Cell[3,5].Border  = [0,0,1,0];
      секц–едакторы1.Column[5].Visible = true;
      секц–едакторы1.Column[6].Visible = true;
      секц–едакторы1.Column[7].Visible = true;
      секц–едакторы2.Visible           = true;
    else
      секц–едакторы1.Cell[3,4].Border  = [0,1,0,0];
      секц–едакторы1.Cell[3,5].Border  = [0,0,0,0];
      секц–едакторы1.Column[5].Visible = false;
      секц–едакторы1.Column[6].Visible = false;
      секц–едакторы1.Column[7].Visible = false;
      секц–едакторы2.Visible           = false;
    fi;
    -----------------------
    if (ѕереводчики.Count > 0) then
      секцѕереводчики1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секцѕереводчики1.Cell[1,3].Contents = SymbolExpanded) then
      секцѕереводчики1.Cell[3,4].Border  = [0,1,1,0];
      секцѕереводчики1.Cell[3,5].Border  = [0,0,1,0];
      секцѕереводчики1.Column[5].Visible = true;
      секцѕереводчики1.Column[6].Visible = true;
      секцѕереводчики1.Column[7].Visible = true;
      секцѕереводчики2.Visible           = true;
    else
      секцѕереводчики1.Cell[3,4].Border  = [0,1,0,0];
      секцѕереводчики1.Cell[3,5].Border  = [0,0,0,0];
      секцѕереводчики1.Column[5].Visible = false;
      секцѕереводчики1.Column[6].Visible = false;
      секцѕереводчики1.Column[7].Visible = false;
      секцѕереводчики2.Visible           = false;
    fi;
    -----------------------
    if (јвторы¬ступ—татей.Count > 0) then
      секцјвторы¬ступ—татей1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секцјвторы¬ступ—татей1.Cell[1,3].Contents = SymbolExpanded) then
      секцјвторы¬ступ—татей1.Cell[3,4].Border  = [0,1,1,0];
      секцјвторы¬ступ—татей1.Cell[3,5].Border  = [0,0,1,0];
      секцјвторы¬ступ—татей1.Column[5].Visible = true;
      секцјвторы¬ступ—татей1.Column[6].Visible = true;
      секцјвторы¬ступ—татей1.Column[7].Visible = true;
      секцјвторы¬ступ—татей2.Visible           = true;
    else
      секцјвторы¬ступ—татей1.Cell[3,4].Border  = [0,1,0,0];
      секцјвторы¬ступ—татей1.Cell[3,5].Border  = [0,0,0,0];
      секцјвторы¬ступ—татей1.Column[5].Visible = false;
      секцјвторы¬ступ—татей1.Column[6].Visible = false;
      секцјвторы¬ступ—татей1.Column[7].Visible = false;
      секцјвторы¬ступ—татей2.Visible           = false;
    fi;
    -----------------------
    if (јвторыЋитќбработки.Count > 0) then
      секцјвторыЋитќбработки1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секцјвторыЋитќбработки1.Cell[1,3].Contents = SymbolExpanded) then
      секцјвторыЋитќбработки1.Cell[3,4].Border  = [0,1,1,0];
      секцјвторыЋитќбработки1.Cell[3,5].Border  = [0,0,1,0];
      секцјвторыЋитќбработки1.Column[5].Visible = true;
      секцјвторыЋитќбработки1.Column[6].Visible = true;
      секцјвторыЋитќбработки1.Column[7].Visible = true;
      секцјвторыЋитќбработки2.Visible           = true;
    else
      секцјвторыЋитќбработки1.Cell[3,4].Border  = [0,1,0,0];
      секцјвторыЋитќбработки1.Cell[3,5].Border  = [0,0,0,0];
      секцјвторыЋитќбработки1.Column[5].Visible = false;
      секцјвторыЋитќбработки1.Column[6].Visible = false;
      секцјвторыЋитќбработки1.Column[7].Visible = false;
      секцјвторыЋитќбработки2.Visible           = false;
    fi;
    -----------------------
    if (»ллюстраторы.Count > 0) then
      секц»ллюстраторы1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секц»ллюстраторы1.Cell[1,3].Contents = SymbolExpanded) then
      секц»ллюстраторы1.Cell[3,4].Border  = [0,1,1,0];
      секц»ллюстраторы1.Cell[3,5].Border  = [0,0,1,0];
      секц»ллюстраторы1.Column[5].Visible = true;
      секц»ллюстраторы1.Column[6].Visible = true;
      секц»ллюстраторы1.Column[7].Visible = true;
      секц»ллюстраторы2.Visible           = true;
    else
      секц»ллюстраторы1.Cell[3,4].Border  = [0,1,0,0];
      секц»ллюстраторы1.Cell[3,5].Border  = [0,0,0,0];
      секц»ллюстраторы1.Column[5].Visible = false;
      секц»ллюстраторы1.Column[6].Visible = false;
      секц»ллюстраторы1.Column[7].Visible = false;
      секц»ллюстраторы2.Visible           = false;
    fi;
    -----------------------
    if (јвторы»нсценировок.Count > 0) then
      секцјвторы»нсценировок1.Cell[1,3].Contents       = SymbolExpanded;
    fi;
    if (секцјвторы»нсценировок1.Cell[1,3].Contents = SymbolExpanded) then
      секцјвторы»нсценировок1.Cell[3,4].Border  = [0,1,1,0];
      секцјвторы»нсценировок1.Cell[3,5].Border  = [0,0,1,0];
      секцјвторы»нсценировок1.Column[5].Visible = true;
      секцјвторы»нсценировок1.Column[6].Visible = true;
      секцјвторы»нсценировок1.Column[7].Visible = true;
      секцјвторы»нсценировок2.Visible           = true;
    else
      секцјвторы»нсценировок1.Cell[3,4].Border  = [0,1,0,0];
      секцјвторы»нсценировок1.Cell[3,5].Border  = [0,0,0,0];
      секцјвторы»нсценировок1.Column[5].Visible = false;
      секцјвторы»нсценировок1.Column[6].Visible = false;
      секцјвторы»нсценировок1.Column[7].Visible = false;
      секцјвторы»нсценировок2.Visible           = false;
    fi;
    -----------------------
    if (јвторыѕрочие.Count > 0) then
      секцјвторыѕрочие1.Cell[1,3].Contents = SymbolExpanded;
    fi;
    if (секцјвторыѕрочие1.Cell[1,3].Contents = SymbolExpanded) then
      секцјвторыѕрочие1.Cell[3,4].Border  = [0,1,1,0];
      секцјвторыѕрочие1.Cell[3,5].Border  = [0,0,1,0];
      секцјвторыѕрочие1.Column[5].Visible = true;
      секцјвторыѕрочие1.Column[6].Visible = true;
      секцјвторыѕрочие1.Column[7].Visible = true;
      секцјвторыѕрочие2.Visible           = true;
    else
      секцјвторыѕрочие1.Cell[3,4].Border  = [0,1,0,0];
      секцјвторыѕрочие1.Cell[3,5].Border  = [0,0,0,0];
      секцјвторыѕрочие1.Column[5].Visible = false;
      секцјвторыѕрочие1.Column[6].Visible = false;
      секцјвторыѕрочие1.Column[7].Visible = false;
      секцјвторыѕрочие2.Visible           = false;
    fi;
  end;

  proc ¬ид нопок ¬—;
    if Pos("[", раткое—одержание—татьи)>0       or
       Pos("]", раткое—одержание—татьи)>0       then
       ¬—0                              = true;
    else
       ¬—0                              = false;
    end;
    if Pos("[",ќтветственность1)>0              or
       Pos("]",ќтветственность1)>0              then
       ¬—1                              = true;
    else
       ¬—1                              = false;
    end;
    if Pos("[",ќтветственность2)>0              or
       Pos("]",ќтветственность2)>0              then
       ¬—2                              = true;
    else
       ¬—2                              = false;
    end;
  end;

  proc ‘ормирование¬ходного‘ормата– ѕ;
  --‘ормирование записи во входном формаие – ѕ.
  --¬ыполн€етс€ перед сохранением записи.
  var k,kk      :integer;
  var z         :integer;
  var y         :integer;
  Ёкспорт– ѕƒанные       =nil;
  секцBChMarc.Count     = 0;
--  Message("245 "+Chr(245));
--  Message(Str(Ord(' ')));
--  Message("0 "+Chr(0));
--  Message(Str(Ord(' ')));
--  Message("251 "+Chr(251));
--  --»детификатор (?) записи --==================================================
--  k                             = k+1;
--  секцBChMarc.InsertFrame(k);
--  --Ёкспорт– ѕƒанные[k]            = ExtId;
--  Ёкспорт– ѕƒанные[k]            = – ѕ_—»—.StdCode.FixStr(Str(DocId),"0",10);
--  --2_0010. --======================================================================
--  k                             = k+1;
--  секцBChMarc.InsertFrame(k);
--    if   ѕ√ = false             then
--      if —татусѕодготовка =true then
--      Message("—тать€ <"+Ќазвание—татьи+"> не подготовлена! ‘ормирование файла дл€ импорта в формат – ѕ будет выполнено с ошибками!");
--      Ёкспорт– ѕƒанные[k]        = '001';
--      else
--      Ёкспорт– ѕƒанные[k]        = '001 √Ћ';
--      end;
--    else
--      if —татусѕодготовка =true then
--      Ёкспорт– ѕƒанные[k]        = '001 ѕ√';
--      else
--      Ёкспорт– ѕƒанные[k]        = '001 √Ћѕ√';
--      end;
--    end;
    --2_0100. --====================================================================
    if √азета <> nil            then
      k                         = k+1;
      секцBChMarc.InsertFrame(k);
      if √азета. од»здани€<>nil then
        Ёкспорт– ѕƒанные[k]      = '010 '+√азета. од»здани€+SubStr(Str(√одЋетописи),3,2);
      else
        --Message("ƒл€ газеты <"+√азета.Ќазваниеќсн+"> не назначен условный код! ‘ормирование файла дл€ импорта в формат – ѕ будет выполнено с ошибками!");
        Ёкспорт– ѕƒанные[k]      = '010 00'+SubStr(Str(√одЋетописи),3,2);
      end;
    --2_010^д^(0. --================================================================
      for z = 1..Record.Ќомера√азеты.Count do
        if Ќомера√азеты[z].ƒата¬ыхода <> nil            then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^д '+
                                  – ѕ_—»—.StdCode.FixStr(Str(Day(Ќомера√азеты[z].ƒата¬ыхода)),"0",2)+
                                  – ѕ_—»—.StdCode.FixStr(Str(Mon(Ќомера√азеты[z].ƒата¬ыхода)),"0",2);
        end;
        if Ќомера√азеты[z].Ќомер      <> nil            then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+Ќомера√азеты[z].Ќомер;
        end;
      end;
    else
      Message("ƒл€ статьи <"+Ќазвание—татьи+"> не указана газета! ‘ормирование файла дл€ импорта в формат – ѕ будет выполнено с ошибками!");
    end;

    --2_0190. --====================================================================
    if √азета <> nil            then
      k                         = k+1;
      секцBChMarc.InsertFrame(k);
      if √азета.Ќазваниеќсн<>nil        then
        --Ёкспорт– ѕƒанные[k]      = '019 '+√азета.Ќазваниеќсн;
        Ёкспорт– ѕƒанные[k]      = '019 '+Ќазваниеќсн;
        if √азета.ћеста»здани€.Count>0  then
          if    √азета.ћеста»здани€.Items[1].ћесто»здани€.ЌаимЅибл<>nil         then
        --Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^н '+√азета.Ќазваниеќсн+". - "+√азета.ћеста»здани€.Items[1].ћесто»здани€.ЌаимЅибл;
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^н '+Ќазваниеќсн+". - "+√азета.ћеста»здани€.Items[1].ћесто»здани€.ЌаимЅибл;
          else
            if    √азета.ћеста»здани€.Items[1].ћесто»здани€.Ќаим<>nil           then
        --Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^н '+√азета.Ќазваниеќсн+". - "+√азета.ћеста»здани€.Items[1].ћесто»здани€.Ќаим;
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^н '+Ќазваниеќсн+". - "+√азета.ћеста»здани€.Items[1].ћесто»здани€.Ќаим;
            end;
          end;
        end;
        --
        z = Record.Ќомера√азеты.Count;
        if z>0 and Ќомера√азеты[z].ƒата¬ыхода<>nil                              then
          if    ƒатаЌачалаЌомера<>Ќомера√азеты[z].ƒата¬ыхода                    and
                ƒатаЌачалаЌомера<>nil                                           then
            if   Year(ƒатаЌачалаЌомера)=Year(Ќомера√азеты[z].ƒата¬ыхода)        then
              if  Ќомера√азеты[z].√од¬ыпуска<>nil                               then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^г '+Str(Ќомера√азеты[z].√од¬ыпуска);
              else
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^г '+Str(Year(ƒатаЌачалаЌомера));
              end;
              if    “очностьƒатыЌачалаЌомера=0                                  then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^д '+Str(Day(ƒатаЌачалаЌомера));
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ћес€ца(Mon(ƒатаЌачалаЌомера));
              elsif “очностьƒатыЌачалаЌомера=1                                  then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ћес€ц(Mon(ƒатаЌачалаЌомера));
              end;
              if    Ќомера√азеты[z].“очностьƒаты¬ыхода=0                        then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^д '+Str(Day(Ќомера√азеты[z].ƒата¬ыхода));
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ћес€ца(Mon(Ќомера√азеты[z].ƒата¬ыхода));
              elsif Ќомера√азеты[z].“очностьƒаты¬ыхода=1                        then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ћес€ц(Mon(Ќомера√азеты[z].ƒата¬ыхода));
              end;
            else --Year(ƒатаЌачалаЌомера)<>Year(Ќомера√азеты[z].ƒата¬ыхода)
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^г '+Str(Year(ƒатаЌачалаЌомера));
              if    “очностьƒатыЌачалаЌомера=0                                  then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^д '+Str(Day(ƒатаЌачалаЌомера));
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ћес€ца(Mon(ƒатаЌачалаЌомера));
              elsif “очностьƒатыЌачалаЌомера=1                                  then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ћес€ц(Mon(ƒатаЌачалаЌомера));
              end;
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^г '+Str(Ќомера√азеты[z].√од¬ыпуска);
              if    Ќомера√азеты[z].“очностьƒаты¬ыхода=0                        then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^д '+Str(Day(Ќомера√азеты[z].ƒата¬ыхода));
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ћес€ца(Mon(Ќомера√азеты[z].ƒата¬ыхода));
              elsif Ќомера√азеты[z].“очностьƒаты¬ыхода=1                        then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ћес€ц(Mon(Ќомера√азеты[z].ƒата¬ыхода));
              end;
            end;
          elsif ƒатаЌачалаЌомера=Ќомера√азеты[z].ƒата¬ыхода                     then
            if  Ќомера√азеты[z].√од¬ыпуска<>nil                                 then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^г '+Str(Ќомера√азеты[z].√од¬ыпуска);
            end;
            if    Ќомера√азеты[z].“очностьƒаты¬ыхода=0                          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^д '+Str(Day(Ќомера√азеты[z].ƒата¬ыхода));
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ћес€ца(Mon(Ќомера√азеты[z].ƒата¬ыхода));
            elsif Ќомера√азеты[z].“очностьƒаты¬ыхода=1                          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ћес€ц(Mon(Ќомера√азеты[z].ƒата¬ыхода));
            end;
          end;
        end;
        --
        for z = 1..Record.Ќомера√азеты.Count do
        if Ќомера√азеты[z].Ќомер      <> nil            then
            Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+Ќомера√азеты[z].Ќомер;
        end;
        end;
        --
      end;
    end;


    --2_0530.  ?? --================================================================
    if  CreateDate<>nil                                 then
      k                         = k+1;
      секцBChMarc.InsertFrame(k);
      Ёкспорт– ѕƒанные[k]    = '053 '+
                               – ѕ_—»—.StdCode.FixStr(Str(Day(CreateDate)),"0",2)+"."+
                               – ѕ_—»—.StdCode.FixStr(Str(Mon(CreateDate)),"0",2)+"."+
                               SubStr(Str(Year(CreateDate)),3,2);
    end;
    --2_0820. --====================================================================
--    if  »ндекс”ƒ . од<>nil   then
--      k                         = k+1;
--      секцBChMarc.InsertFrame(k);
--      Ёкспорт– ѕƒанные[k]    = '082 '+»ндекс”ƒ . од;
--    end;
    if  »ндекс”ƒ .Count<>nil    then
      k                         = k+1;
      секцBChMarc.InsertFrame(k);
      Ёкспорт– ѕƒанные[k]    = '082 '+»ндекс”ƒ [1].–убрика”ƒ . од;
    end;
    --2_0870. --====================================================================
--    if  »ндексЅЅ . од<>nil   then
--      k                         = k+1;
--      секцBChMarc.InsertFrame(k);
--      Ёкспорт– ѕƒанные[k]    = '087 '+»ндексЅЅ . од;
--    end;
    if  »ндексЅЅ .Count<>nil   then
      k                         = k+1;
      секцBChMarc.InsertFrame(k);
      Ёкспорт– ѕƒанные[k]    = '087 '+»ндексЅЅ [1].–убрикаЅЅ . од;
    end;
    --2_100,108,110,1110. --========================================================
    --2_1000.--=====================================================================
    if     атегори€ќтветственности = 0          then
      k                         = k+1;
      Ёкспорт– ѕƒанные[k]    = '100 '+јвтор‘амили€;
      if  јвтор»нициалы <> nil                  then
        Ёкспорт– ѕƒанные[k]  = Ёкспорт– ѕƒанные[k]+' ^, '+јвтор»нициалы;
      end;
      if  јвтор„астица <> nil                   then
        Ёкспорт– ѕƒанные[k]  = Ёкспорт– ѕƒанные[k]+' ^ч, '+јвтор„астица;
      end;
      if  јвторƒоп—ведени€ <> nil               then
        Ёкспорт– ѕƒанные[k]  = Ёкспорт– ѕƒанные[k]+' ^(, '+јвторƒоп—ведени€;
      end;
      --2_1080. ?? --===============================================================


    --2_1100.--=====================================================================
    elsif  атегори€ќтветственности = 1          then
      k                         = k+1;
      Ёкспорт– ѕƒанные[k]        = '110';
      if ѕќ_Ќаименование.Ќаим  <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' '+ѕќ_Ќаименование.Ќаим;
      end;
      if ѕќ_√еоЌаим.Ќаим        <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^г '+ ѕќ_√еоЌаим.Ќаим;
      end;
      if ѕќ_ оллектив.Ќаим      <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^к '+ ѕќ_ оллектив.Ќаим;
      end;
      if ѕќ_—труктѕодр.Ќаим     <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^с '+ ѕќ_—труктѕодр.Ќаим;
      end;
      if ѕќ_¬ремѕодр.Ќаим       <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^в '+ ѕќ_¬ремѕодр.Ќаим;
      end;
      if ѕќ_Ќомер               <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^н '+ ѕќ_Ќомер;
      end;
      if ѕќ_ƒаты                <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^д '+ ѕќ_ƒаты;
      end;
      if ѕќ_ћесто               <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ ѕќ_ћесто;
      end;
    --2_1110.--=====================================================================
    elsif  атегори€ќтветственности = 2          then
      k                         = k+1;
      Ёкспорт– ѕƒанные[k]        = '111';
      if ¬ќ_Ќаименование.Ќаим  <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' '+¬ќ_Ќаименование.Ќаим;
      end;
      if ¬ќ_√еоЌаим.Ќаим        <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^г '+ ¬ќ_√еоЌаим.Ќаим;
      end;
      if ¬ќ_ оллектив.Ќаим      <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^к '+ ¬ќ_ оллектив.Ќаим;
      end;
      if ¬ќ_—труктѕодр.Ќаим     <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^с '+ ¬ќ_—труктѕодр.Ќаим;
      end;
      if ¬ќ_¬ремѕодр.Ќаим       <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^в '+ ¬ќ_¬ремѕодр.Ќаим;
      end;
      if ¬ќ_Ќомер               <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^н '+ ¬ќ_Ќомер;
      end;
      if ¬ќ_ƒаты                <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^д '+ ¬ќ_ƒаты;
      end;
      if ¬ќ_ћесто               <> nil          then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^м '+ ¬ќ_ћесто;
      end;
    end;
    --2_2470.--=====================================================================
    k                           = k+1;
    Ёкспорт– ѕƒанные[k]          = '247';
    if Ќазвание—татьи <> nil and Ќазвание—татьи<>"Ќова€ стать€..."              then
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+Ќазвание—татьи;
    end;
    if ѕодзаголовок—татьи<>nil  or
        раткое—одержание—татьи<>nil or  раткое—одержание—татьиƒоп<>nil          then
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' ^:';
      if ѕодзаголовок—татьи<>nil        then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' '+ѕодзаголовок—татьи+'';
      end;
      if  раткое—одержание—татьи<>nil or  раткое—одержание—татьиƒоп<>nil        then
        if     раткое—одержание—татьи<>nil and  раткое—одержание—татьиƒоп=nil   then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+ раткое—одержание—татьи;
        elsif  раткое—одержание—татьи<>nil and  раткое—одержание—татьиƒоп<>nil  then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+ раткое—одержание—татьи+" "+ раткое—одержание—татьиƒоп;
        elsif  раткое—одержание—татьи=nil and  раткое—одержание—татьиƒоп<>nil   then
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+ раткое—одержание—татьиƒоп;
        end;
      end;
      if ќтветственность1<>nil          then
        if SubStr(Ёкспорт– ѕƒанные[k],Length(Ёкспорт– ѕƒанные[k]),1)="]"        and
           SubStr(ќтветственность1,1,1)="["                                     then
        Ёкспорт– ѕƒанные[k]      = SubStr(Ёкспорт– ѕƒанные[k],1,Length(Ёкспорт– ѕƒанные[k])-1)+' ^/ '+SubStr(ќтветственность1,2,Length(ќтветственность1));
        else
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^/ '+ќтветственность1;
        end;
      end;
      if ќтветственность2<>nil          then
        if ќтветственность1<>nil        then
          if SubStr(Ёкспорт– ѕƒанные[k],Length(Ёкспорт– ѕƒанные[k]),1)="]"      and
             SubStr(ќтветственность2,1,1)="["                                   then
        Ёкспорт– ѕƒанные[k]      = SubStr(Ёкспорт– ѕƒанные[k],1,Length(Ёкспорт– ѕƒанные[k])-1)+' ^; '+SubStr(ќтветственность2,2,Length(ќтветственность2));
          else
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^; '+ќтветственность2;
          end;
        else
          if SubStr(Ёкспорт– ѕƒанные[k],Length(Ёкспорт– ѕƒанные[k]),1)="]"      and
             SubStr(ќтветственность2,1,1)="["                                   then
        Ёкспорт– ѕƒанные[k]      = SubStr(Ёкспорт– ѕƒанные[k],1,Length(Ёкспорт– ѕƒанные[k])-1)+' ^/ '+SubStr(ќтветственность2,2,Length(ќтветственность2));
          else
        Ёкспорт– ѕƒанные[k]      = Ёкспорт– ѕƒанные[k]+' ^/ '+ќтветственность2;
          end;
        end;
      end;
    end;
    --2_3070.--=====================================================================
    if —траницы—татьи <> nil    then
      k                         = k+1;
      if Pos('—',Up(—траницы—татьи))>0 then
        Ёкспорт– ѕƒанные[k]      = '307 '+—траницы—татьи;
      else
        Ёкспорт– ѕƒанные[k]      = '307 с. '+—траницы—татьи;
      end;
    end;
    --2_4870.--=====================================================================
--    y=nil;
--    for z = 1..Record.—ерии—татей.Count do
--      if —ерии—татей[z].Ќазвание—ерии.Ќаим <> nil       then
--        y=y+1;
--        if y=1 then
--          k                   = k+1;
--          Ёкспорт– ѕƒанные[k]  = '487 '+—ерии—татей[z].Ќазвание—ерии.Ќаим;
--          if —ерии—татей[z].Ќомер—ерии <> nil           then
--            if Pos('¬џѕ',Up(—ерии—татей[z].Ќомер—ерии))>0 then
--            Ёкспорт– ѕƒанные[k]= Ёкспорт– ѕƒанные[k]+' ^; '+—ерии—татей[z].Ќомер—ерии;
--            else
--            Ёкспорт– ѕƒанные[k]= Ёкспорт– ѕƒанные[k]+' ^; ¬ып. '+—ерии—татей[z].Ќомер—ерии;
--            end;
--          end;
--        else
--          k                   = k+1;
--          Ёкспорт– ѕƒанные[k]  = '487/'+Str(y-1)+' '+—ерии—татей[z].Ќазвание—ерии.Ќаим;
--          if —ерии—татей[z].Ќомер—ерии <> nil           then
--            if Pos('¬џѕ',Up(—ерии—татей[z].Ќомер—ерии))>0 then
--            Ёкспорт– ѕƒанные[k]= Ёкспорт– ѕƒанные[k]+' ^; '+—ерии—татей[z].Ќомер—ерии;
--            else
--            Ёкспорт– ѕƒанные[k]= Ёкспорт– ѕƒанные[k]+' ^; ¬ып. '+—ерии—татей[z].Ќомер—ерии;
--            end;
--          end;
--        end;
--      end;
--    end;
    y=nil;
    for z = 1..Record.Ќомераѕриложений.Count do
      if Ќазвание—ерииѕриложений.Ќаим <> nil       then
        y=y+1;
        if y=1 then
          k                   = k+1;
          Ёкспорт– ѕƒанные[k]  = '487 '+Ќазвание—ерииѕриложений.Ќаим;
          if Ќомераѕриложений[z].Ќомер¬ыпуска <> nil           then
            if Pos('¬џѕ',Up(Ќомераѕриложений[z].Ќомер¬ыпуска))>0 then
            Ёкспорт– ѕƒанные[k]= Ёкспорт– ѕƒанные[k]+' ^; '+Ќомераѕриложений[z].Ќомер¬ыпуска;
            else
            Ёкспорт– ѕƒанные[k]= Ёкспорт– ѕƒанные[k]+' ^; ¬ып. '+Ќомераѕриложений[z].Ќомер¬ыпуска;
            end;
          end;
        else
          k                   = k+1;
          Ёкспорт– ѕƒанные[k]  = '487/'+Str(y-1)+' '+Ќазвание—ерииѕриложений.Ќаим;
          if Ќомераѕриложений[z].Ќомер¬ыпуска <> nil           then
            if Pos('¬џѕ',Up(Ќомераѕриложений[z].Ќомер¬ыпуска))>0 then
            Ёкспорт– ѕƒанные[k]= Ёкспорт– ѕƒанные[k]+' ^; '+Ќомераѕриложений[z].Ќомер¬ыпуска;
            else
            Ёкспорт– ѕƒанные[k]= Ёкспорт– ѕƒанные[k]+' ^; ¬ып. '+Ќомераѕриложений[z].Ќомер¬ыпуска;
            end;
          end;
        end;
      end;
    end;
    --2_5470.--=====================================================================
    if ѕримќ«аглавии—ерии <> nil        then
      k                         = k+1;
      Ёкспорт– ѕƒанные[k]        = '547 «агл.: '+ѕримќ«аглавии—ерии;
    end;
    --2_5480.--=====================================================================
    if ѕримќбјвторах—татьи <> nil       then
      k                         = k+1;
      Ёкспорт– ѕƒанные[k]        = '548 јвт.: '+ѕримќбјвторах—татьи;
    end;
    --2_5760.--=====================================================================
    if ѕримќ—одержании—татьи <> nil     then
      k                         = k+1;
      Ёкспорт– ѕƒанные[k]        = '576 —одерж.: '+ѕримќ—одержании—татьи;
    end;
    --2_5800.--=====================================================================
    if ѕримќ—в€зи—татьи—ƒр <> nil       then
      k                         = k+1;
      --Ёкспорт– ѕƒанные[k]        = '580 —м.: '+ѕримќ—в€зи—татьи—ƒр;
      Ёкспорт– ѕƒанные[k]        = '580 —м.: '+ѕримќ—в€зи—татьи—ƒр;--изм.04.02.2009
    end;
    --2_5990.--=====================================================================
    if ѕримќѕриложении <> nil           then
      k                         = k+1;
      Ёкспорт– ѕƒанные[k]        = '599 ѕрил.: '+ѕримќѕриложении;
    end;
    --2_6000.--=====================================================================
    y=nil;
    for z = 1..Record.ѕерсоналии.Count do
      if ѕерсоналии[z].‘амили€ <> nil                   then
      y                         = y+1;
      k                         = k+1;
        if y=1 then
          Ёкспорт– ѕƒанные[k]    = '600';
        else
          Ёкспорт– ѕƒанные[k]    = '600/'+Str(y-1);
        end;
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+ѕерсоналии[z].‘амили€;
        if ѕерсоналии[z].»нициалы <> nil                then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^, '+ѕерсоналии[z].»нициалы;
        end;
        if ѕерсоналии[z].„астица  <> nil                then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^ч '+ѕерсоналии[z].„астица;
        end;
        if ѕерсоналии[z].ƒоп—ведени€  <> nil            then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+ѕерсоналии[z].ƒоп—ведени€;
        end;
      end;
    end;
    --2_7000.--=====================================================================
    y=nil;
    for z = 1..Record.јвторыЌе”казанные.Count do
      if јвторыЌе”казанные[z].‘амили€ <> nil            then
      y                         = y+1;
      k                         = k+1;
        if y=1 then
          Ёкспорт– ѕƒанные[k]    = '700';
        else
          Ёкспорт– ѕƒанные[k]    = '700/'+Str(y-1);
        end;
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+јвторыЌе”казанные[z].‘амили€;
        if јвторыЌе”казанные[z].»нициалы <> nil         then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^, '+јвторыЌе”казанные[z].»нициалы;
        end;
        if јвторыЌе”казанные[z].„астица  <> nil         then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^ч '+јвторыЌе”казанные[z].„астица;
        end;
        if јвторыЌе”казанные[z].ƒоп—ведени€  <> nil     then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+јвторыЌе”казанные[z].ƒоп—ведени€;
        end;
      end;
    end;
    --2_7010.--=====================================================================
    y=nil;
    for z = 1..Record.”частникиЅесед.Count do
      if ”частникиЅесед[z].‘амили€ <> nil               then
      y                         = y+1;
      k                         = k+1;
        if y=1 then
          Ёкспорт– ѕƒанные[k]    = '701';
        else
          Ёкспорт– ѕƒанные[k]    = '701/'+Str(y-1);
        end;
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+”частникиЅесед[z].‘амили€;
        if ”частникиЅесед[z].»нициалы <> nil            then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^, '+”частникиЅесед[z].»нициалы;
        end;
        if ”частникиЅесед[z].„астица  <> nil            then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^ч '+”частникиЅесед[z].„астица;
        end;
        if ”частникиЅесед[z].ƒоп—ведени€  <> nil        then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+”частникиЅесед[z].ƒоп—ведени€;
        end;
      end;
    end;
    --2_7020.--=====================================================================
    y=nil;
    for z = 1..Record.–едакторы.Count do
      if –едакторы[z].‘амили€ <> nil                    then
      y                         = y+1;
      k                         = k+1;
        if y=1 then
          Ёкспорт– ѕƒанные[k]    = '702';
        else
          Ёкспорт– ѕƒанные[k]    = '702/'+Str(y-1);
        end;
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+–едакторы[z].‘амили€;
        if –едакторы[z].»нициалы <> nil                 then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^, '+–едакторы[z].»нициалы;
        end;
        if –едакторы[z].„астица  <> nil                 then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^ч '+–едакторы[z].„астица;
        end;
        if –едакторы[z].ƒоп—ведени€  <> nil             then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+–едакторы[z].ƒоп—ведени€;
        end;
      end;
    end;
    --2_7030.--=====================================================================
    y=nil;
    for z = 1..Record.ѕереводчики.Count do
      if ѕереводчики[z].‘амили€ <> nil                  then
      y                         = y+1;
      k                         = k+1;
        if y=1 then
          Ёкспорт– ѕƒанные[k]    = '703';
        else
          Ёкспорт– ѕƒанные[k]    = '703/'+Str(y-1);
        end;
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+ѕереводчики[z].‘амили€;
        if ѕереводчики[z].»нициалы <> nil               then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^, '+ѕереводчики[z].»нициалы;
        end;
        if ѕереводчики[z].„астица  <> nil               then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^ч '+ѕереводчики[z].„астица;
        end;
        if ѕереводчики[z].ƒоп—ведени€  <> nil           then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+ѕереводчики[z].ƒоп—ведени€;
        end;
      end;
    end;
    --2_7040.--=====================================================================
    y=nil;
    for z = 1..Record.јвторы¬ступ—татей.Count do
      if јвторы¬ступ—татей[z].‘амили€ <> nil            then
      y                         = y+1;
      k                         = k+1;
        if y=1 then
          Ёкспорт– ѕƒанные[k]    = '704';
        else
          Ёкспорт– ѕƒанные[k]    = '704/'+Str(y-1);
        end;
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+јвторы¬ступ—татей[z].‘амили€;
        if јвторы¬ступ—татей[z].»нициалы <> nil         then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^, '+јвторы¬ступ—татей[z].»нициалы;
        end;
        if јвторы¬ступ—татей[z].„астица  <> nil         then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^ч '+јвторы¬ступ—татей[z].„астица;
        end;
        if јвторы¬ступ—татей[z].ƒоп—ведени€  <> nil     then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+јвторы¬ступ—татей[z].ƒоп—ведени€;
        end;
      end;
    end;
    --2_7050.--=====================================================================
    y=nil;
    for z = 1..Record.јвторыЋитќбработки.Count do
      if јвторыЋитќбработки[z].‘амили€ <> nil           then
      y                         = y+1;
      k                         = k+1;
        if y=1 then
          Ёкспорт– ѕƒанные[k]    = '705';
        else
          Ёкспорт– ѕƒанные[k]    = '705/'+Str(y-1);
        end;
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+јвторыЋитќбработки[z].‘амили€;
        if јвторыЋитќбработки[z].»нициалы <> nil        then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^, '+јвторыЋитќбработки[z].»нициалы;
        end;
        if јвторыЋитќбработки[z].„астица  <> nil        then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^ч '+јвторыЋитќбработки[z].„астица;
        end;
        if јвторыЋитќбработки[z].ƒоп—ведени€  <> nil    then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+јвторыЋитќбработки[z].ƒоп—ведени€;
        end;
      end;
    end;
    --2_7060.--=====================================================================
    y=nil;
    for z = 1..Record.»ллюстраторы.Count do
      if »ллюстраторы[z].‘амили€ <> nil                 then
      y                         = y+1;
      k                         = k+1;
        if y=1 then
          Ёкспорт– ѕƒанные[k]    = '706';
        else
          Ёкспорт– ѕƒанные[k]    = '706/'+Str(y-1);
        end;
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+»ллюстраторы[z].‘амили€;
        if »ллюстраторы[z].»нициалы <> nil              then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^, '+»ллюстраторы[z].»нициалы;
        end;
        if »ллюстраторы[z].„астица  <> nil              then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^ч '+»ллюстраторы[z].„астица;
        end;
        if »ллюстраторы[z].ƒоп—ведени€  <> nil          then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+»ллюстраторы[z].ƒоп—ведени€;
        end;
      end;
    end;
    --2_7070.--=====================================================================
    y=nil;
    for z = 1..Record.јвторы»нсценировок.Count do
      if јвторы»нсценировок[z].‘амили€ <> nil           then
      y                         = y+1;
      k                         = k+1;
        if y=1 then
          Ёкспорт– ѕƒанные[k]    = '600';
        else
          Ёкспорт– ѕƒанные[k]    = '600/'+Str(y-1);
        end;
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+јвторы»нсценировок[z].‘амили€;
        if јвторы»нсценировок[z].»нициалы <> nil        then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^, '+јвторы»нсценировок[z].»нициалы;
        end;
        if јвторы»нсценировок[z].„астица  <> nil        then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^ч '+јвторы»нсценировок[z].„астица;
        end;
        if јвторы»нсценировок[z].ƒоп—ведени€  <> nil    then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+јвторы»нсценировок[z].ƒоп—ведени€;
        end;
      end;
    end;
    --2_7090.--=====================================================================
    y=nil;
    for z = 1..Record.јвторыѕрочие.Count do
      if јвторыѕрочие[z].‘амили€ <> nil                 then
      y                         = y+1;
      k                         = k+1;
        if y=1 then
          Ёкспорт– ѕƒанные[k]    = '600';
        else
          Ёкспорт– ѕƒанные[k]    = '600/'+Str(y-1);
        end;
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+јвторыѕрочие[z].‘амили€;
        if јвторыѕрочие[z].»нициалы <> nil              then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^, '+јвторыѕрочие[z].»нициалы;
        end;
        if јвторыѕрочие[z].„астица  <> nil              then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^ч '+јвторыѕрочие[z].„астица;
        end;
        if јвторыѕрочие[z].ƒоп—ведени€  <> nil          then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^( '+јвторыѕрочие[z].ƒоп—ведени€;
        end;
      end;
    end;
    --2_8500.--=====================================================================
    y=nil;
    for z = 1..Record.»ндекс√ео.Count do
      if »ндекс√ео[z].–убрика√ео.Ќаим <> nil            then
      y                         = y+1;
      k                         = k+1;
        if y=1 then
          Ёкспорт– ѕƒанные[k]    = '850';
        else
          Ёкспорт– ѕƒанные[k]    = '850/'+Str(y-1);
        end;
      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+»ндекс√ео[z].–убрика√ео.Ќаим;
        if »ндекс√ео[z].ѕод–убрика—ист.Ќаим  <> nil     then
          Ёкспорт– ѕƒанные[k]    = Ёкспорт– ѕƒанные[k]+' ^, '+»ндекс√ео[z].ѕод–убрика—ист.Ќаим;
        end;
      end;
    end;
    --2_8510.--=====================================================================
--    y=nil;
--    for z = 1..Record.»ндекс—сылк.Count do
--      if  »ндекс—сылк[z].–убрика—сылк.Ќаим <> nil       then
--      y                         = y+1;
--      k                         = k+1;
--        if y=1 then
--          Ёкспорт– ѕƒанные[k]    = '851';
--        else
--          Ёкспорт– ѕƒанные[k]    = '851/'+Str(y-1);
--        end;
--      Ёкспорт– ѕƒанные[k]        = Ёкспорт– ѕƒанные[k]+' '+»ндекс—сылк[z].–убрика—сылк.Ќаим;
--      end;
--    end;
    --2_0030.--=====================================================================
    --2_0110.--=====================================================================
    --2_0150.--=====================================================================
    секцBChMarc.Count           = k;
    --////////////////////////////////////////////////////////////////////////--
    --==== —»Ќ’–ќЌ»«ј÷»я ѕќЋ”„≈ЌЌќ√ќ ћј——»¬ј — ѕќƒ“јЅЋ»÷≈… =====================
    --////////////////////////////////////////////////////////////////////////--
    --удаление лишних записей
    if  Record.Ёкспорт– ѕ.Count > секцBChMarc.Count              then
      kk                                = Record.Ёкспорт– ѕ.Count;
      for k = 1..kk                     do
        if kk+1-k>секцBChMarc.Count and kk>0                    then
          Record.Ёкспорт– ѕ.Delete(kk+1-k);
        end;
      end;
    end;
    --сравнение
    for k = 1..секцBChMarc.Count        do
      if k<=Record.Ёкспорт– ѕ.Count                              then
        z = k;
        if Record.Ёкспорт– ѕ[z].ƒанные<>Ёкспорт– ѕƒанные[z]       then
          Record.Ёкспорт– ѕ[z].ƒанные    = Ёкспорт– ѕƒанные[z];
        end;
      else
        z                               =  Record.Ёкспорт– ѕ.Add;
        Record.Ёкспорт– ѕ[z].ƒанные      = Ёкспорт– ѕƒанные[z];
      end;
    end;--цикл по массиву

  end;

  proc ‘ормирование«аголовкаЅиб«аписи;
  var «аголовок_        : string;
  var k                 : integer;
    if     атегори€ќтветственности      = 0             then
      if    јвтор‘амили€                <>nil           and
            јвтор»нициалы               <>nil           then
      «аголовок_ = јвтор‘амили€+", "+јвтор»нициалы;
      elsif јвтор‘амили€                <>nil           and
            јвтор»нициалы               = nil           then
      «аголовок_ = јвтор‘амили€;
      elsif јвтор‘амили€                <>nil           and
            јвтор»нициалы               = nil           then
      «аголовок_ = јвтор»нициалы;
      elsif јвтор‘амили€                = nil           and
            јвтор»нициалы               = nil           then
      «аголовок_ = Ќазвание—татьи;
      end;
--      if  «аголовок_<>nil                               then
--        if јвтор„астица<>nil                            then

--        end;
--      end;
      if  «аголовок_<>nil                               then
      for k = 1..—екцјвтор4.Count                       do
        if –азночтени€[k].–азночтение<>nil              then
          if k = 1                                      then
            «аголовок_ = «аголовок_ +" ("+–азночтени€[k].–азночтение;
          else
            «аголовок_ = «аголовок_ +", "+–азночтени€[k].–азночтение;
          end;
          if k = —екцјвтор4.Count                       then
--            if  јвторƒоп—ведени€        <>nil           then
--              «аголовок_ = «аголовок_+" ; "+јвторƒоп—ведени€;
--            end;
            «аголовок_ = «аголовок_+")";
          end;
        end;
      end;
      end;
    elsif  атегори€ќтветственности    = 1               then
      if    ѕќ_√еоЌаим.Ќаим<>nil                        and
            ѕќ_Ќаименование.Ќаим<>nil                   and
            ѕќ_ оллектив.Ќаим<>nil                      then
        «аголовок_ = ѕќ_√еоЌаим.Ќаим+". "+ѕќ_Ќаименование.Ќаим+". "+ѕќ_ оллектив.Ќаим+". ";
      elsif ѕќ_√еоЌаим.Ќаим<>nil                        and
            ѕќ_Ќаименование.Ќаим<>nil                   and
            ѕќ_ оллектив.Ќаим=nil                       then
        «аголовок_ = ѕќ_√еоЌаим.Ќаим+". "+ѕќ_Ќаименование.Ќаим+". ";
      elsif ѕќ_√еоЌаим.Ќаим<>nil                        and
            ѕќ_Ќаименование.Ќаим=nil                    and
            ѕќ_ оллектив.Ќаим=nil                       then
        «аголовок_ = ѕќ_√еоЌаим.Ќаим+". ";
      elsif ѕќ_√еоЌаим.Ќаим=nil                         and
            ѕќ_Ќаименование.Ќаим<>nil                   and
            ѕќ_ оллектив.Ќаим=nil                       then
        «аголовок_ = ѕќ_Ќаименование.Ќаим+". ";
      elsif ѕќ_√еоЌаим.Ќаим=nil                         and
            ѕќ_Ќаименование.Ќаим=nil                    and
            ѕќ_ оллектив.Ќаим<>nil                      then
        «аголовок_ = ѕќ_ оллектив.Ќаим+". ";
      elsif ѕќ_√еоЌаим.Ќаим=nil                         and
            ѕќ_Ќаименование.Ќаим<>nil                   and
            ѕќ_ оллектив.Ќаим<>nil                      then
        «аголовок_ = ѕќ_Ќаименование.Ќаим+". "+ѕќ_ оллектив.Ќаим+". ";
      elsif ѕќ_√еоЌаим.Ќаим<>nil                        and
            ѕќ_Ќаименование.Ќаим=nil                    and
            ѕќ_ оллектив.Ќаим<>nil                      then
        «аголовок_ = ѕќ_√еоЌаим.Ќаим+". "+ѕќ_ оллектив.Ќаим+". ";
      --
      elsif ѕќ_√еоЌаим.Ќаим=nil                         and
            ѕќ_Ќаименование.Ќаим=nil                    and
            ѕќ_ оллектив.Ќаим=nil                       then
        «аголовок_ = Ќазвание—татьи;
      else
        «аголовок_ = Ќазвание—татьи;
      end;
    ------
    elsif  атегори€ќтветственности    = 2               then
      if    ¬ќ_√еоЌаим.Ќаим<>nil                        and
            ¬ќ_Ќаименование.Ќаим<>nil                   and
            ¬ќ_ оллектив.Ќаим<>nil                      then
        «аголовок_ = ¬ќ_√еоЌаим.Ќаим+". "+¬ќ_Ќаименование.Ќаим+". "+¬ќ_ оллектив.Ќаим+". ";
      elsif ¬ќ_√еоЌаим.Ќаим<>nil                        and
            ¬ќ_Ќаименование.Ќаим<>nil                   and
            ¬ќ_ оллектив.Ќаим=nil                       then
        «аголовок_ = ¬ќ_√еоЌаим.Ќаим+". "+¬ќ_Ќаименование.Ќаим+". ";
      elsif ¬ќ_√еоЌаим.Ќаим<>nil                        and
            ¬ќ_Ќаименование.Ќаим=nil                    and
            ¬ќ_ оллектив.Ќаим=nil                       then
        «аголовок_ = ¬ќ_√еоЌаим.Ќаим+". ";
      elsif ¬ќ_√еоЌаим.Ќаим=nil                         and
            ¬ќ_Ќаименование.Ќаим<>nil                   and
            ¬ќ_ оллектив.Ќаим=nil                       then
        «аголовок_ = ¬ќ_Ќаименование.Ќаим+". ";
      elsif ¬ќ_√еоЌаим.Ќаим=nil                         and
            ¬ќ_Ќаименование.Ќаим=nil                    and
            ¬ќ_ оллектив.Ќаим<>nil                      then
        «аголовок_ = ¬ќ_ оллектив.Ќаим+". ";
      elsif ¬ќ_√еоЌаим.Ќаим=nil                         and
            ¬ќ_Ќаименование.Ќаим<>nil                   and
            ¬ќ_ оллектив.Ќаим<>nil                      then
        «аголовок_ = ¬ќ_Ќаименование.Ќаим+". "+¬ќ_ оллектив.Ќаим+". ";
      elsif ¬ќ_√еоЌаим.Ќаим<>nil                        and
            ¬ќ_Ќаименование.Ќаим=nil                    and
            ¬ќ_ оллектив.Ќаим<>nil                      then
        «аголовок_ = ¬ќ_√еоЌаим.Ќаим+". "+¬ќ_ оллектив.Ќаим+". ";
      --
      elsif ¬ќ_√еоЌаим.Ќаим=nil                         and
            ¬ќ_Ќаименование.Ќаим=nil                    and
            ¬ќ_ оллектив.Ќаим=nil                       then
        «аголовок_ = Ќазвание—татьи;
      else
        «аголовок_ = Ќазвание—татьи;
      end;
    --
    end;
    if «аголовок<>«аголовок_                            then
       «аголовок = «аголовок_;
    end;
  end;

  proc ‘ормированиеЅиб«аписи;
    var ¬ариант—веденийќтветственности   : integer;
    var k                                : integer;
    var  раткое—одержание—татьи_         : string;
    var  ¬—0_                            : logical;
    if not »справленоЅиблиографом then
      ‘ормирование«аголовкаЅиб«аписи;
      ќписание—татьи = nil;
      if («аголовок <> Ќазвание—татьи) then
        ќписание—татьи = ќписание—татьи + Ќазвание—татьи;
      fi;
      if (ѕодзаголовок—татьи <> nil) then
        ќписание—татьи = ќписание—татьи + " : ";
        ќписание—татьи = ќписание—татьи + ѕодзаголовок—татьи;
      fi;
      --дополнительна€ обработка сведений, добавленных библиографом
      if ( раткое—одержание—татьи <> nil) and ( раткое—одержание—татьиƒоп = nil) then
         раткое—одержание—татьи_ =  раткое—одержание—татьи;
      elsif ( раткое—одержание—татьи <> nil) and ( раткое—одержание—татьиƒоп <> nil) then
         раткое—одержание—татьи_ =  раткое—одержание—татьи + " " +  раткое—одержание—татьиƒоп;
      elsif ( раткое—одержание—татьи = nil) and ( раткое—одержание—татьиƒоп <> nil) then
         раткое—одержание—татьи_ =  раткое—одержание—татьиƒоп;
      fi;
    --fi;
    --определение варианта формы ответственности
      ¬ид нопок ¬—;
      if ( раткое—одержание—татьиƒоп = nil) then
         ¬—0_ =  ¬—0;
      else
         ¬—0_ = false;
      fi;
      ¬ариант—веденийќтветственности = 1; -- по умолчанию
      if    ( ¬—0_ = true)  and ( ¬—1 = true)  and ( ¬—2 = true)  then ¬ариант—веденийќтветственности = 1;
      elsif ( ¬—0_ = true)  and ( ¬—1 = true)  and ( ¬—2 = false) then ¬ариант—веденийќтветственности = 2;
      elsif ( ¬—0_ = true)  and ( ¬—1 = false) and ( ¬—2 = true)  then ¬ариант—веденийќтветственности = 3;
      elsif ( ¬—0_ = true)  and ( ¬—1 = false) and ( ¬—2 = false) then ¬ариант—веденийќтветственности = 4;
      elsif ( ¬—0_ = false) and ( ¬—1 = true)  and ( ¬—2 = true)  then ¬ариант—веденийќтветственности = 5;
      elsif ( ¬—0_ = false) and ( ¬—1 = true)  and ( ¬—2 = false) then ¬ариант—веденийќтветственности = 6;
      elsif ( ¬—0_ = false) and ( ¬—1 = false) and ( ¬—2 = true)  then ¬ариант—веденийќтветственности = 7;
      elsif ( ¬—0_ = false) and ( ¬—1 = false) and ( ¬—2 = false) then ¬ариант—веденийќтветственности = 8;
      fi;
      if (¬ариант—веденийќтветственности = 1) then    -- +++
        if ( атегори€ќтветственности = 0) then
          ќписание—татьи = ќписание—татьи + " : ";
        elsif ( атегори€ќтветственности > 0) then
          ќписание—татьи = ќписание—татьи + " ";
        fi;
        ќписание—татьи = ќписание—татьи + SubStr( раткое—одержание—татьи_, 1, Length( раткое—одержание—татьи_) - 1);
        ќписание—татьи = ќписание—татьи + " / " + SubStr(ќтветственность1, 2, Length(ќтветственность1) - 2);
        ќписание—татьи = ќписание—татьи + " ; " + SubStr(ќтветственность2, 2, Length(ќтветственность2));
      elsif (¬ариант—веденийќтветственности = 2) then    -- ++-
        if ( атегори€ќтветственности = 0) then
          ќписание—татьи = ќписание—татьи + " : ";
        elsif ( атегори€ќтветственности > 0) then
          ќписание—татьи = ќписание—татьи + " ";
        fi;
        ќписание—татьи = ќписание—татьи + SubStr( раткое—одержание—татьи_, 1, Length( раткое—одержание—татьи_) - 1);
        ќписание—татьи = ќписание—татьи + " / " + SubStr(ќтветственность1, 2, Length(ќтветственность1));
        if (ќтветственность2 <> nil) then
          ќписание—татьи = ќписание—татьи + " ; " + ќтветственность2;
        fi;
      elsif (¬ариант—веденийќтветственности = 3 ) then    -- +-+
        if (ќтветственность1 <> nil) then
          if ( атегори€ќтветственности = 0) then
            ќписание—татьи = ќписание—татьи + " : ";
          elsif ( атегори€ќтветственности > 0) then
            ќписание—татьи = ќписание—татьи + " ";
          fi;
          ќписание—татьи = ќписание—татьи +  раткое—одержание—татьи_;
          ќписание—татьи = ќписание—татьи + " / " + ќтветственность1;
          ќписание—татьи = ќписание—татьи + " ; " + ќтветственность2;
        else
          if ( атегори€ќтветственности = 0) then
            ќписание—татьи = ќписание—татьи + " : ";
          elsif ( атегори€ќтветственности > 0) then
            ќписание—татьи = ќписание—татьи + " ";
          fi;
          ќписание—татьи = ќписание—татьи + SubStr( раткое—одержание—татьи_, 1, Length( раткое—одержание—татьи_) - 1);
          ќписание—татьи = ќписание—татьи + " / " + SubStr(ќтветственность2, 2, Length(ќтветственность2));
        fi;
      elsif (¬ариант—веденийќтветственности = 4) then    -- +--
        if ( атегори€ќтветственности = 0) then
          ќписание—татьи = ќписание—татьи + " : ";
        elsif ( атегори€ќтветственности > 0) then
          ќписание—татьи = ќписание—татьи + " ";
        fi;
        ќписание—татьи = ќписание—татьи +  раткое—одержание—татьи_;
        if (ќтветственность1 <> nil) or (ќтветственность2 <> nil) then
          ќписание—татьи = ќписание—татьи + " / ";
          if (ќтветственность1 = nil) then
            ќписание—татьи = ќписание—татьи + ќтветственность2;
          elsif (ќтветственность2 = nil) then
            ќписание—татьи = ќписание—татьи + ќтветственность1;
          else
            ќписание—татьи = ќписание—татьи + ќтветственность1 + " ; " + ќтветственность2;
          fi;
        fi;
      elsif (¬ариант—веденийќтветственности = 5) then    -- -++
        if ( раткое—одержание—татьи_ <> nil) then
          if ( атегори€ќтветственности = 0) then
            ќписание—татьи = ќписание—татьи + " : ";
          elsif ( атегори€ќтветственности > 0) then
            ќписание—татьи = ќписание—татьи + " ";
          fi;
          ќписание—татьи = ќписание—татьи +  раткое—одержание—татьи_;
        fi;
        ќписание—татьи = ќписание—татьи + " / " + SubStr(ќтветственность1, 1, Length(ќтветственность1) - 1);
        ќписание—татьи = ќписание—татьи + " ; " + SubStr(ќтветственность2, 2, Length(ќтветственность2));
      elsif (¬ариант—веденийќтветственности = 6) then    -- -+-
        if ( раткое—одержание—татьи_ <> nil) then
          if ( атегори€ќтветственности = 0) then
            ќписание—татьи = ќписание—татьи + " : ";
          elsif ( атегори€ќтветственности > 0) then
            ќписание—татьи = ќписание—татьи + " ";
          fi;
          ќписание—татьи = ќписание—татьи +  раткое—одержание—татьи_;
        fi;
        ќписание—татьи = ќписание—татьи + " / " + ќтветственность1;
        if (ќтветственность2 <> nil) then
          ќписание—татьи = ќписание—татьи + " ; " + ќтветственность2;
        fi;
      elsif (¬ариант—веденийќтветственности = 7) then    -- --+
        if ( раткое—одержание—татьи_ <> nil) then
          if ( атегори€ќтветственности = 0) then
            ќписание—татьи = ќписание—татьи + " : ";
          elsif ( атегори€ќтветственности > 0) then
            ќписание—татьи = ќписание—татьи + " ";
          fi;
          ќписание—татьи = ќписание—татьи +  раткое—одержание—татьи_;
        fi;
        ќписание—татьи = ќписание—татьи + " / ";
        if (ќтветственность1 <> nil) then
          ќписание—татьи = ќписание—татьи + ќтветственность1 + " ; " + ќтветственность2;
        else
          ќписание—татьи = ќписание—татьи + ќтветственность2;
        fi;
      elsif (¬ариант—веденийќтветственности = 8) then    -- ---
        if ( раткое—одержание—татьи_ <> nil) then
          if ( атегори€ќтветственности = 0) then
            ќписание—татьи = ќписание—татьи + " : ";
          elsif ( атегори€ќтветственности > 0) then
            ќписание—татьи = ќписание—татьи + " ";
          fi;
          ќписание—татьи = ќписание—татьи +  раткое—одержание—татьи_;
        fi;
        if (ќтветственность1 <> nil) or (ќтветственность2 <> nil) then
          ќписание—татьи = ќписание—татьи + " / ";
          if (ќтветственность1 = nil) then
            ќписание—татьи = ќписание—татьи + ќтветственность2;
          elsif (ќтветственность2 = nil) then
            ќписание—татьи = ќписание—татьи + ќтветственность1;
          else
            ќписание—татьи = ќписание—татьи + ќтветственность1 + " ; " + ќтветственность2;
          fi;
        fi;
      fi;
      --
      ќписание—татьи = ќписание—татьи + "    //    ";
      ќписание—татьи = ќписание—татьи + Trim(Ќазваниеќсн);
      if (SubStr(ќписание—татьи, Length(ќписание—татьи), 1) <> ".") then
        ќписание—татьи = ќписание—татьи + ". -    ";
      else
        ќписание—татьи = ќписание—татьи + " -    ";
      fi;
      if (ƒаты¬ыхода <> nil) then
        ќписание—татьи = ќписание—татьи + ƒаты¬ыхода;
      fi;
      if (Ќомера¬ыхода <> nil) then
        ќписание—татьи = ќписание—татьи + " (";
        ќписание—татьи = ќписание—татьи + Ќомера¬ыхода;
        ќписание—татьи = ќписание—татьи + ").";
      fi;
      if (—траницы—татьи <> nil) then
        ќписание—татьи = ќписание—татьи + " - ";
        ќписание—татьи = ќписание—татьи + —траницы—татьи;
        ќписание—татьи = ќписание—татьи + ".";
      fi;
      --обработка серии  II
      if (Ќомераѕриложений.Count > 0) then
        for k = 1 .. Ќомераѕриложений.Count do
          if (k = 1) then
            ќписание—татьи = ќписание—татьи + " - ";
            ќписание—татьи = ќписание—татьи + "(";
            ќписание—татьи = ќписание—татьи + Ќазвание—ерииѕриложений.Ќаим;
            if (Ќомераѕриложений[k].Ќомер¬ыпуска <> nil) then
              ќписание—татьи = ќписание—татьи + " ; ";
              if (Pos('¬џѕ', Up(Ќомераѕриложений[k].Ќомер¬ыпуска)) = 0) then
                ќписание—татьи = ќписание—татьи + "є ";
              fi;
              ќписание—татьи = ќписание—татьи + Ќомераѕриложений[k].Ќомер¬ыпуска;
            fi;
          else
            if (Ќомераѕриложений[k].Ќомер¬ыпуска <> nil) then
              ќписание—татьи = ќписание—татьи + ", ";
              ќписание—татьи = ќписание—татьи + Ќомераѕриложений[k].Ќомер¬ыпуска;
            fi;
          fi;
          if (k = Ќомераѕриложений.Count) then
            ќписание—татьи = ќписание—татьи + ").";
          fi;
        od;
      else
        if (Ќазвание—ерииѕриложений.Ќаим <> nil) then
          ќписание—татьи = ќписание—татьи + " - ";
          ќписание—татьи = ќписание—татьи + "(";
          ќписание—татьи = ќписание—татьи + Ќазвание—ерииѕриложений.Ќаим;
          ќписание—татьи = ќписание—татьи + ").";
        fi;
      fi;
      --обработка примечаний
      if (ѕримќ«аглавии—ерии <> nil) then
        ќписание—татьи = ќписание—татьи + " - ";
        ќписание—татьи = ќписание—татьи + ѕримќ«аглавии—ерии + ".";
      fi;
      if (ѕримќбјвторах—татьи <> nil) then
        ќписание—татьи = ќписание—татьи + " - ";
        ќписание—татьи = ќписание—татьи + " јвт.: ";
        ќписание—татьи = ќписание—татьи + ѕримќбјвторах—татьи + ".";
      fi;
      if (ѕримќ—в€зи—татьи—ƒр <> nil) then
        ќписание—татьи = ќписание—татьи + " - ";
        --ќписание—татьи = ќписание—татьи + " —м.: ";--изм. 04.02.2009
        ќписание—татьи = ќписание—татьи + ѕримќ—в€зи—татьи—ƒр + ".";
      fi;
      if (ѕримќ—одержании—татьи <> nil) then
        ќписание—татьи = ќписание—татьи + " - ";
        ќписание—татьи = ќписание—татьи + " —одерж.: ";
        ќписание—татьи = ќписание—татьи + ѕримќ—одержании—татьи + ".";
      fi;
      if (ѕримќѕриложении <> nil) then
        ќписание—татьи = ќписание—татьи + " - ";
        ќписание—татьи = ќписание—татьи + " ѕрил.: ";
        ќписание—татьи = ќписание—татьи + ѕримќѕриложении + ".";
      fi;
      if (ѕримќѕодписи <> nil) then
        ќписание—татьи = ќписание—татьи + " - ";
        ќписание—татьи = ќписание—татьи + " ѕодпись: ";
        ќписание—татьи = ќписание—татьи + ѕримќѕодписи + ".";
      fi;
    fi; --исправлено библиографом
    --подсчет веро€тного количества строк в Ћ√—
     ол—трокЋ√—   = – ѕ_—татьи.¬ыпЋ√—. ол—трок—татьи¬Ћ√—(Ќомер«аписи¬¬ыпуске√Ћ,«аголовок,ќписание—татьи);
  end; --proc ‘ормированиеЅиб«аписи

  proc ‘ормированиеѕримечани€ќбјвторах;
  var k : integer;
        ѕримќбјвторах—татьи     = nil;
        for k = 1..Record.јвторыѕрочие.Count                    do
          if    k = 1                                           then
            if    Record.јвторыѕрочие[k].‘амили€<>""            and
                  Record.јвторыѕрочие[k].»м€<>""                then
            ѕримќбјвторах—татьи     = SubStr(Record.јвторыѕрочие[k].»м€,1,1)+". "+
                                      Record.јвторыѕрочие[k].‘амили€;
            elsif Record.јвторыѕрочие[k].‘амили€<>""            and
                  Record.јвторыѕрочие[k].»нициалы=""            then
            ѕримќбјвторах—татьи     = Record.јвторыѕрочие[k].‘амили€;
            end;
          elsif k > 1  and k < 4                                then
            if    ѕримќбјвторах—татьи <> ""                     then
            if    Record.јвторыѕрочие[k].‘амили€<>""            and
                  Record.јвторыѕрочие[k].»м€<>""                then
            ѕримќбјвторах—татьи     = ѕримќбјвторах—татьи+", "+
                                      SubStr(Record.јвторыѕрочие[k].»м€,1,1)+". "+
                                      Record.јвторыѕрочие[k].‘амили€;
            elsif Record.јвторыѕрочие[k].‘амили€<>""            and
                  Record.јвторыѕрочие[k].»нициалы=""            then
            ѕримќбјвторах—татьи     = ѕримќбјвторах—татьи+", "+
                                      Record.јвторыѕрочие[k].‘амили€;
            end;
            else
            if    Record.јвторыѕрочие[k].‘амили€<>""            and
                  Record.јвторыѕрочие[k].»м€<>""                then
            ѕримќбјвторах—татьи     = SubStr(Record.јвторыѕрочие[k].»м€,1,1)+". "+
                                      Record.јвторыѕрочие[k].‘амили€;
            elsif Record.јвторыѕрочие[k].‘амили€<>""            and
                  Record.јвторыѕрочие[k].»нициалы=""            then
            ѕримќбјвторах—татьи     = Record.јвторыѕрочие[k].‘амили€;
            end;
            end;
          elsif k = 4                                           then
            if    ѕримќбјвторах—татьи <> ""                     then
            if    Record.јвторыѕрочие[k].‘амили€<>""            and
                  Record.јвторыѕрочие[k].»м€<>""                then
            ѕримќбјвторах—татьи     = ѕримќбјвторах—татьи+", "+
                                      SubStr(Record.јвторыѕрочие[k].»м€,1,1)+". "+
                                      Record.јвторыѕрочие[k].‘амили€;
            elsif Record.јвторыѕрочие[k].‘амили€<>""            and
                  Record.јвторыѕрочие[k].»нициалы=""            then
            ѕримќбјвторах—татьи     = ѕримќбјвторах—татьи+", "+
                                      Record.јвторыѕрочие[k].‘амили€;
            end;
            else
            if    Record.јвторыѕрочие[k].‘амили€<>""            and
                  Record.јвторыѕрочие[k].»м€<>""                then
            ѕримќбјвторах—татьи     = SubStr(Record.јвторыѕрочие[k].»м€,1,1)+". "+
                                      Record.јвторыѕрочие[k].‘амили€;
            elsif Record.јвторыѕрочие[k].‘амили€<>""            and
                  Record.јвторыѕрочие[k].»нициалы=""            then
            ѕримќбјвторах—татьи     = Record.јвторыѕрочие[k].‘амили€;
            end;
            end;
          elsif k = 5 and ѕримќбјвторах—татьи <> ""             then
            ѕримќбјвторах—татьи     = ѕримќбјвторах—татьи+" и др.";
          end;
        end;--конец цикла по прочим авторам
  end;

  proc ‘ормированиеѕервых—веденийќтветственности;
    var k               : integer;
      --Ќечетное нажатие
      if (WordInString(јвтор‘амили€,ќтветственность1)=false     and
          WordInString(јвтор»м€,ќтветственность1)=false         and
          WordInString(јвторќтчество,ќтветственность1)=false)   or
         (WordInString(јвтор‘амили€,ќтветственность1)=true      and
          WordInString(јвтор»м€,ќтветственность1)=true          and
          WordInString(јвторќтчество,ќтветственность1)=false)   then
      if    јвтор‘амили€  <> nil        and
            јвтор»м€      <> nil        and
            јвторќтчество <> nil        then
        ќтветственность1                = јвтор»м€+" "+јвторќтчество+" "+јвтор‘амили€;
      elsif јвтор‘амили€  <> nil        and
            јвтор»м€      <> nil        and
            јвторќтчество =  nil        then
        ќтветственность1                = јвтор»м€+" "+јвтор‘амили€;
      elsif јвтор‘амили€  <> nil        and
            јвтор»м€      =  nil        and
            јвторќтчество =  nil        then
        ќтветственность1                = јвтор‘амили€;
      end;
      --„етное нажатие
      else
      if    јвтор‘амили€  <> nil        and
            јвтор»м€      <> nil        then
        ќтветственность1                = јвтор»м€+" "+јвтор‘амили€;
      elsif јвтор‘амили€  <> nil        and
            јвтор»м€      =  nil        then
        ќтветственность1                = јвтор‘амили€;
      end;
      end;
      --продолжение
      if ќтветственность1 <> nil        then
      for k = 1..—екцјвтор4.Count       do
        if  –азночтени€[k].–азночтение<>nil      then
          if k = 1                      then
            ќтветственность1            = ќтветственность1+" ("+–азночтени€[k].–азночтение;
          else
            ќтветственность1            = ќтветственность1+", "+–азночтени€[k].–азночтение;
          end;
          if k = —екцјвтор4.Count       then
            ќтветственность1            = ќтветственность1+")";
          end;
        end;
      end;
      end;
      --
      if јвтор„астица     <> nil        and
         ќтветственность1 <> nil        then
        ќтветственность1                = ќтветственность1+" "+јвтор„астица;
      end;
      if јвторƒоп—ведени€     <> nil    and
         ќтветственность1 <> nil        then
        ќтветственность1                = ќтветственность1+" ; "+јвторƒоп—ведени€;
      end;
      if ќтветственность1<>nil                  and
         (Pos("[",ќтветственность1)=0           or
          Pos("]",ќтветственность1)=0)          then
              ќтветственность1 = "["+ќтветственность1+"]";
      end;
      ¬ид нопок ¬—;
  end;

  proc ‘ормированиеѕослед—веденийќтветственности;
    var k               : integer;
    var јвтор_          : string;
    var Sec             : TemplateSection;
    var SubTab          : Subtable;
                ќтветственность2 = nil;
--      for k = 1..секцѕерсоналии2.Count                          do
--      end;
    -- Ќј„јЋќ 2
    -- 700 --
      јвтор_ = "";
      Sec    = секцјвторыЌе”казанные2;
      SubTab = јвторыЌе”казанные;
      for k = 1..Sec.Count              do
        if    SubTab[k].‘амили€         <>nil   and
              --SubTab[k].»нициалы        <>nil   then
              --јвтор_ = SubTab[k].»нициалы+" "+SubTab[k].‘амили€;
              SubTab[k].»м€             <>nil   then
              јвтор_ = SubTab[k].»м€     +" "+SubTab[k].‘амили€;
        elsif SubTab[k].‘амили€         <>nil   and
              --SubTab[k].»нициалы        = nil   then
              SubTab[k].»м€             = nil   then
              јвтор_ = SubTab[k].‘амили€;
        end;
        if    јвтор_                    <> nil  and
              SubTab[k].„астица         <> nil  then
              јвтор_ = јвтор_+" "+SubTab[k].„астица;
        end;
        if    јвтор_<>""                        then
          if      k=1                           then
              ќтветственность2 = јвтор_;
          elsif   k>1 and k<4                   then
              ќтветственность2 = ќтветственность2+", "+јвтор_;
          elsif   k=4                           then
              ќтветственность2 = ќтветственность2+" и др.";
          end;
        end;
      end;
  -- 701 --
      for k = 1..секц”частникиЅесед2.Count                      do
      end;
    -- 702 --
      јвтор_ = "";
      Sec    = секц–едакторы2;
      SubTab = –едакторы;
      for k = 1..Sec.Count              do
        if    SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        <>nil   then
              јвтор_ = SubTab[k].»нициалы+" "+SubTab[k].‘амили€;
        elsif SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        = nil   then
              јвтор_ = SubTab[k].‘амили€;
        end;
        if    јвтор_                    <> nil  and
              SubTab[k].„астица         <> nil  then
              јвтор_ = јвтор_+" "+SubTab[k].„астица;
        end;
        if    јвтор_<>""                        then
          if      k=1                           then
            if ќтветственность2         =  nil  then
              ќтветственность2 = ‘ормаќтветственности.ѕоЌомеру(702,‘ормаќтв–,0)+" "+јвтор_;
            else
              ќтветственность2 = ќтветственность2+" ; "+‘ормаќтветственности.ѕоЌомеру(702,‘ормаќтв–,0)+" "+јвтор_;
            end;
          elsif   k>1 and k<4                   then
              ќтветственность2 = ќтветственность2+", "+јвтор_;
          elsif   k=4                           then
              ќтветственность2 = ќтветственность2+" и др.";
          end;
        end;
      end;
    -- 703 --
      јвтор_ = "";
      Sec    = секцѕереводчики2;
      SubTab = ѕереводчики;
      for k = 1..Sec.Count              do
        if    SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        <>nil   then
              јвтор_ = SubTab[k].»нициалы+" "+SubTab[k].‘амили€;
        elsif SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        = nil   then
              јвтор_ = SubTab[k].‘амили€;
        end;
        if    јвтор_                    <> nil  and
              SubTab[k].„астица         <> nil  then
              јвтор_ = јвтор_+" "+SubTab[k].„астица;
        end;
        if    јвтор_<>""                        then
          if      k=1                           then
            if ќтветственность2         =  nil  then
              if языкќригинала          =  nil  then
              ќтветственность2 = ‘ормаќтветственности.ѕоЌомеру(703,0,0)+" "+јвтор_;
              else
              ќтветственность2 = ‘ормаќтветственности.ѕоЌомеру(703,0,0)+" c "+языкќригинала.ЌаимЅибл+" "+јвтор_;
              end;
            else
              if языкќригинала          =  nil  then
              ќтветственность2 = ќтветственность2+" ; "+‘ормаќтветственности.ѕоЌомеру(703,0,0)+" "+јвтор_;
              else
              ќтветственность2 = ќтветственность2+" ; "+‘ормаќтветственности.ѕоЌомеру(703,0,0)+" c "+языкќригинала.ЌаимЅибл+" "+јвтор_;
              end;
            end;
          elsif   k>1 and k<4                   then
              ќтветственность2 = ќтветственность2+", "+јвтор_;
          elsif   k=4                           then
              ќтветственность2 = ќтветственность2+" и др.";
          end;
        end;
      end;
    -- 704 --
      јвтор_ = "";
      Sec    = секцјвторы¬ступ—татей2;
      SubTab = јвторы¬ступ—татей;
      for k = 1..Sec.Count              do
        if    SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        <>nil   then
              јвтор_ = SubTab[k].»нициалы+" "+SubTab[k].‘амили€;
        elsif SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        = nil   then
              јвтор_ = SubTab[k].‘амили€;
        end;
        if    јвтор_                    <> nil  and
              SubTab[k].„астица         <> nil  then
              јвтор_ = јвтор_+" "+SubTab[k].„астица;
        end;
        if    јвтор_<>""                        then
          if      k=1                           then
            if ќтветственность2         =  nil  then
              ќтветственность2 = ‘ормаќтветственности.ѕоЌомеру(704,0,0)+" "+јвтор_;
            else
              ќтветственность2 = ќтветственность2+" ; "+‘ормаќтветственности.ѕоЌомеру(704,0,0)+" "+јвтор_;
            end;
          elsif   k>1 and k<4                   then
              ќтветственность2 = ќтветственность2+", "+јвтор_;
          elsif   k=4                           then
              ќтветственность2 = ќтветственность2+" и др.";
          end;
        end;
      end;
    -- 705 --
      јвтор_ = "";
      Sec    = секцјвторыЋитќбработки2;
      SubTab = јвторыЋитќбработки;
      for k = 1..Sec.Count              do
        if    SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        <>nil   then
              јвтор_ = SubTab[k].»нициалы+" "+SubTab[k].‘амили€;
        elsif SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        = nil   then
              јвтор_ = SubTab[k].‘амили€;
        end;
        if    јвтор_                    <> nil  and
              SubTab[k].„астица         <> nil  then
              јвтор_ = јвтор_+" "+SubTab[k].„астица;
        end;
        if    јвтор_<>""                        then
          if      k=1                           then
            if ќтветственность2         =  nil  then
              ќтветственность2 = ‘ормаќтветственности.ѕоЌомеру(705,‘ормаќтвјЋќ,0)+" "+јвтор_;
            else
              ќтветственность2 = ќтветственность2+" ; "+‘ормаќтветственности.ѕоЌомеру(705,‘ормаќтвјЋќ,0)+" "+јвтор_;
            end;
          elsif   k>1 and k<4                   then
              ќтветственность2 = ќтветственность2+", "+јвтор_;
          elsif   k=4                           then
              ќтветственность2 = ќтветственность2+" и др.";
          end;
        end;
      end;
    -- 706 --
      јвтор_ = "";
      Sec    = секц»ллюстраторы2;
      SubTab = »ллюстраторы;
      for k = 1..Sec.Count              do
        if    SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        <>nil   then
              јвтор_ = SubTab[k].»нициалы+" "+SubTab[k].‘амили€;
        elsif SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        = nil   then
              јвтор_ = SubTab[k].‘амили€;
        end;
        if    јвтор_                    <> nil  and
              SubTab[k].„астица         <> nil  then
              јвтор_ = јвтор_+" "+SubTab[k].„астица;
        end;
        if    јвтор_<>""                        then
          if      k=1                           then
            if ќтветственность2         =  nil  then
              ќтветственность2 = ‘ормаќтветственности.ѕоЌомеру(706,0,0)+" "+јвтор_;
            else
              ќтветственность2 = ќтветственность2+" ; "+‘ормаќтветственности.ѕоЌомеру(706,0,0)+" "+јвтор_;
            end;
          elsif   k>1 and k<4                   then
              ќтветственность2 = ќтветственность2+", "+јвтор_;
          elsif   k=4                           then
              ќтветственность2 = ќтветственность2+" и др.";
          end;
        end;
      end;
    -- 707 --
      јвтор_ = "";
      Sec    = секцјвторы»нсценировок2;
      SubTab = јвторы»нсценировок;
      for k = 1..Sec.Count              do
        if    SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        <>nil   then
              јвтор_ = SubTab[k].»нициалы+" "+SubTab[k].‘амили€;
        elsif SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        = nil   then
              јвтор_ = SubTab[k].‘амили€;
        end;
        if    јвтор_                    <> nil  and
              SubTab[k].„астица         <> nil  then
              јвтор_ = јвтор_+" "+SubTab[k].„астица;
        end;
        if    јвтор_<>""                        then
          if      k=1                           then
            if ќтветственность2         =  nil  then
              ќтветственность2 = ‘ормаќтветственности.ѕоЌомеру(707,0,0)+" "+јвтор_;
            else
              ќтветственность2 = ќтветственность2+" ; "+‘ормаќтветственности.ѕоЌомеру(707,0,0)+" "+јвтор_;
            end;
          elsif   k>1 and k<4                   then
              ќтветственность2 = ќтветственность2+", "+јвтор_;
          elsif   k=4                           then
              ќтветственность2 = ќтветственность2+" и др.";
          end;
        end;
      end;
    -- 709 --
      if ¬ѕримечани€х = false                   then
      јвтор_ = "";
      Sec    = секцјвторыѕрочие2;
      SubTab = јвторыѕрочие;
      for k = 1..Sec.Count              do
        if    SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        <>nil   then
              јвтор_ = SubTab[k].»нициалы+" "+SubTab[k].‘амили€;
        elsif SubTab[k].‘амили€         <>nil   and
              SubTab[k].»нициалы        = nil   then
              јвтор_ = SubTab[k].‘амили€;
        end;
        if    јвтор_                    <> nil  and
              SubTab[k].„астица         <> nil  then
              јвтор_ = јвтор_+" "+SubTab[k].„астица;
        end;
        if    јвтор_<>""                        then
          if      k=1                           then
            if ќтветственность2         =  nil  then
              if Sec.Count              = 1     then
              ќтветственность2 = ‘ормаќтветственности.ѕоЌомеру(709,0,0)+" "+јвтор_;
              else
              ќтветственность2 = ‘ормаќтветственности.ѕоЌомеру(709,1,0)+" "+јвтор_;
              end;
            else
              if Sec.Count              = 1     then
              ќтветственность2 = ќтветственность2+" ; "+‘ормаќтветственности.ѕоЌомеру(709,0,0)+" "+јвтор_;
              else
              ќтветственность2 = ќтветственность2+" ; "+‘ормаќтветственности.ѕоЌомеру(709,1,0)+" "+јвтор_;
              end;
            end;
          elsif   k>1 and k<4                   then
              ќтветственность2 = ќтветственность2+", "+јвтор_;
          elsif   k=4                           then
              ќтветственность2 = ќтветственность2+" и др.";
          end;
        end;
      end;
      end;
      if ќтветственность2<>nil                  and
         (Pos("[",ќтветственность2)=0           or
          Pos("]",ќтветственность2)=0)          then
              ќтветственность2 = "["+ќтветственность2+"]";
      end;
      ¬ид нопок ¬—;
  end;

  proc ќбработкаЌомера√азетыЋ√—(Index:integer;Rec:– ѕ_√азеты.Ќомер√азеты);--¬ направлении –√ -> Ћ√—
  var dats      : date;
    if Index>0 and Rec<>nil     then            -- условие корректности состо€ни€ подтаблицы (index) и ссылки на номер газеты(rec)
      Ќомера√азеты[index].Ќомер√азеты           = Rec;
      Ќомера√азеты[index].Ќомер                 = – ѕ_—»—.StdCode.NoSpace(Rec.Ќомер);
      Ќомера√азеты[index].ƒата¬ыхода            = Rec.ƒата¬ыхода;
      Ќомера√азеты[index].“очностьƒаты¬ыхода    = Rec.“очностьƒаты¬ыхода;
      --определение дат
      if Index=1                then            -- только при обработке первой позиции
        ƒатаЌачалаЌомера                        = Rec.ƒатаЌачалаЌомера;
        “очностьƒатыЌачалаЌомера                = Rec.“очностьƒатыЌачалаЌомера;
      end;
      ¬ид“очностиƒат¬ыхода;
      if ƒатаЌачалаЌомера=nil   then            -- только если дата начала номера не определена
      if index = 1 and Rec.ƒата¬ыхода<>nil      then
        dats = ќписаниеƒат.ЌачалоЌомера(Rec.√азета,Rec.ƒата¬ыхода);
        ƒатаЌачалаЌомера = dats;
      end;
      end;
    end;
  end; --proc ќбработкаЌомера√азетыЋ√—

  proc ќбработкаЌомера√азеты–√(Index:integer;Rec:– ѕ_√азеты.Ќомер√азеты);--¬ направлении Ћ√— -> –√
  --«апись даты номера отключена 19.03.2010 по просьбе –√
--    if Index>0 and Rec<>nil then
--      --если дата выхода номера не совпадает с введенной (вкл. нулевое значение)
--      if Rec.ƒата¬ыхода <> Ќомера√азеты[index].ƒата¬ыхода                       then
--        Rec.ƒата¬ыхода =  Ќомера√азеты[index].ƒата¬ыхода;
--        if Rec.State = Rec.Edited                                               then
--          Rec.Post;
--        end;
--      end;
--      --если точность даты выхода номера не совпадает с введенной
--      if Rec.“очностьƒаты¬ыхода <> Ќомера√азеты[index].“очностьƒаты¬ыхода       then
--        Rec.“очностьƒаты¬ыхода =  Ќомера√азеты[index].“очностьƒаты¬ыхода;
--        if Rec.State = Rec.Edited                                               then
--          Rec.Post;
--        end;
--      end;
--      --корректировка даты начала номера
--      if index = 1                                                              then
--        if Rec.ƒатаЌачалаЌомера<>ƒатаЌачалаЌомера and ƒатаЌачалаЌомера<>nil     then
--          Rec.ƒатаЌачалаЌомера=ƒатаЌачалаЌомера;
--          if Rec.State = Rec.Edited                                             then
--            Rec.Post;
--          end;
--        end;
--        if Rec.“очностьƒатыЌачалаЌомера<>“очностьƒатыЌачалаЌомера               then
--          Rec.“очностьƒатыЌачалаЌомера=“очностьƒатыЌачалаЌомера;
--          if Rec.State = Rec.Edited                                             then
--            Rec.Post;
--          end;
--        end;
--      end;
--    end;
  end; --proc ќбработкаЌомера√азеты–√

  func ƒобавитьѕозицию(FieldName:String; Cell :TemplateCell) :Logical;
  var index:integer;
    if          Cell.Owner.SubtableName = "јвторы—татьи"        then
      Template.CurrentFrame             = фрейм»ндјвторы;
    elsif       Cell.Owner.SubtableName = "ѕерсоналии"          then
      Template.CurrentFrame             = фреймјвторы2;
      Template.CurrentSection           = секцѕерсоналии2;
    elsif       Cell.Owner.SubtableName = "јвторыЌе”казанные"   then
      Template.CurrentFrame             = фреймјвторы2;
      Template.CurrentSection           = секцјвторыЌе”казанные2;
    elsif       Cell.Owner.SubtableName = "”частникиЅесед"      then
      Template.CurrentFrame             = фреймјвторы2;
      Template.CurrentSection           = секц”частникиЅесед2;
    elsif       Cell.Owner.SubtableName = "–едакторы"           then
      Template.CurrentFrame             = фреймјвторы2;
      Template.CurrentSection           = секц–едакторы2;
    elsif       Cell.Owner.SubtableName = "ѕереводчики"         then
      Template.CurrentFrame             = фреймјвторы2;
      Template.CurrentSection           = секцѕереводчики2;
    elsif       Cell.Owner.SubtableName = "јвторы¬ступ—татей"   then
      Template.CurrentFrame             = фреймјвторы2;
      Template.CurrentSection           = секцјвторы¬ступ—татей2;
    elsif       Cell.Owner.SubtableName = "јвторыЋитќбработки"  then
      Template.CurrentFrame             = фреймјвторы2;
      Template.CurrentSection           = секцјвторыЋитќбработки2;
    elsif       Cell.Owner.SubtableName = "»ллюстраторы"        then
      Template.CurrentFrame             = фреймјвторы2;
      Template.CurrentSection           = секц»ллюстраторы2;
    elsif       Cell.Owner.SubtableName = "јвторы»нсценировок"  then
      Template.CurrentFrame             = фреймјвторы2;
      Template.CurrentSection           = секцјвторы»нсценировок2;
    elsif       Cell.Owner.SubtableName = "јвторыѕрочие"        then
      Template.CurrentFrame             = фреймјвторы2;
      Template.CurrentSection           = секцјвторыѕрочие2;
    end;
    Template.CurrentCell              = Cell;
    --self.Template.Field = FieldName;
    if Template.CurrentSection.Count=0 then
      index=1;
    else
      index=Cell.Frame+1;
    end;
    self.Template.Frame = index;
    Template.CurrentSection.InsertFrame(index);
    --self.Template.Field = FieldName;
    Template.CurrentCell              = Cell;
    Template.CurrentCell.SetFocus;
    self.Template.Frame=index;
    Result = True;
  end;


end